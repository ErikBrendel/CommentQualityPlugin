# id;timestamp;commentText;codeText;commentWords;codeWords
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1328020251;Specify JPA properties as a Map, to be passed into_<code>EntityManagerFactory.createEntityManager(Map)</code> (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,code,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1356735495;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1357119239;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1364391983;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1364559513;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1368482696;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1372363092;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1374672550;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1412620305;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1412635413;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1418055719;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1467730834;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1487371244;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1496837955;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1498780456;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1500416137;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1500448076;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1530174524;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1530174524;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1530709637;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1530791615;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1531144424;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> @Nullable 	public EntityManagerFactory getEntityManagerFactory();1535712004;Return the EntityManagerFactory that this instance should manage transactions for.;@Nullable_	public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;nullable,public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1328020251;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1356735495;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1357119239;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1364391983;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1364559513;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1368482696;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1372363092;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1374672550;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1412620305;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1412635413;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1418055719;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1467730834;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1487371244;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1495868221;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1496259743;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1496837955;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1498780456;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1500416137;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1500448076;Create a new JpaTransactionManager instance._@param emf EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1530174524;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1530174524;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1530709637;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1530791615;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1531144424;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public JpaTransactionManager(EntityManagerFactory emf);1535712004;Create a new JpaTransactionManager instance._@param emf the EntityManagerFactory to manage transactions for;public JpaTransactionManager(EntityManagerFactory emf) {_		this()__		this.entityManagerFactory = emf__		afterPropertiesSet()__	};create,a,new,jpa,transaction,manager,instance,param,emf,the,entity,manager,factory,to,manage,transactions,for;public,jpa,transaction,manager,entity,manager,factory,emf,this,this,entity,manager,factory,emf,after,properties,set
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1495868221;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1496259743;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1496837955;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1498780456;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1500416137;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1500448076;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1530174524;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1530174524;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1530709637;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1530791615;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1531144424;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(@Nullable Properties jpaProperties);1535712004;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(@Nullable Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,nullable,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1328020251;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1356735495;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1357119239;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1364391983;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1364559513;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1368482696;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explictly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1372363092;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1374672550;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1412620305;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1412635413;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1418055719;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1467730834;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1487371244;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1495868221;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(JpaDialect jpaDialect);1496259743;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1328020251;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1356735495;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1357119239;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1364391983;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1364559513;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1368482696;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1372363092;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1374672550;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1412620305;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1412635413;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved through finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1418055719;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1467730834;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1487371244;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1495868221;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1496259743;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1496837955;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1498780456;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(EntityManagerFactory emf);1500416137;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1328020251;Specify JPA properties, to be passed into_<code>EntityManagerFactory.createEntityManager(Map)</code> (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,code,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1356735495;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1357119239;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1364391983;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1364559513;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1368482696;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1372363092;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1374672550;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1412620305;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1412635413;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1418055719;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1467730834;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public void setJpaProperties(Properties jpaProperties);1487371244;Specify JPA properties, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor)_or a "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1328020251;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1356735495;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1357119239;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1364391983;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1364559513;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1368482696;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1372363092;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1374672550;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1412620305;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1412635413;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1418055719;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1467730834;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1487371244;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1495868221;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1496259743;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1496837955;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1498780456;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1500416137;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1500448076;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1530174524;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1530174524;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1530709637;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1530791615;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1531144424;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> public Map<String, Object> getJpaPropertyMap();1535712004;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1328020251;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1356735495;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1357119239;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1364391983;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1364559513;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1368482696;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1372363092;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1374672550;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1412620305;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1412635413;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1418055719;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1467730834;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1487371244;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1495868221;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1496259743;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1496837955;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1498780456;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1500416137;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1500448076;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1530174524;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1530174524;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1530709637;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1530791615;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1531144424;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> @Override 	protected boolean shouldCommitOnGlobalRollbackOnly();1535712004;This implementation returns "true": a JPA commit will properly handle_transactions that have been marked rollback-only at a global level.;@Override_	protected boolean shouldCommitOnGlobalRollbackOnly() {_		return true__	};this,implementation,returns,true,a,jpa,commit,will,properly,handle,transactions,that,have,been,marked,rollback,only,at,a,global,level;override,protected,boolean,should,commit,on,global,rollback,only,return,true
JpaTransactionManager -> public JpaTransactionManager();1328020251;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1356735495;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1357119239;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1364391983;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1364559513;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1368482696;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1372363092;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1374672550;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1412620305;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1412635413;Create a new JpaTransactionManager instance._A EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,a,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1418055719;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1467730834;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1487371244;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1495868221;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1496259743;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1496837955;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1498780456;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1500416137;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1500448076;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1530174524;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1530174524;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1530709637;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1530791615;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1531144424;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> public JpaTransactionManager();1535712004;Create a new JpaTransactionManager instance._<p>An EntityManagerFactory has to be set to be able to use it._@see #setEntityManagerFactory;public JpaTransactionManager() {_		setNestedTransactionAllowed(true)__	};create,a,new,jpa,transaction,manager,instance,p,an,entity,manager,factory,has,to,be,set,to,be,able,to,use,it,see,set,entity,manager,factory;public,jpa,transaction,manager,set,nested,transaction,allowed,true
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1328020251;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1356735495;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1357119239;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1364391983;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1364559513;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1368482696;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1372363092;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1374672550;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1412620305;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1412635413;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1418055719;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1467730834;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1487371244;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1495868221;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1496259743;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1496837955;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1498780456;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1500416137;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1500448076;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1530174524;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1530174524;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1530709637;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1530791615;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1531144424;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject);1535712004;Close the current transaction's EntityManager._Called after a transaction begin attempt failed._@param txObject the current transaction;protected void closeEntityManagerAfterFailedBegin(JpaTransactionObject txObject) {_		if (txObject.isNewEntityManagerHolder()) {_			EntityManager em = txObject.getEntityManagerHolder().getEntityManager()__			try {_				if (em.getTransaction().isActive()) {_					em.getTransaction().rollback()__				}_			}_			catch (Throwable ex) {_				logger.debug("Could not rollback EntityManager after failed transaction begin", ex)__			}_			finally {_				EntityManagerFactoryUtils.closeEntityManager(em)__			}_			txObject.setEntityManagerHolder(null, false)__		}_	};close,the,current,transaction,s,entity,manager,called,after,a,transaction,begin,attempt,failed,param,tx,object,the,current,transaction;protected,void,close,entity,manager,after,failed,begin,jpa,transaction,object,tx,object,if,tx,object,is,new,entity,manager,holder,entity,manager,em,tx,object,get,entity,manager,holder,get,entity,manager,try,if,em,get,transaction,is,active,em,get,transaction,rollback,catch,throwable,ex,logger,debug,could,not,rollback,entity,manager,after,failed,transaction,begin,ex,finally,entity,manager,factory,utils,close,entity,manager,em,tx,object,set,entity,manager,holder,null,false
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1500448076;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530709637;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530791615;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1531144424;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1535712004;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1356735495;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1368482696;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1372363092;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1374672550;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1412620305;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1412635413;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1418055719;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1467730834;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1487371244;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1495868221;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1496259743;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1496837955;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1498780456;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1500416137;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1500448076;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1530174524;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1530174524;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1530709637;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1530791615;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1531144424;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> @Override 	public void afterPropertiesSet();1535712004;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;@Override_	public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;override,public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1500448076;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530174524;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530174524;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530709637;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530791615;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1531144424;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1535712004;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1496837955;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1498780456;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1500416137;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1500448076;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1530174524;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1530174524;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1530709637;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1530791615;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1531144424;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1535712004;Set the JPA dialect to use for this transaction manager._Used for vendor-specific transaction management and JDBC connection exposure._<p>If the EntityManagerFactory uses a known JpaDialect, it will be autodetected:_You can still explicitly specify the DataSource, but you don't need to in this case._<p>The dialect object can be used to retrieve the underlying JDBC connection_and thus allows for exposing JPA transactions as JDBC transactions._@see EntityManagerFactoryInfo#getJpaDialect()_@see JpaDialect#beginTransaction_@see JpaDialect#getJdbcConnection;public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = (jpaDialect != null ? jpaDialect : new DefaultJpaDialect())__	};set,the,jpa,dialect,to,use,for,this,transaction,manager,used,for,vendor,specific,transaction,management,and,jdbc,connection,exposure,p,if,the,entity,manager,factory,uses,a,known,jpa,dialect,it,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,the,dialect,object,can,be,used,to,retrieve,the,underlying,jdbc,connection,and,thus,allows,for,exposing,jpa,transactions,as,jdbc,transactions,see,entity,manager,factory,info,get,jpa,dialect,see,jpa,dialect,begin,transaction,see,jpa,dialect,get,jdbc,connection;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect,null,jpa,dialect,new,default,jpa,dialect
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1496837955;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1498780456;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1500416137;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1500448076;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1530174524;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1530174524;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1530709637;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1530791615;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1531144424;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> protected final EntityManagerFactory obtainEntityManagerFactory();1535712004;Obtain the EntityManagerFactory for actual use._@return the EntityManagerFactory (never {@code null})_@throws IllegalStateException in case of no EntityManagerFactory set_@since 5.0;protected final EntityManagerFactory obtainEntityManagerFactory() {_		EntityManagerFactory emf = getEntityManagerFactory()__		Assert.state(emf != null, "No EntityManagerFactory set")__		return emf__	};obtain,the,entity,manager,factory,for,actual,use,return,the,entity,manager,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,entity,manager,factory,set,since,5,0;protected,final,entity,manager,factory,obtain,entity,manager,factory,entity,manager,factory,emf,get,entity,manager,factory,assert,state,emf,null,no,entity,manager,factory,set,return,emf
JpaTransactionManager -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1328020251;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1357119239;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1364391983;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1364559513;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1328020251;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1356735495;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1357119239;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1364391983;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1364559513;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1368482696;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1372363092;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1374672550;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1412620305;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1412635413;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1418055719;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1467730834;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1487371244;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1495868221;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public EntityManagerFactory getEntityManagerFactory();1496259743;Return the EntityManagerFactory that this instance should manage transactions for.;public EntityManagerFactory getEntityManagerFactory() {_		return this.entityManagerFactory__	};return,the,entity,manager,factory,that,this,instance,should,manage,transactions,for;public,entity,manager,factory,get,entity,manager,factory,return,this,entity,manager,factory
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1328020251;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1356735495;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1357119239;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1364391983;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1364559513;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1368482696;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1372363092;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1374672550;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1412620305;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1412635413;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved through finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,through,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1418055719;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1467730834;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1487371244;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1495868221;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1496259743;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1496837955;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1498780456;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setPersistenceUnitName(String persistenceUnitName);1500416137;Set the name of the persistence unit to manage transactions for._<p>This is an alternative to specifying the EntityManagerFactory by direct reference,_resolving it by its persistence unit name instead. If no EntityManagerFactory and_no persistence unit name have been specified, a default EntityManagerFactory will_be retrieved by finding a single unique bean of type EntityManagerFactory._@see #setEntityManagerFactory;public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};set,the,name,of,the,persistence,unit,to,manage,transactions,for,p,this,is,an,alternative,to,specifying,the,entity,manager,factory,by,direct,reference,resolving,it,by,its,persistence,unit,name,instead,if,no,entity,manager,factory,and,no,persistence,unit,name,have,been,specified,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,see,set,entity,manager,factory;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1500448076;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1530174524;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1530174524;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1530709637;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1530791615;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1531144424;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> public void setEntityManagerFactory(@Nullable EntityManagerFactory emf);1535712004;Set the EntityManagerFactory that this instance should manage transactions for._<p>Alternatively, specify the persistence unit name of the target EntityManagerFactory._By default, a default EntityManagerFactory will be retrieved by finding a_single unique bean of type EntityManagerFactory in the containing BeanFactory._@see #setPersistenceUnitName;public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {_		this.entityManagerFactory = emf__	};set,the,entity,manager,factory,that,this,instance,should,manage,transactions,for,p,alternatively,specify,the,persistence,unit,name,of,the,target,entity,manager,factory,by,default,a,default,entity,manager,factory,will,be,retrieved,by,finding,a,single,unique,bean,of,type,entity,manager,factory,in,the,containing,bean,factory,see,set,persistence,unit,name;public,void,set,entity,manager,factory,nullable,entity,manager,factory,emf,this,entity,manager,factory,emf
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1356735495;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1368482696;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1372363092;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1374672550;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1412620305;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1412635413;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1418055719;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1467730834;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1487371244;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1495868221;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1496259743;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1496837955;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1498780456;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1500416137;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1500448076;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1530174524;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1530174524;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1530709637;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1530791615;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1531144424;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory) throws BeansException;1535712004;Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly._Falls back to a default EntityManagerFactory bean if no persistence unit specified._@see #setPersistenceUnitName;@Override_	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {_		if (getEntityManagerFactory() == null) {_			if (!(beanFactory instanceof ListableBeanFactory)) {_				throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " +_						"in a non-listable BeanFactory: " + beanFactory)__			}_			ListableBeanFactory lbf = (ListableBeanFactory) beanFactory__			setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName()))__		}_	};retrieves,an,entity,manager,factory,by,persistence,unit,name,if,none,set,explicitly,falls,back,to,a,default,entity,manager,factory,bean,if,no,persistence,unit,specified,see,set,persistence,unit,name;override,public,void,set,bean,factory,bean,factory,bean,factory,throws,beans,exception,if,get,entity,manager,factory,null,if,bean,factory,instanceof,listable,bean,factory,throw,new,illegal,state,exception,cannot,retrieve,entity,manager,factory,by,persistence,unit,name,in,a,non,listable,bean,factory,bean,factory,listable,bean,factory,lbf,listable,bean,factory,bean,factory,set,entity,manager,factory,entity,manager,factory,utils,find,entity,manager,factory,lbf,get,persistence,unit,name
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1328020251;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1356735495;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1357119239;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1364391983;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1364559513;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1368482696;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1372363092;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1374672550;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1412620305;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1412635413;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1418055719;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1467730834;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1487371244;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1495868221;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1496259743;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = getEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,get,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1496837955;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1498780456;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1500416137;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1500448076;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1530174524;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1530174524;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1530709637;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1530791615;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1531144424;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> protected EntityManager createEntityManagerForTransaction();1535712004;Create a JPA EntityManager to be used for a transaction._<p>The default implementation checks whether the EntityManagerFactory_is a Spring proxy and unwraps it first._@see javax.persistence.EntityManagerFactory#createEntityManager()_@see EntityManagerFactoryInfo#getNativeEntityManagerFactory();protected EntityManager createEntityManagerForTransaction() {_		EntityManagerFactory emf = obtainEntityManagerFactory()__		if (emf instanceof EntityManagerFactoryInfo) {_			emf = ((EntityManagerFactoryInfo) emf).getNativeEntityManagerFactory()__		}_		Map<String, Object> properties = getJpaPropertyMap()__		return (!CollectionUtils.isEmpty(properties) ?_				emf.createEntityManager(properties) : emf.createEntityManager())__	};create,a,jpa,entity,manager,to,be,used,for,a,transaction,p,the,default,implementation,checks,whether,the,entity,manager,factory,is,a,spring,proxy,and,unwraps,it,first,see,javax,persistence,entity,manager,factory,create,entity,manager,see,entity,manager,factory,info,get,native,entity,manager,factory;protected,entity,manager,create,entity,manager,for,transaction,entity,manager,factory,emf,obtain,entity,manager,factory,if,emf,instanceof,entity,manager,factory,info,emf,entity,manager,factory,info,emf,get,native,entity,manager,factory,map,string,object,properties,get,jpa,property,map,return,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1495868221;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1496259743;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1496837955;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1498780456;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1500416137;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1500448076;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1530174524;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1530174524;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1530709637;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1530791615;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1531144424;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1535712004;Specify JPA properties as a Map, to be passed into_{@code EntityManagerFactory.createEntityManager(Map)} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,entity,manager,factory,create,entity,manager,map,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1495868221;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1496259743;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1496837955;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1498780456;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1500416137;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1500448076;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1530174524;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1530174524;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1530709637;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1530791615;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1531144424;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> @Nullable 	public String getPersistenceUnitName();1535712004;Return the name of the persistence unit to manage transactions for, if any.;@Nullable_	public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;nullable,public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public void afterPropertiesSet();1328020251;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> public void afterPropertiesSet();1357119239;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> public void afterPropertiesSet();1364391983;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> public void afterPropertiesSet();1364559513;Eagerly initialize the JPA dialect, creating a default one_for the specified EntityManagerFactory if none set._Auto-detect the EntityManagerFactory's DataSource, if any.;public void afterPropertiesSet() {_		if (getEntityManagerFactory() == null) {_			throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required")__		}_		if (getEntityManagerFactory() instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) getEntityManagerFactory()__			DataSource dataSource = emfInfo.getDataSource()__			if (dataSource != null) {_				setDataSource(dataSource)__			}_			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				setJpaDialect(jpaDialect)__			}_		}_	};eagerly,initialize,the,jpa,dialect,creating,a,default,one,for,the,specified,entity,manager,factory,if,none,set,auto,detect,the,entity,manager,factory,s,data,source,if,any;public,void,after,properties,set,if,get,entity,manager,factory,null,throw,new,illegal,argument,exception,entity,manager,factory,or,persistence,unit,name,is,required,if,get,entity,manager,factory,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,get,entity,manager,factory,data,source,data,source,emf,info,get,data,source,if,data,source,null,set,data,source,data,source,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,set,jpa,dialect,jpa,dialect
JpaTransactionManager -> public String getPersistenceUnitName();1328020251;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1356735495;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1357119239;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1364391983;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1364559513;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1368482696;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1372363092;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1374672550;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1412620305;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1412635413;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1418055719;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1467730834;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public String getPersistenceUnitName();1487371244;Return the name of the persistence unit to manage transactions for, if any.;public String getPersistenceUnitName() {_		return this.persistenceUnitName__	};return,the,name,of,the,persistence,unit,to,manage,transactions,for,if,any;public,string,get,persistence,unit,name,return,this,persistence,unit,name
JpaTransactionManager -> public JpaDialect getJpaDialect();1328020251;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1356735495;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1357119239;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1364391983;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1364559513;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1368482696;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1372363092;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1374672550;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1412620305;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1412635413;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1418055719;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1467730834;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1487371244;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1495868221;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1496259743;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1496837955;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1498780456;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1500416137;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1500448076;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1530174524;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1530174524;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1530709637;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1530791615;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1531144424;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> public JpaDialect getJpaDialect();1535712004;Return the JPA dialect to use for this transaction manager.;public JpaDialect getJpaDialect() {_		return this.jpaDialect__	};return,the,jpa,dialect,to,use,for,this,transaction,manager;public,jpa,dialect,get,jpa,dialect,return,this,jpa,dialect
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1496837955;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1498780456;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1500416137;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1500448076;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1530174524;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1530174524;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1530709637;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1530791615;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1531144424;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> @Nullable 	public DataSource getDataSource();1535712004;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1328020251;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1356735495;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1357119239;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1364391983;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1364559513;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1368482696;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1372363092;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1374672550;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1412620305;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1412635413;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1418055719;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1467730834;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1487371244;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1495868221;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public DataSource getDataSource();1496259743;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1328020251;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1356735495;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1357119239;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1364391983;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1364559513;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1368482696;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explictly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explictly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1372363092;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1374672550;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1412620305;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1412635413;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1418055719;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1467730834;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1487371244;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1495868221;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1496259743;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1496837955;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1498780456;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
JpaTransactionManager -> public void setDataSource(DataSource dataSource);1500416137;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the JPA EntityManagerFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the EntityManagerFactory uses a known DataSource as its connection factory,_the DataSource will be autodetected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the JPA EntityManager._<p>Note that you need to use a JPA dialect for a specific JPA implementation_to allow for exposing JPA transactions as JDBC transactions._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see EntityManagerFactoryInfo#getDataSource()_@see #setJpaDialect_@see org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,jpa,entity,manager,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,entity,manager,factory,uses,a,known,data,source,as,its,connection,factory,the,data,source,will,be,autodetected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,jpa,entity,manager,p,note,that,you,need,to,use,a,jpa,dialect,for,a,specific,jpa,implementation,to,allow,for,exposing,jpa,transactions,as,jdbc,transactions,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,entity,manager,factory,info,get,data,source,see,set,jpa,dialect,see,org,springframework,jdbc,datasource,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
