# id;timestamp;commentText;codeText;commentWords;codeWords
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1496837955;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1498780456;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1500448076;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1530174524;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1530174524;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1530174524;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1530649339;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1530709637;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1532091916;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1535712004;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public SessionFactory getSessionFactory();1543858050;Return the SessionFactory that this instance should manage transactions for.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;nullable,public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1496837955;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1498780456;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1500448076;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1530174524;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1530174524;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1530174524;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1530649339;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1530709637;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1532091916;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1535712004;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> @Nullable 	public DataSource getDataSource();1543858050;Return the JDBC DataSource that this instance manages transactions for.;@Nullable_	public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;nullable,public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1500448076;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1530174524;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1530174524;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1530174524;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1530649339;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1530709637;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1532091916;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1535712004;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(@Nullable Interceptor entityInterceptor);1543858050;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(@Nullable Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,nullable,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1467668243;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1468441852;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1495868221;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1496259743;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1496837955;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1498780456;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1500448076;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1530174524;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1530174524;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1530174524;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1530649339;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1530709637;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1532091916;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1535712004;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> public void setAutodetectDataSource(boolean autodetectDataSource);1543858050;Set whether to autodetect a JDBC DataSource used by the Hibernate SessionFactory,_if set via LocalSessionFactoryBean's {@code setDataSource}. Default is "true"._<p>Can be turned off to deliberately ignore an available DataSource, in order_to not expose Hibernate transactions as JDBC transactions for that DataSource._@see #setDataSource;public void setAutodetectDataSource(boolean autodetectDataSource) {_		this.autodetectDataSource = autodetectDataSource__	};set,whether,to,autodetect,a,jdbc,data,source,used,by,the,hibernate,session,factory,if,set,via,local,session,factory,bean,s,code,set,data,source,default,is,true,p,can,be,turned,off,to,deliberately,ignore,an,available,data,source,in,order,to,not,expose,hibernate,transactions,as,jdbc,transactions,for,that,data,source,see,set,data,source;public,void,set,autodetect,data,source,boolean,autodetect,data,source,this,autodetect,data,source,autodetect,data,source
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1467668243;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1468441852;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1495868221;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496259743;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496837955;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1500448076;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530649339;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530709637;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1532091916;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1535712004;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1543858050;The bean factory just needs to be known for resolving entity interceptor_bean names. It does not need to be set for any other mode of operation._@see #setEntityInterceptorBeanName;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};the,bean,factory,just,needs,to,be,known,for,resolving,entity,interceptor,bean,names,it,does,not,need,to,be,set,for,any,other,mode,of,operation,see,set,entity,interceptor,bean,name;override,public,void,set,bean,factory,bean,factory,bean,factory,this,bean,factory,bean,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1500448076;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1530174524;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1530174524;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1530174524;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1530649339;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1530709637;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1532091916;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1535712004;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1543858050;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public DataSource getDataSource();1467668243;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> public DataSource getDataSource();1468441852;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> public DataSource getDataSource();1495868221;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> public DataSource getDataSource();1496259743;Return the JDBC DataSource that this instance manages transactions for.;public DataSource getDataSource() {_		return this.dataSource__	};return,the,jdbc,data,source,that,this,instance,manages,transactions,for;public,data,source,get,data,source,return,this,data,source
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1467668243;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1468441852;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1495868221;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1496259743;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1496837955;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1498780456;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1500448076;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1530174524;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1530174524;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1530174524;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1530649339;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1530709637;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1532091916;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1535712004;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> protected void disconnectOnCompletion(Session session);1543858050;Disconnect a pre-existing Hibernate Session on transaction completion,_returning its database connection but preserving its entity state._<p>The default implementation simply calls {@link Session#disconnect()}._Subclasses may override this with a no-op or with fine-tuned disconnection logic._@param session the Hibernate Session to disconnect_@see Session#disconnect();protected void disconnectOnCompletion(Session session) {_		session.disconnect()__	};disconnect,a,pre,existing,hibernate,session,on,transaction,completion,returning,its,database,connection,but,preserving,its,entity,state,p,the,default,implementation,simply,calls,link,session,disconnect,subclasses,may,override,this,with,a,no,op,or,with,fine,tuned,disconnection,logic,param,session,the,hibernate,session,to,disconnect,see,session,disconnect;protected,void,disconnect,on,completion,session,session,session,disconnect
HibernateTransactionManager -> public HibernateTransactionManager();1467668243;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1468441852;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1495868221;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1496259743;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1496837955;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1498780456;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1500448076;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1530174524;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1530174524;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1530174524;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1530649339;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1530709637;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1532091916;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1535712004;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> public HibernateTransactionManager();1543858050;Create a new HibernateTransactionManager instance._A SessionFactory has to be set to be able to use it._@see #setSessionFactory;public HibernateTransactionManager() {_	};create,a,new,hibernate,transaction,manager,instance,a,session,factory,has,to,be,set,to,be,able,to,use,it,see,set,session,factory;public,hibernate,transaction,manager
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1467668243;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1468441852;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1495868221;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1496259743;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1496837955;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1498780456;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1500448076;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1530174524;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1530174524;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1530174524;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1530649339;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1530709637;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1532091916;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1535712004;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> protected boolean isPhysicallyConnected(Session session);1543858050;Determine whether the given Session is (still) physically connected_to the database, that is, holds an active JDBC Connection internally._@param session the Hibernate Session to check_@see #isSameConnectionForEntireSession(Session);protected boolean isPhysicallyConnected(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return session.isConnected()__		}_		return ((SessionImplementor) session).getJdbcCoordinator().getLogicalConnection().isPhysicallyConnected()__	};determine,whether,the,given,session,is,still,physically,connected,to,the,database,that,is,holds,an,active,jdbc,connection,internally,param,session,the,hibernate,session,to,check,see,is,same,connection,for,entire,session,session;protected,boolean,is,physically,connected,session,session,if,session,instanceof,session,implementor,return,session,is,connected,return,session,implementor,session,get,jdbc,coordinator,get,logical,connection,is,physically,connected
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1467668243;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1468441852;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1495868221;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1496259743;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1496837955;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1498780456;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1500448076;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1530174524;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1530174524;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1530174524;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1530649339;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1530709637;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1532091916;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1535712004;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion);1543858050;Set whether to allow result access after completion, typically via Hibernate's_ScrollableResults mechanism._<p>Default is "false". Turning this flag on enforces over-commit holdability on the_underlying JDBC Connection (if {@link #prepareConnection "prepareConnection"} is on)_and skips the disconnect-on-completion step._@see Connection#setHoldability_@see ResultSet#HOLD_CURSORS_OVER_COMMIT_@see #disconnectOnCompletion(Session);public void setAllowResultAccessAfterCompletion(boolean allowResultAccessAfterCompletion) {_		this.allowResultAccessAfterCompletion = allowResultAccessAfterCompletion__	};set,whether,to,allow,result,access,after,completion,typically,via,hibernate,s,scrollable,results,mechanism,p,default,is,false,turning,this,flag,on,enforces,over,commit,holdability,on,the,underlying,jdbc,connection,if,link,prepare,connection,prepare,connection,is,on,and,skips,the,disconnect,on,completion,step,see,connection,set,holdability,see,result,set,see,disconnect,on,completion,session;public,void,set,allow,result,access,after,completion,boolean,allow,result,access,after,completion,this,allow,result,access,after,completion,allow,result,access,after,completion
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1467668243;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1468441852;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1495868221;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1496259743;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1496837955;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1498780456;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1500448076;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1530174524;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1530174524;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1530174524;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1530649339;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1530709637;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1532091916;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1535712004;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> @SuppressWarnings("deprecation") 	protected boolean isSameConnectionForEntireSession(Session session);1543858050;Return whether the given Hibernate Session will always hold the same_JDBC Connection. This is used to check whether the transaction manager_can safely prepare and clean up the JDBC Connection used for a transaction._<p>The default implementation checks the Session's connection release mode_to be "on_close"._@param session the Hibernate Session to check_@see ConnectionReleaseMode#ON_CLOSE;@SuppressWarnings("deprecation")_	protected boolean isSameConnectionForEntireSession(Session session) {_		if (!(session instanceof SessionImplementor)) {_			_			return true__		}_		ConnectionReleaseMode releaseMode =_				((SessionImplementor) session).getJdbcCoordinator().getConnectionReleaseMode()__		return ConnectionReleaseMode.ON_CLOSE.equals(releaseMode)__	};return,whether,the,given,hibernate,session,will,always,hold,the,same,jdbc,connection,this,is,used,to,check,whether,the,transaction,manager,can,safely,prepare,and,clean,up,the,jdbc,connection,used,for,a,transaction,p,the,default,implementation,checks,the,session,s,connection,release,mode,to,be,param,session,the,hibernate,session,to,check,see,connection,release,mode;suppress,warnings,deprecation,protected,boolean,is,same,connection,for,entire,session,session,session,if,session,instanceof,session,implementor,return,true,connection,release,mode,release,mode,session,implementor,session,get,jdbc,coordinator,get,connection,release,mode,return,connection,release,mode,equals,release,mode
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1496837955;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1498780456;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1500448076;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1530174524;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1530174524;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1530174524;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1530649339;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1530709637;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1532091916;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1535712004;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> protected final SessionFactory obtainSessionFactory();1543858050;Obtain the SessionFactory for actual use._@return the SessionFactory (never {@code null})_@throws IllegalStateException in case of no SessionFactory set_@since 5.0;protected final SessionFactory obtainSessionFactory() {_		SessionFactory sessionFactory = getSessionFactory()__		Assert.state(sessionFactory != null, "No SessionFactory set")__		return sessionFactory__	};obtain,the,session,factory,for,actual,use,return,the,session,factory,never,code,null,throws,illegal,state,exception,in,case,of,no,session,factory,set,since,5,0;protected,final,session,factory,obtain,session,factory,session,factory,session,factory,get,session,factory,assert,state,session,factory,null,no,session,factory,set,return,session,factory
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1495868221;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1496259743;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1496837955;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1498780456;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1500448076;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1530174524;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1530174524;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1530174524;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1530649339;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1530709637;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1532091916;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1535712004;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> @Nullable 	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1543858050;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;@Nullable_	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) this.entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;nullable,public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,this,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1467668243;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1468441852;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1495868221;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1496259743;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1496837955;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public void setEntityInterceptor(Interceptor entityInterceptor);1498780456;Set a Hibernate entity interceptor that allows to inspect and change_property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Such an interceptor can either be set at the SessionFactory level,_i.e. on LocalSessionFactoryBean, or at the Session level, i.e. on_HibernateTransactionManager._@see LocalSessionFactoryBean#setEntityInterceptor;public void setEntityInterceptor(Interceptor entityInterceptor) {_		this.entityInterceptor = entityInterceptor__	};set,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,such,an,interceptor,can,either,be,set,at,the,session,factory,level,i,e,on,local,session,factory,bean,or,at,the,session,level,i,e,on,hibernate,transaction,manager,see,local,session,factory,bean,set,entity,interceptor;public,void,set,entity,interceptor,interceptor,entity,interceptor,this,entity,interceptor,entity,interceptor
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1467668243;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1468441852;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1495868221;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1496259743;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1496837955;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1498780456;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1500448076;Create a new HibernateTransactionManager instance._@param sessionFactory SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1530174524;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1530174524;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1530174524;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1530649339;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1530709637;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1532091916;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1535712004;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public HibernateTransactionManager(SessionFactory sessionFactory);1543858050;Create a new HibernateTransactionManager instance._@param sessionFactory the SessionFactory to manage transactions for;public HibernateTransactionManager(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__		afterPropertiesSet()__	};create,a,new,hibernate,transaction,manager,instance,param,session,factory,the,session,factory,to,manage,transactions,for;public,hibernate,transaction,manager,session,factory,session,factory,this,session,factory,session,factory,after,properties,set
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1467668243;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1468441852;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1495868221;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1496259743;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1496837955;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(DataSource dataSource);1498780456;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1467668243;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1468441852;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1495868221;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1496259743;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1496837955;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1498780456;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1500448076;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1530174524;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1530174524;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1530174524;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1530649339;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1530709637;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1532091916;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1535712004;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setEntityInterceptorBeanName(String entityInterceptorBeanName);1543858050;Set the bean name of a Hibernate entity interceptor that allows to inspect_and change property values before writing to and reading from the database._Will get applied to any new Session created by this transaction manager._<p>Requires the bean factory to be known, to be able to resolve the bean_name to an interceptor instance on session creation. Typically used for_prototype interceptors, i.e. a new interceptor instance per session._<p>Can also be used for shared interceptor instances, but it is recommended_to set the interceptor reference directly in such a scenario._@param entityInterceptorBeanName the name of the entity interceptor in_the bean factory_@see #setBeanFactory_@see #setEntityInterceptor;public void setEntityInterceptorBeanName(String entityInterceptorBeanName) {_		this.entityInterceptor = entityInterceptorBeanName__	};set,the,bean,name,of,a,hibernate,entity,interceptor,that,allows,to,inspect,and,change,property,values,before,writing,to,and,reading,from,the,database,will,get,applied,to,any,new,session,created,by,this,transaction,manager,p,requires,the,bean,factory,to,be,known,to,be,able,to,resolve,the,bean,name,to,an,interceptor,instance,on,session,creation,typically,used,for,prototype,interceptors,i,e,a,new,interceptor,instance,per,session,p,can,also,be,used,for,shared,interceptor,instances,but,it,is,recommended,to,set,the,interceptor,reference,directly,in,such,a,scenario,param,entity,interceptor,bean,name,the,name,of,the,entity,interceptor,in,the,bean,factory,see,set,bean,factory,see,set,entity,interceptor;public,void,set,entity,interceptor,bean,name,string,entity,interceptor,bean,name,this,entity,interceptor,entity,interceptor,bean,name
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1467668243;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1468441852;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1495868221;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1496259743;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1496837955;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1498780456;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1500448076;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1530174524;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1530174524;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1530174524;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1530649339;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1530709637;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1532091916;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1535712004;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public void setHibernateManagedSession(boolean hibernateManagedSession);1543858050;Set whether to operate on a Hibernate-managed Session instead of a_Spring-managed Session, that is, whether to obtain the Session through_Hibernate's {@link SessionFactory#getCurrentSession()}_instead of {@link SessionFactory#openSession()} (with a Spring_{@link TransactionSynchronizationManager}_check preceding it)._<p>Default is "false", i.e. using a Spring-managed Session: taking the current_thread-bound Session if available (e.g. in an Open-Session-in-View scenario),_creating a new Session for the current transaction otherwise._<p>Switch this flag to "true" in order to enforce use of a Hibernate-managed Session._Note that this requires {@link SessionFactory#getCurrentSession()}_to always return a proper Session when called for a Spring-managed transaction__transaction begin will fail if the {@code getCurrentSession()} call fails._<p>This mode will typically be used in combination with a custom Hibernate_{@link org.hibernate.context.spi.CurrentSessionContext} implementation that stores_Sessions in a place other than Spring's TransactionSynchronizationManager._It may also be used in combination with Spring's Open-Session-in-View support_(using Spring's default {@link SpringSessionContext}), in which case it subtly_differs from the Spring-managed Session mode: The pre-bound Session will <i>not</i>_receive a {@code clear()} call (on rollback) or a {@code disconnect()}_call (on transaction completion) in such a scenario_ this is rather left up_to a custom CurrentSessionContext implementation (if desired).;public void setHibernateManagedSession(boolean hibernateManagedSession) {_		this.hibernateManagedSession = hibernateManagedSession__	};set,whether,to,operate,on,a,hibernate,managed,session,instead,of,a,spring,managed,session,that,is,whether,to,obtain,the,session,through,hibernate,s,link,session,factory,get,current,session,instead,of,link,session,factory,open,session,with,a,spring,link,transaction,synchronization,manager,check,preceding,it,p,default,is,false,i,e,using,a,spring,managed,session,taking,the,current,thread,bound,session,if,available,e,g,in,an,open,session,in,view,scenario,creating,a,new,session,for,the,current,transaction,otherwise,p,switch,this,flag,to,true,in,order,to,enforce,use,of,a,hibernate,managed,session,note,that,this,requires,link,session,factory,get,current,session,to,always,return,a,proper,session,when,called,for,a,spring,managed,transaction,transaction,begin,will,fail,if,the,code,get,current,session,call,fails,p,this,mode,will,typically,be,used,in,combination,with,a,custom,hibernate,link,org,hibernate,context,spi,current,session,context,implementation,that,stores,sessions,in,a,place,other,than,spring,s,transaction,synchronization,manager,it,may,also,be,used,in,combination,with,spring,s,open,session,in,view,support,using,spring,s,default,link,spring,session,context,in,which,case,it,subtly,differs,from,the,spring,managed,session,mode,the,pre,bound,session,will,i,not,i,receive,a,code,clear,call,on,rollback,or,a,code,disconnect,call,on,transaction,completion,in,such,a,scenario,this,is,rather,left,up,to,a,custom,current,session,context,implementation,if,desired;public,void,set,hibernate,managed,session,boolean,hibernate,managed,session,this,hibernate,managed,session,hibernate,managed,session
HibernateTransactionManager -> public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1467668243;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException;1468441852;Return the current Hibernate entity interceptor, or {@code null} if none._Resolves an entity interceptor bean name via the bean factory,_if necessary._@throws IllegalStateException if bean name specified but no bean factory set_@throws BeansException if bean name resolution via the bean factory failed_@see #setEntityInterceptor_@see #setEntityInterceptorBeanName_@see #setBeanFactory;public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {_		if (this.entityInterceptor instanceof Interceptor) {_			return (Interceptor) entityInterceptor__		}_		else if (this.entityInterceptor instanceof String) {_			if (this.beanFactory == null) {_				throw new IllegalStateException("Cannot get entity interceptor via bean name if no bean factory set")__			}_			String beanName = (String) this.entityInterceptor__			return this.beanFactory.getBean(beanName, Interceptor.class)__		}_		else {_			return null__		}_	};return,the,current,hibernate,entity,interceptor,or,code,null,if,none,resolves,an,entity,interceptor,bean,name,via,the,bean,factory,if,necessary,throws,illegal,state,exception,if,bean,name,specified,but,no,bean,factory,set,throws,beans,exception,if,bean,name,resolution,via,the,bean,factory,failed,see,set,entity,interceptor,see,set,entity,interceptor,bean,name,see,set,bean,factory;public,interceptor,get,entity,interceptor,throws,illegal,state,exception,beans,exception,if,this,entity,interceptor,instanceof,interceptor,return,interceptor,entity,interceptor,else,if,this,entity,interceptor,instanceof,string,if,this,bean,factory,null,throw,new,illegal,state,exception,cannot,get,entity,interceptor,via,bean,name,if,no,bean,factory,set,string,bean,name,string,this,entity,interceptor,return,this,bean,factory,get,bean,bean,name,interceptor,class,else,return,null
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1467668243;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1468441852;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1495868221;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1496259743;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1496837955;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1498780456;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1500448076;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530174524;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530174524;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530174524;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530649339;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1530709637;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1532091916;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1535712004;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> protected DataAccessException convertHibernateAccessException(HibernateException ex);1543858050;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._<p>Will automatically apply a specified SQLExceptionTranslator to a_Hibernate JDBCException, else rely on Hibernate's default translation._@param ex the HibernateException that occurred_@return a corresponding DataAccessException_@see SessionFactoryUtils#convertHibernateAccessException;protected DataAccessException convertHibernateAccessException(HibernateException ex) {_		return SessionFactoryUtils.convertHibernateAccessException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,p,will,automatically,apply,a,specified,sqlexception,translator,to,a,hibernate,jdbcexception,else,rely,on,hibernate,s,default,translation,param,ex,the,hibernate,exception,that,occurred,return,a,corresponding,data,access,exception,see,session,factory,utils,convert,hibernate,access,exception;protected,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,return,session,factory,utils,convert,hibernate,access,exception,ex
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1467668243;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1468441852;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1495868221;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1496259743;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1496837955;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setSessionFactory(SessionFactory sessionFactory);1498780456;Set the SessionFactory that this instance should manage transactions for.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,session,factory,that,this,instance,should,manage,transactions,for;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1467668243;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1468441852;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1495868221;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1496259743;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1496837955;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1498780456;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1500448076;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1530174524;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1530174524;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1530174524;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1530649339;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1530709637;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1532091916;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1535712004;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public void setPrepareConnection(boolean prepareConnection);1543858050;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>Default is "true". If you turn this flag off, the transaction manager_will not support per-transaction isolation levels anymore. It will not_call {@code Connection.setReadOnly(true)} for read-only transactions_anymore either. If this flag is turned off, no cleanup of a JDBC Connection_is required after a transaction, since no Connection settings will get modified._@see Connection#setTransactionIsolation_@see Connection#setReadOnly;public void setPrepareConnection(boolean prepareConnection) {_		this.prepareConnection = prepareConnection__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,default,is,true,if,you,turn,this,flag,off,the,transaction,manager,will,not,support,per,transaction,isolation,levels,anymore,it,will,not,call,code,connection,set,read,only,true,for,read,only,transactions,anymore,either,if,this,flag,is,turned,off,no,cleanup,of,a,jdbc,connection,is,required,after,a,transaction,since,no,connection,settings,will,get,modified,see,connection,set,transaction,isolation,see,connection,set,read,only;public,void,set,prepare,connection,boolean,prepare,connection,this,prepare,connection,prepare,connection
HibernateTransactionManager -> public SessionFactory getSessionFactory();1467668243;Return the SessionFactory that this instance should manage transactions for.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> public SessionFactory getSessionFactory();1468441852;Return the SessionFactory that this instance should manage transactions for.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> public SessionFactory getSessionFactory();1495868221;Return the SessionFactory that this instance should manage transactions for.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> public SessionFactory getSessionFactory();1496259743;Return the SessionFactory that this instance should manage transactions for.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,session,factory,that,this,instance,should,manage,transactions,for;public,session,factory,get,session,factory,return,this,session,factory
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1500448076;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530174524;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530649339;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource != null && dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,null,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1530709637;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1532091916;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see DataSourceUtils_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,data,source,utils,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1535712004;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._<p><b>NOTE: For scenarios with many transactions that just read data from_Hibernate's cache (and do not actually access the database), consider using_a {@link org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy}_for the actual target DataSource. Alternatively, consider switching_{@link #setPrepareConnection "prepareConnection"} to {@code false}.</b>_In both cases, this transaction manager will not eagerly acquire a_JDBC Connection for each Hibernate Session anymore (as of Spring 5.1)._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,p,b,note,for,scenarios,with,many,transactions,that,just,read,data,from,hibernate,s,cache,and,do,not,actually,access,the,database,consider,using,a,link,org,springframework,jdbc,datasource,lazy,connection,data,source,proxy,for,the,actual,target,data,source,alternatively,consider,switching,link,set,prepare,connection,prepare,connection,to,code,false,b,in,both,cases,this,transaction,manager,will,not,eagerly,acquire,a,jdbc,connection,for,each,hibernate,session,anymore,as,of,spring,5,1,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,lazy,connection,data,source,proxy,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
HibernateTransactionManager -> public void setDataSource(@Nullable DataSource dataSource);1543858050;Set the JDBC DataSource that this instance should manage transactions for._The DataSource should match the one used by the Hibernate SessionFactory:_for example, you could specify the same JNDI DataSource for both._<p>If the SessionFactory was configured with LocalDataSourceConnectionProvider,_i.e. by Spring's LocalSessionFactoryBean with a specified "dataSource",_the DataSource will be auto-detected: You can still explicitly specify the_DataSource, but you don't need to in this case._<p>A transactional JDBC Connection for this DataSource will be provided to_application code accessing this DataSource directly via DataSourceUtils_or JdbcTemplate. The Connection will be taken from the Hibernate Session._<p>The DataSource specified here should be the target DataSource to manage_transactions for, not a TransactionAwareDataSourceProxy. Only data access_code may work with TransactionAwareDataSourceProxy, while the transaction_manager needs to work on the underlying target DataSource. If there's_nevertheless a TransactionAwareDataSourceProxy passed in, it will be_unwrapped to extract its target DataSource._<p><b>NOTE: For scenarios with many transactions that just read data from_Hibernate's cache (and do not actually access the database), consider using_a {@link org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy}_for the actual target DataSource. Alternatively, consider switching_{@link #setPrepareConnection "prepareConnection"} to {@code false}.</b>_In both cases, this transaction manager will not eagerly acquire a_JDBC Connection for each Hibernate Session anymore (as of Spring 5.1)._@see #setAutodetectDataSource_@see TransactionAwareDataSourceProxy_@see org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy_@see org.springframework.jdbc.core.JdbcTemplate;public void setDataSource(@Nullable DataSource dataSource) {_		if (dataSource instanceof TransactionAwareDataSourceProxy) {_			_			_			_			this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource()__		}_		else {_			this.dataSource = dataSource__		}_	};set,the,jdbc,data,source,that,this,instance,should,manage,transactions,for,the,data,source,should,match,the,one,used,by,the,hibernate,session,factory,for,example,you,could,specify,the,same,jndi,data,source,for,both,p,if,the,session,factory,was,configured,with,local,data,source,connection,provider,i,e,by,spring,s,local,session,factory,bean,with,a,specified,data,source,the,data,source,will,be,auto,detected,you,can,still,explicitly,specify,the,data,source,but,you,don,t,need,to,in,this,case,p,a,transactional,jdbc,connection,for,this,data,source,will,be,provided,to,application,code,accessing,this,data,source,directly,via,data,source,utils,or,jdbc,template,the,connection,will,be,taken,from,the,hibernate,session,p,the,data,source,specified,here,should,be,the,target,data,source,to,manage,transactions,for,not,a,transaction,aware,data,source,proxy,only,data,access,code,may,work,with,transaction,aware,data,source,proxy,while,the,transaction,manager,needs,to,work,on,the,underlying,target,data,source,if,there,s,nevertheless,a,transaction,aware,data,source,proxy,passed,in,it,will,be,unwrapped,to,extract,its,target,data,source,p,b,note,for,scenarios,with,many,transactions,that,just,read,data,from,hibernate,s,cache,and,do,not,actually,access,the,database,consider,using,a,link,org,springframework,jdbc,datasource,lazy,connection,data,source,proxy,for,the,actual,target,data,source,alternatively,consider,switching,link,set,prepare,connection,prepare,connection,to,code,false,b,in,both,cases,this,transaction,manager,will,not,eagerly,acquire,a,jdbc,connection,for,each,hibernate,session,anymore,as,of,spring,5,1,see,set,autodetect,data,source,see,transaction,aware,data,source,proxy,see,org,springframework,jdbc,datasource,lazy,connection,data,source,proxy,see,org,springframework,jdbc,core,jdbc,template;public,void,set,data,source,nullable,data,source,data,source,if,data,source,instanceof,transaction,aware,data,source,proxy,this,data,source,transaction,aware,data,source,proxy,data,source,get,target,data,source,else,this,data,source,data,source
