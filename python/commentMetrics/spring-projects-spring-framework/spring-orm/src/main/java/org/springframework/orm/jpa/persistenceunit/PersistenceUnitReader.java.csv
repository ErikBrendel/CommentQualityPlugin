# id;timestamp;commentText;codeText;commentWords;codeWords
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1328020251;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1329142650;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1349904864;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1356735495;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1363714444;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1374521837;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1375309221;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1464299869;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1467730834;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1495868221;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1496837955;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1519295386;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> protected Document buildDocument(ErrorHandler handler, InputStream stream) 			throws ParserConfigurationException, SAXException, IOException;1530174524;Validate the given stream and return a valid DOM document for parsing.;protected Document buildDocument(ErrorHandler handler, InputStream stream)_			throws ParserConfigurationException, SAXException, IOException {__		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()__		dbf.setNamespaceAware(true)__		DocumentBuilder parser = dbf.newDocumentBuilder()__		parser.setErrorHandler(handler)__		return parser.parse(stream)__	};validate,the,given,stream,and,return,a,valid,dom,document,for,parsing;protected,document,build,document,error,handler,handler,input,stream,stream,throws,parser,configuration,exception,saxexception,ioexception,document,builder,factory,dbf,document,builder,factory,new,instance,dbf,set,namespace,aware,true,document,builder,parser,dbf,new,document,builder,parser,set,error,handler,handler,return,parser,parse,stream
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseProperty(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1328020251;Parse the <code>property</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseProperty(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,property,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseProperty(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1329142650;Parse the <code>property</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseProperty(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,property,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1328020251;Parse the <code>jar-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				for (Resource resource : resources) {_					unitInfo.addJarFileUrl(resource.getURL())__				}_			}_		}_	};parse,the,code,jar,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,for,resource,resource,resources,unit,info,add,jar,file,url,resource,get,url
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1329142650;Parse the <code>jar-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				for (Resource resource : resources) {_					unitInfo.addJarFileUrl(resource.getURL())__				}_			}_		}_	};parse,the,code,jar,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,for,resource,resource,resources,unit,info,add,jar,file,url,resource,get,url
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1349904864;Parse the <code>jar-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1328020251;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL unitRootURL = determinePersistenceUnitRootUrl(resource)__		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			SpringPersistenceUnitInfo info = parsePersistenceUnitInfo(unit, version)__			info.setPersistenceUnitRootUrl(unitRootURL)__			infos.add(info)__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,unit,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,spring,persistence,unit,info,info,parse,persistence,unit,info,unit,version,info,set,persistence,unit,root,url,unit,root,url,infos,add,info,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1329142650;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL unitRootURL = determinePersistenceUnitRootUrl(resource)__		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			SpringPersistenceUnitInfo info = parsePersistenceUnitInfo(unit, version)__			info.setPersistenceUnitRootUrl(unitRootURL)__			infos.add(info)__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,unit,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,spring,persistence,unit,info,info,parse,persistence,unit,info,unit,version,info,set,persistence,unit,root,url,unit,root,url,infos,add,info,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1349904864;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1356735495;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1363714444;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1374521837;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1375309221;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1464299869;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1467730834;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1495868221;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1496837955;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1519295386;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected List<SpringPersistenceUnitInfo> parseDocument( 			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException;1530174524;Parse the validated document and add entries to the given unit info list.;protected List<SpringPersistenceUnitInfo> parseDocument(_			Resource resource, Document document, List<SpringPersistenceUnitInfo> infos) throws IOException {__		Element persistence = document.getDocumentElement()__		String version = persistence.getAttribute(PERSISTENCE_VERSION)__		URL rootUrl = determinePersistenceUnitRootUrl(resource)___		List<Element> units = DomUtils.getChildElementsByTagName(persistence, PERSISTENCE_UNIT)__		for (Element unit : units) {_			infos.add(parsePersistenceUnitInfo(unit, version, rootUrl))__		}__		return infos__	};parse,the,validated,document,and,add,entries,to,the,given,unit,info,list;protected,list,spring,persistence,unit,info,parse,document,resource,resource,document,document,list,spring,persistence,unit,info,infos,throws,ioexception,element,persistence,document,get,document,element,string,version,persistence,get,attribute,url,root,url,determine,persistence,unit,root,url,resource,list,element,units,dom,utils,get,child,elements,by,tag,name,persistence,for,element,unit,units,infos,add,parse,persistence,unit,info,unit,version,root,url,return,infos
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1356735495;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1363714444;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1374521837;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1375309221;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1464299869;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1467730834;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1495868221;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1496837955;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1519295386;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1530174524;Parse the {@code mapping-file} XML elements.;protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,xml,elements;protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1464299869;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1467730834;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1328020251;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_<code>persistence.xml</code> files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,code,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1329142650;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_<code>persistence.xml</code> files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,code,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1349904864;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_<code>persistence.xml</code> files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,code,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1356735495;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1363714444;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1374521837;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1375309221;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1464299869;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1467730834;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1495868221;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1496837955;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1519295386;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup);1530174524;Create a new PersistenceUnitReader._@param resourcePatternResolver the ResourcePatternResolver to use for loading resources_@param dataSourceLookup the DataSourceLookup to resolve DataSource names in_{@code persistence.xml} files against;public PersistenceUnitReader(ResourcePatternResolver resourcePatternResolver, DataSourceLookup dataSourceLookup) {_		Assert.notNull(resourcePatternResolver, "ResourceLoader must not be null")__		Assert.notNull(dataSourceLookup, "DataSourceLookup must not be null")__		this.resourcePatternResolver = resourcePatternResolver__		this.dataSourceLookup = dataSourceLookup__	};create,a,new,persistence,unit,reader,param,resource,pattern,resolver,the,resource,pattern,resolver,to,use,for,loading,resources,param,data,source,lookup,the,data,source,lookup,to,resolve,data,source,names,in,code,persistence,xml,files,against;public,persistence,unit,reader,resource,pattern,resolver,resource,pattern,resolver,data,source,lookup,data,source,lookup,assert,not,null,resource,pattern,resolver,resource,loader,must,not,be,null,assert,not,null,data,source,lookup,data,source,lookup,must,not,be,null,this,resource,pattern,resolver,resource,pattern,resolver,this,data,source,lookup,data,source,lookup
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1328020251;Determine the persistence unit root URL based on the given resource_(which points to the <code>persistence.xml</code> file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()__		String urlToString = originalURL.toExternalForm()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		else {_			_			if (!urlToString.contains(META_INF)) {_				if (logger.isInfoEnabled()) {_					logger.info(resource.getFilename() +_							" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_							resource)__				}_				return null__			}_			if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_				if (logger.isInfoEnabled()) {_					logger.info(resource.getFilename() +_							" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_							resource)__				}_				return null__			}__			String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__			return new URL(persistenceUnitRoot)__		}_	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,code,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,string,url,to,string,original,url,to,external,form,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,else,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1329142650;Determine the persistence unit root URL based on the given resource_(which points to the <code>persistence.xml</code> file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()__		String urlToString = originalURL.toExternalForm()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		else {_			_			if (!urlToString.contains(META_INF)) {_				if (logger.isInfoEnabled()) {_					logger.info(resource.getFilename() +_							" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_							resource)__				}_				return null__			}_			if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_				if (logger.isInfoEnabled()) {_					logger.info(resource.getFilename() +_							" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_							resource)__				}_				return null__			}__			String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__			return new URL(persistenceUnitRoot)__		}_	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,code,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,string,url,to,string,original,url,to,external,form,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,else,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1349904864;Determine the persistence unit root URL based on the given resource_(which points to the <code>persistence.xml</code> file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,code,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1356735495;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1363714444;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1374521837;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1375309221;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;protected URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;protected,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1356735495;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1363714444;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1374521837;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1375309221;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1464299869;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1467730834;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1495868221;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1496837955;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1519295386;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1530174524;Parse the {@code property} XML elements.;protected void parseProperties(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		Element propRoot = DomUtils.getChildElementByTagName(persistenceUnit, PROPERTIES)__		if (propRoot == null) {_			return__		}_		List<Element> properties = DomUtils.getChildElementsByTagName(propRoot, "property")__		for (Element property : properties) {_			String name = property.getAttribute("name")__			String value = property.getAttribute("value")__			unitInfo.addProperty(name, value)__		}_	};parse,the,code,property,xml,elements;protected,void,parse,properties,element,persistence,unit,spring,persistence,unit,info,unit,info,element,prop,root,dom,utils,get,child,element,by,tag,name,persistence,unit,properties,if,prop,root,null,return,list,element,properties,dom,utils,get,child,elements,by,tag,name,prop,root,property,for,element,property,properties,string,name,property,get,attribute,name,string,value,property,get,attribute,value,unit,info,add,property,name,value
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1356735495;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1363714444;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1374521837;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1375309221;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1464299869;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1467730834;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1495868221;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1496837955;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1519295386;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException;1530174524;Parse the {@code jar-file} XML elements.;protected void parseJarFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) throws IOException {_		List<Element> jars = DomUtils.getChildElementsByTagName(persistenceUnit, JAR_FILE_URL)__		for (Element element : jars) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				Resource[] resources = this.resourcePatternResolver.getResources(value)__				boolean found = false__				for (Resource resource : resources) {_					if (resource.exists()) {_						found = true__						unitInfo.addJarFileUrl(resource.getURL())__					}_				}_				if (!found) {_					_					URL rootUrl = unitInfo.getPersistenceUnitRootUrl()__					if (rootUrl != null) {_						unitInfo.addJarFileUrl(new URL(rootUrl, value))__					}_					else {_						logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" +_								unitInfo.getPersistenceUnitName() + "' without root URL")__					}_				}_			}_		}_	};parse,the,code,jar,file,xml,elements;protected,void,parse,jar,files,element,persistence,unit,spring,persistence,unit,info,unit,info,throws,ioexception,list,element,jars,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,jars,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,resource,resources,this,resource,pattern,resolver,get,resources,value,boolean,found,false,for,resource,resource,resources,if,resource,exists,found,true,unit,info,add,jar,file,url,resource,get,url,if,found,url,root,url,unit,info,get,persistence,unit,root,url,if,root,url,null,unit,info,add,jar,file,url,new,url,root,url,value,else,logger,warn,cannot,resolve,jar,file,entry,value,in,persistence,unit,unit,info,get,persistence,unit,name,without,root,url
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1328020251;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1329142650;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1349904864;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1356735495;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1363714444;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1374521837;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1375309221;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1464299869;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<SpringPersistenceUnitInfo>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,spring,persistence,unit,info,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1467730834;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1495868221;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1496837955;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[infos.size()])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,infos,size
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1519295386;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[0])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,0
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations);1530174524;Parse and build all persistence unit infos defined in the given XML files._@param persistenceXmlLocations the resource locations (can be patterns)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String[] persistenceXmlLocations) {_		ErrorHandler handler = new SimpleSaxErrorHandler(logger)__		List<SpringPersistenceUnitInfo> infos = new LinkedList<>()__		String resourceLocation = null__		try {_			for (String location : persistenceXmlLocations) {_				Resource[] resources = this.resourcePatternResolver.getResources(location)__				for (Resource resource : resources) {_					resourceLocation = resource.toString()__					InputStream stream = resource.getInputStream()__					try {_						Document document = buildDocument(handler, stream)__						parseDocument(resource, document, infos)__					}_					finally {_						stream.close()__					}_				}_			}_		}_		catch (IOException ex) {_			throw new IllegalArgumentException("Cannot parse persistence unit from " + resourceLocation, ex)__		}_		catch (SAXException ex) {_			throw new IllegalArgumentException("Invalid XML in persistence unit from " + resourceLocation, ex)__		}_		catch (ParserConfigurationException ex) {_			throw new IllegalArgumentException("Internal error parsing persistence unit from " + resourceLocation)__		}__		return infos.toArray(new SpringPersistenceUnitInfo[0])__	};parse,and,build,all,persistence,unit,infos,defined,in,the,given,xml,files,param,persistence,xml,locations,the,resource,locations,can,be,patterns,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,locations,error,handler,handler,new,simple,sax,error,handler,logger,list,spring,persistence,unit,info,infos,new,linked,list,string,resource,location,null,try,for,string,location,persistence,xml,locations,resource,resources,this,resource,pattern,resolver,get,resources,location,for,resource,resource,resources,resource,location,resource,to,string,input,stream,stream,resource,get,input,stream,try,document,document,build,document,handler,stream,parse,document,resource,document,infos,finally,stream,close,catch,ioexception,ex,throw,new,illegal,argument,exception,cannot,parse,persistence,unit,from,resource,location,ex,catch,saxexception,ex,throw,new,illegal,argument,exception,invalid,xml,in,persistence,unit,from,resource,location,ex,catch,parser,configuration,exception,ex,throw,new,illegal,argument,exception,internal,error,parsing,persistence,unit,from,resource,location,return,infos,to,array,new,spring,persistence,unit,info,0
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseClass(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1328020251;Parse the <code>class</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseClass(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,class,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseClass(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1329142650;Parse the <code>class</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseClass(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,class,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1328020251;Parse the <code>mapping-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1329142650;Parse the <code>mapping-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> @SuppressWarnings("unchecked") 	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1349904864;Parse the <code>mapping-file</code> XML elements.;@SuppressWarnings("unchecked")_	protected void parseMappingFiles(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> files = DomUtils.getChildElementsByTagName(persistenceUnit, MAPPING_FILE_NAME)__		for (Element element : files) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addMappingFileName(value)__			}_		}_	};parse,the,code,mapping,file,code,xml,elements;suppress,warnings,unchecked,protected,void,parse,mapping,files,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,files,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,files,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,mapping,file,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1356735495;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1363714444;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1374521837;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1375309221;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1464299869;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1467730834;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1495868221;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1496837955;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1519295386;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value))_				unitInfo.addManagedClassName(value)__		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo);1530174524;Parse the {@code class} XML elements.;protected void parseManagedClasses(Element persistenceUnit, SpringPersistenceUnitInfo unitInfo) {_		List<Element> classes = DomUtils.getChildElementsByTagName(persistenceUnit, MANAGED_CLASS_NAME)__		for (Element element : classes) {_			String value = DomUtils.getTextValue(element).trim()__			if (StringUtils.hasText(value)) {_				unitInfo.addManagedClassName(value)__			}_		}_	};parse,the,code,class,xml,elements;protected,void,parse,managed,classes,element,persistence,unit,spring,persistence,unit,info,unit,info,list,element,classes,dom,utils,get,child,elements,by,tag,name,persistence,unit,for,element,element,classes,string,value,dom,utils,get,text,value,element,trim,if,string,utils,has,text,value,unit,info,add,managed,class,name,value
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException;1328020251;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException { _		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			unitInfo.setExcludeUnlistedClasses(true)__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheModeName(cacheMode)__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationModeName(validationMode)__		}__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)__		parseClass(persistenceUnit, unitInfo)__		parseProperty(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,true,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,name,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,name,validation,mode,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,parse,class,persistence,unit,unit,info,parse,property,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException;1329142650;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version) throws IOException {_		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			unitInfo.setExcludeUnlistedClasses(true)__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheModeName(cacheMode)__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationModeName(validationMode)__		}__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)__		parseClass(persistenceUnit, unitInfo)__		parseProperty(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,true,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,name,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,name,validation,mode,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,parse,class,persistence,unit,unit,info,parse,property,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1349904864;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			unitInfo.setExcludeUnlistedClasses(true)__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheModeName(cacheMode)__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationModeName(validationMode)__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,true,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,name,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,name,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1356735495;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			unitInfo.setExcludeUnlistedClasses(true)__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheModeName(cacheMode)__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationModeName(validationMode)__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,true,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,name,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,name,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1363714444;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			unitInfo.setExcludeUnlistedClasses(true)__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,true,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1374521837;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses == null) {_			_			unitInfo.setExcludeUnlistedClasses(!VERSION_1.equals(version))__		}_		else {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(StringUtils.isEmpty(excludeText) ||_					Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,unit,info,set,exclude,unlisted,classes,equals,version,else,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,is,empty,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1375309221;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1464299869;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1467730834;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl) 			throws IOException;1495868221;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(Element persistenceUnit, String version, URL rootUrl)_			throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo( 			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException;1496837955;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(_			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,nullable,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo( 			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException;1519295386;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(_			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,nullable,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> protected SpringPersistenceUnitInfo parsePersistenceUnitInfo( 			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException;1530174524;Parse the unit info DOM element.;protected SpringPersistenceUnitInfo parsePersistenceUnitInfo(_			Element persistenceUnit, String version, @Nullable URL rootUrl) throws IOException {__		SpringPersistenceUnitInfo unitInfo = new SpringPersistenceUnitInfo()___		_		unitInfo.setPersistenceXMLSchemaVersion(version)___		_		unitInfo.setPersistenceUnitRootUrl(rootUrl)___		_		unitInfo.setPersistenceUnitName(persistenceUnit.getAttribute(UNIT_NAME).trim())___		_		String txType = persistenceUnit.getAttribute(TRANSACTION_TYPE).trim()__		if (StringUtils.hasText(txType)) {_			unitInfo.setTransactionType(PersistenceUnitTransactionType.valueOf(txType))__		}__		_		String jtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, JTA_DATA_SOURCE)__		if (StringUtils.hasText(jtaDataSource)) {_			unitInfo.setJtaDataSource(this.dataSourceLookup.getDataSource(jtaDataSource.trim()))__		}__		String nonJtaDataSource = DomUtils.getChildElementValueByTagName(persistenceUnit, NON_JTA_DATA_SOURCE)__		if (StringUtils.hasText(nonJtaDataSource)) {_			unitInfo.setNonJtaDataSource(this.dataSourceLookup.getDataSource(nonJtaDataSource.trim()))__		}__		_		String provider = DomUtils.getChildElementValueByTagName(persistenceUnit, PROVIDER)__		if (StringUtils.hasText(provider)) {_			unitInfo.setPersistenceProviderClassName(provider.trim())__		}__		_		Element excludeUnlistedClasses = DomUtils.getChildElementByTagName(persistenceUnit, EXCLUDE_UNLISTED_CLASSES)__		if (excludeUnlistedClasses != null) {_			String excludeText = DomUtils.getTextValue(excludeUnlistedClasses)__			unitInfo.setExcludeUnlistedClasses(!StringUtils.hasText(excludeText) || Boolean.valueOf(excludeText))__		}__		_		String cacheMode = DomUtils.getChildElementValueByTagName(persistenceUnit, SHARED_CACHE_MODE)__		if (StringUtils.hasText(cacheMode)) {_			unitInfo.setSharedCacheMode(SharedCacheMode.valueOf(cacheMode))__		}__		_		String validationMode = DomUtils.getChildElementValueByTagName(persistenceUnit, VALIDATION_MODE)__		if (StringUtils.hasText(validationMode)) {_			unitInfo.setValidationMode(ValidationMode.valueOf(validationMode))__		}__		parseProperties(persistenceUnit, unitInfo)__		parseManagedClasses(persistenceUnit, unitInfo)__		parseMappingFiles(persistenceUnit, unitInfo)__		parseJarFiles(persistenceUnit, unitInfo)___		return unitInfo__	};parse,the,unit,info,dom,element;protected,spring,persistence,unit,info,parse,persistence,unit,info,element,persistence,unit,string,version,nullable,url,root,url,throws,ioexception,spring,persistence,unit,info,unit,info,new,spring,persistence,unit,info,unit,info,set,persistence,xmlschema,version,version,unit,info,set,persistence,unit,root,url,root,url,unit,info,set,persistence,unit,name,persistence,unit,get,attribute,trim,string,tx,type,persistence,unit,get,attribute,trim,if,string,utils,has,text,tx,type,unit,info,set,transaction,type,persistence,unit,transaction,type,value,of,tx,type,string,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,jta,data,source,unit,info,set,jta,data,source,this,data,source,lookup,get,data,source,jta,data,source,trim,string,non,jta,data,source,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,non,jta,data,source,unit,info,set,non,jta,data,source,this,data,source,lookup,get,data,source,non,jta,data,source,trim,string,provider,dom,utils,get,child,element,value,by,tag,name,persistence,unit,provider,if,string,utils,has,text,provider,unit,info,set,persistence,provider,class,name,provider,trim,element,exclude,unlisted,classes,dom,utils,get,child,element,by,tag,name,persistence,unit,if,exclude,unlisted,classes,null,string,exclude,text,dom,utils,get,text,value,exclude,unlisted,classes,unit,info,set,exclude,unlisted,classes,string,utils,has,text,exclude,text,boolean,value,of,exclude,text,string,cache,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,cache,mode,unit,info,set,shared,cache,mode,shared,cache,mode,value,of,cache,mode,string,validation,mode,dom,utils,get,child,element,value,by,tag,name,persistence,unit,if,string,utils,has,text,validation,mode,unit,info,set,validation,mode,validation,mode,value,of,validation,mode,parse,properties,persistence,unit,unit,info,parse,managed,classes,persistence,unit,unit,info,parse,mapping,files,persistence,unit,unit,info,parse,jar,files,persistence,unit,unit,info,return,unit,info
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1328020251;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1329142650;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1349904864;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1356735495;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1363714444;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1374521837;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1375309221;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1464299869;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1467730834;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1495868221;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1496837955;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1519295386;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation);1530174524;Parse and build all persistence unit infos defined in the specified XML file(s)._@param persistenceXmlLocation the resource location (can be a pattern)_@return the resulting PersistenceUnitInfo instances;public SpringPersistenceUnitInfo[] readPersistenceUnitInfos(String persistenceXmlLocation) {_		return readPersistenceUnitInfos(new String[] {persistenceXmlLocation})__	};parse,and,build,all,persistence,unit,infos,defined,in,the,specified,xml,file,s,param,persistence,xml,location,the,resource,location,can,be,a,pattern,return,the,resulting,persistence,unit,info,instances;public,spring,persistence,unit,info,read,persistence,unit,infos,string,persistence,xml,location,return,read,persistence,unit,infos,new,string,persistence,xml,location
PersistenceUnitReader -> @Nullable 	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1495868221;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;@Nullable_	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;nullable,static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> @Nullable 	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1496837955;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;@Nullable_	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;nullable,static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> @Nullable 	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1519295386;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;@Nullable_	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;nullable,static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
PersistenceUnitReader -> @Nullable 	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException;1530174524;Determine the persistence unit root URL based on the given resource_(which points to the {@code persistence.xml} file we're reading)._@param resource the resource to check_@return the corresponding persistence unit root URL_@throws IOException if the checking failed;@Nullable_	static URL determinePersistenceUnitRootUrl(Resource resource) throws IOException {_		URL originalURL = resource.getURL()___		_		if (ResourceUtils.isJarURL(originalURL)) {_			return ResourceUtils.extractJarFileURL(originalURL)__		}__		_		String urlToString = originalURL.toExternalForm()__		if (!urlToString.contains(META_INF)) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" should be located inside META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}_		if (urlToString.lastIndexOf(META_INF) == urlToString.lastIndexOf('/') - (1 + META_INF.length())) {_			if (logger.isInfoEnabled()) {_				logger.info(resource.getFilename() +_						" is not located in the root of META-INF directory_ cannot determine persistence unit root URL for " +_						resource)__			}_			return null__		}__		String persistenceUnitRoot = urlToString.substring(0, urlToString.lastIndexOf(META_INF))__		if (persistenceUnitRoot.endsWith("/")) {_			persistenceUnitRoot = persistenceUnitRoot.substring(0, persistenceUnitRoot.length() - 1)__		}_		return new URL(persistenceUnitRoot)__	};determine,the,persistence,unit,root,url,based,on,the,given,resource,which,points,to,the,code,persistence,xml,file,we,re,reading,param,resource,the,resource,to,check,return,the,corresponding,persistence,unit,root,url,throws,ioexception,if,the,checking,failed;nullable,static,url,determine,persistence,unit,root,url,resource,resource,throws,ioexception,url,original,url,resource,get,url,if,resource,utils,is,jar,url,original,url,return,resource,utils,extract,jar,file,url,original,url,string,url,to,string,original,url,to,external,form,if,url,to,string,contains,if,logger,is,info,enabled,logger,info,resource,get,filename,should,be,located,inside,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,if,url,to,string,last,index,of,url,to,string,last,index,of,1,length,if,logger,is,info,enabled,logger,info,resource,get,filename,is,not,located,in,the,root,of,meta,inf,directory,cannot,determine,persistence,unit,root,url,for,resource,return,null,string,persistence,unit,root,url,to,string,substring,0,url,to,string,last,index,of,if,persistence,unit,root,ends,with,persistence,unit,root,persistence,unit,root,substring,0,persistence,unit,root,length,1,return,new,url,persistence,unit,root
