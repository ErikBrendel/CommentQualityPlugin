commented;modifiers;parameterAmount;loc;comment;code
true;static;1;5;/**  * Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+.  * @param session the Hibernate Session to get the flush mode from  * @return the FlushMode (never {@code null})  * @since 4.3  */ ;/**  * Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+.  * @param session the Hibernate Session to get the flush mode from  * @return the FlushMode (never {@code null})  * @since 4.3  */ static FlushMode getFlushMode(Session session) {     FlushMode flushMode = (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session).     Assert.state(flushMode != null, "No FlushMode from Session").     return flushMode. }
true;static;2;21;/**  * Trigger a flush on the given Hibernate Session, converting regular  * {@link HibernateException} instances as well as Hibernate 5.2's  * {@link PersistenceException} wrappers accordingly.  * @param session the Hibernate Session to flush  * @param synch whether this flush is triggered by transaction synchronization  * @throws DataAccessException in case of flush failures  * @since 4.3.2  */ ;/**  * Trigger a flush on the given Hibernate Session, converting regular  * {@link HibernateException} instances as well as Hibernate 5.2's  * {@link PersistenceException} wrappers accordingly.  * @param session the Hibernate Session to flush  * @param synch whether this flush is triggered by transaction synchronization  * @throws DataAccessException in case of flush failures  * @since 4.3.2  */ static void flush(Session session, boolean synch) throws DataAccessException {     if (synch) {         logger.debug("Flushing Hibernate Session on transaction synchronization").     } else {         logger.debug("Flushing Hibernate Session on explicit request").     }     try {         session.flush().     } catch (HibernateException ex) {         throw convertHibernateAccessException(ex).     } catch (PersistenceException ex) {         if (ex.getCause() instanceof HibernateException) {             throw convertHibernateAccessException((HibernateException) ex.getCause()).         }         throw ex.     } }
true;public,static;1;13;/**  * Perform actual closing of the Hibernate Session,  * catching and logging any cleanup exceptions thrown.  * @param session the Hibernate Session to close (may be {@code null})  * @see Session#close()  */ ;/**  * Perform actual closing of the Hibernate Session,  * catching and logging any cleanup exceptions thrown.  * @param session the Hibernate Session to close (may be {@code null})  * @see Session#close()  */ public static void closeSession(@Nullable Session session) {     if (session != null) {         try {             session.close().         } catch (HibernateException ex) {             logger.debug("Could not close Hibernate Session", ex).         } catch (Throwable ex) {             logger.debug("Unexpected exception on closing Hibernate Session", ex).         }     } }
true;public,static;1;28;/**  * Determine the DataSource of the given SessionFactory.  * @param sessionFactory the SessionFactory to check  * @return the DataSource, or {@code null} if none found  * @see ConnectionProvider  */ ;/**  * Determine the DataSource of the given SessionFactory.  * @param sessionFactory the SessionFactory to check  * @return the DataSource, or {@code null} if none found  * @see ConnectionProvider  */ @Nullable public static DataSource getDataSource(SessionFactory sessionFactory) {     Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties").     if (getProperties != null) {         Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory).         if (props != null) {             Object dataSourceValue = props.get(Environment.DATASOURCE).             if (dataSourceValue instanceof DataSource) {                 return (DataSource) dataSourceValue.             }         }     }     if (sessionFactory instanceof SessionFactoryImplementor) {         SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory.         try {             ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class).             if (cp != null) {                 return cp.unwrap(DataSource.class).             }         } catch (UnknownServiceException ex) {             if (logger.isDebugEnabled()) {                 logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex).             }         }     }     return null. }
true;public,static;1;80;/**  * Convert the given HibernateException to an appropriate exception  * from the {@code org.springframework.dao} hierarchy.  * @param ex the HibernateException that occurred  * @return the corresponding DataAccessException instance  * @see HibernateExceptionTranslator#convertHibernateAccessException  * @see HibernateTransactionManager#convertHibernateAccessException  */ ;/**  * Convert the given HibernateException to an appropriate exception  * from the {@code org.springframework.dao} hierarchy.  * @param ex the HibernateException that occurred  * @return the corresponding DataAccessException instance  * @see HibernateExceptionTranslator#convertHibernateAccessException  * @see HibernateTransactionManager#convertHibernateAccessException  */ public static DataAccessException convertHibernateAccessException(HibernateException ex) {     if (ex instanceof JDBCConnectionException) {         return new DataAccessResourceFailureException(ex.getMessage(), ex).     }     if (ex instanceof SQLGrammarException) {         SQLGrammarException jdbcEx = (SQLGrammarException) ex.         return new InvalidDataAccessResourceUsageException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]", ex).     }     if (ex instanceof QueryTimeoutException) {         QueryTimeoutException jdbcEx = (QueryTimeoutException) ex.         return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]", ex).     }     if (ex instanceof LockAcquisitionException) {         LockAcquisitionException jdbcEx = (LockAcquisitionException) ex.         return new CannotAcquireLockException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]", ex).     }     if (ex instanceof PessimisticLockException) {         PessimisticLockException jdbcEx = (PessimisticLockException) ex.         return new PessimisticLockingFailureException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]", ex).     }     if (ex instanceof ConstraintViolationException) {         ConstraintViolationException jdbcEx = (ConstraintViolationException) ex.         return new DataIntegrityViolationException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]. constraint [" + jdbcEx.getConstraintName() + "]", ex).     }     if (ex instanceof DataException) {         DataException jdbcEx = (DataException) ex.         return new DataIntegrityViolationException(ex.getMessage() + ". SQL [" + jdbcEx.getSQL() + "]", ex).     }     if (ex instanceof JDBCException) {         return new HibernateJdbcException((JDBCException) ex).     }     if (ex instanceof QueryException) {         return new HibernateQueryException((QueryException) ex).     }     if (ex instanceof NonUniqueResultException) {         return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex).     }     if (ex instanceof NonUniqueObjectException) {         return new DuplicateKeyException(ex.getMessage(), ex).     }     if (ex instanceof PropertyValueException) {         return new DataIntegrityViolationException(ex.getMessage(), ex).     }     if (ex instanceof PersistentObjectException) {         return new InvalidDataAccessApiUsageException(ex.getMessage(), ex).     }     if (ex instanceof TransientObjectException) {         return new InvalidDataAccessApiUsageException(ex.getMessage(), ex).     }     if (ex instanceof ObjectDeletedException) {         return new InvalidDataAccessApiUsageException(ex.getMessage(), ex).     }     if (ex instanceof UnresolvableObjectException) {         return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex).     }     if (ex instanceof WrongClassException) {         return new HibernateObjectRetrievalFailureException((WrongClassException) ex).     }     if (ex instanceof StaleObjectStateException) {         return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex).     }     if (ex instanceof StaleStateException) {         return new HibernateOptimisticLockingFailureException((StaleStateException) ex).     }     if (ex instanceof OptimisticEntityLockException) {         return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex).     }     if (ex instanceof PessimisticEntityLockException) {         if (ex.getCause() instanceof LockAcquisitionException) {             return new CannotAcquireLockException(ex.getMessage(), ex.getCause()).         }         return new PessimisticLockingFailureException(ex.getMessage(), ex).     }     // fallback     return new HibernateSystemException(ex). }
