# id;timestamp;commentText;codeText;commentWords;codeWords
SessionFactoryUtils -> public static void closeSession(@Nullable Session session);1495868221;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static void closeSession(@Nullable Session session);1496837955;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static void closeSession(@Nullable Session session);1516617801;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static void closeSession(@Nullable Session session);1530174524;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(@Nullable Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,nullable,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> @Nullable 	public static DataSource getDataSource(SessionFactory sessionFactory);1495868221;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;@Nullable_	public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			Object dataSourceValue = props.get(Environment.DATASOURCE)__			if (dataSourceValue instanceof DataSource) {_				return (DataSource) dataSourceValue__			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;nullable,public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> @Nullable 	public static DataSource getDataSource(SessionFactory sessionFactory);1496837955;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;@Nullable_	public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			if (props != null) {_				Object dataSourceValue = props.get(Environment.DATASOURCE)__				if (dataSourceValue instanceof DataSource) {_					return (DataSource) dataSourceValue__				}_			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;nullable,public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,if,props,null,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> @Nullable 	public static DataSource getDataSource(SessionFactory sessionFactory);1516617801;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;@Nullable_	public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			if (props != null) {_				Object dataSourceValue = props.get(Environment.DATASOURCE)__				if (dataSourceValue instanceof DataSource) {_					return (DataSource) dataSourceValue__				}_			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;nullable,public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,if,props,null,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> @Nullable 	public static DataSource getDataSource(SessionFactory sessionFactory);1530174524;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;@Nullable_	public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			if (props != null) {_				Object dataSourceValue = props.get(Environment.DATASOURCE)__				if (dataSourceValue instanceof DataSource) {_					return (DataSource) dataSourceValue__				}_			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;nullable,public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,if,props,null,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1468441852;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1485810955;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1495868221;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1496837955;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1516617801;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException in case of flush failures_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,in,case,of,flush,failures,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> static void flush(Session session, boolean synch) throws DataAccessException;1530174524;Trigger a flush on the given Hibernate Session, converting regular_{@link HibernateException} instances as well as Hibernate 5.2's_{@link PersistenceException} wrappers accordingly._@param session the Hibernate Session to flush_@param synch whether this flush is triggered by transaction synchronization_@throws DataAccessException in case of flush failures_@since 4.3.2;static void flush(Session session, boolean synch) throws DataAccessException {_		if (synch) {_			logger.debug("Flushing Hibernate Session on transaction synchronization")__		}_		else {_			logger.debug("Flushing Hibernate Session on explicit request")__		}_		try {_			session.flush()__		}_		catch (HibernateException ex) {_			throw convertHibernateAccessException(ex)__		}_		catch (PersistenceException ex) {_			if (ex.getCause() instanceof HibernateException) {_				throw convertHibernateAccessException((HibernateException) ex.getCause())__			}_			throw ex__		}__	};trigger,a,flush,on,the,given,hibernate,session,converting,regular,link,hibernate,exception,instances,as,well,as,hibernate,5,2,s,link,persistence,exception,wrappers,accordingly,param,session,the,hibernate,session,to,flush,param,synch,whether,this,flush,is,triggered,by,transaction,synchronization,throws,data,access,exception,in,case,of,flush,failures,since,4,3,2;static,void,flush,session,session,boolean,synch,throws,data,access,exception,if,synch,logger,debug,flushing,hibernate,session,on,transaction,synchronization,else,logger,debug,flushing,hibernate,session,on,explicit,request,try,session,flush,catch,hibernate,exception,ex,throw,convert,hibernate,access,exception,ex,catch,persistence,exception,ex,if,ex,get,cause,instanceof,hibernate,exception,throw,convert,hibernate,access,exception,hibernate,exception,ex,get,cause,throw,ex
SessionFactoryUtils -> public static void closeSession(Session session);1467668243;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static void closeSession(Session session);1468441852;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static void closeSession(Session session);1485810955;Perform actual closing of the Hibernate Session,_catching and logging any cleanup exceptions thrown._@param session the Hibernate Session to close (may be {@code null})_@see Session#close();public static void closeSession(Session session) {_		if (session != null) {_			try {_				session.close()__			}_			catch (HibernateException ex) {_				logger.debug("Could not close Hibernate Session", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing Hibernate Session", ex)__			}_		}_	};perform,actual,closing,of,the,hibernate,session,catching,and,logging,any,cleanup,exceptions,thrown,param,session,the,hibernate,session,to,close,may,be,code,null,see,session,close;public,static,void,close,session,session,session,if,session,null,try,session,close,catch,hibernate,exception,ex,logger,debug,could,not,close,hibernate,session,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,hibernate,session,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1467668243;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1468441852;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1485810955;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1495868221;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1496837955;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1516617801;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> public static DataAccessException convertHibernateAccessException(HibernateException ex);1530174524;Convert the given HibernateException to an appropriate exception_from the {@code org.springframework.dao} hierarchy._@param ex the HibernateException that occurred_@return the corresponding DataAccessException instance_@see HibernateExceptionTranslator#convertHibernateAccessException_@see HibernateTransactionManager#convertHibernateAccessException;public static DataAccessException convertHibernateAccessException(HibernateException ex) {_		if (ex instanceof JDBCConnectionException) {_			return new DataAccessResourceFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof SQLGrammarException) {_			SQLGrammarException jdbcEx = (SQLGrammarException) ex__			return new InvalidDataAccessResourceUsageException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof QueryTimeoutException) {_			QueryTimeoutException jdbcEx = (QueryTimeoutException) ex__			return new org.springframework.dao.QueryTimeoutException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof LockAcquisitionException) {_			LockAcquisitionException jdbcEx = (LockAcquisitionException) ex__			return new CannotAcquireLockException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof PessimisticLockException) {_			PessimisticLockException jdbcEx = (PessimisticLockException) ex__			return new PessimisticLockingFailureException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof ConstraintViolationException) {_			ConstraintViolationException jdbcEx = (ConstraintViolationException) ex__			return new DataIntegrityViolationException(ex.getMessage()  + "_ SQL [" + jdbcEx.getSQL() +_					"]_ constraint [" + jdbcEx.getConstraintName() + "]", ex)__		}_		if (ex instanceof DataException) {_			DataException jdbcEx = (DataException) ex__			return new DataIntegrityViolationException(ex.getMessage() + "_ SQL [" + jdbcEx.getSQL() + "]", ex)__		}_		if (ex instanceof JDBCException) {_			return new HibernateJdbcException((JDBCException) ex)__		}_		__		if (ex instanceof QueryException) {_			return new HibernateQueryException((QueryException) ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueObjectException) {_			return new DuplicateKeyException(ex.getMessage(), ex)__		}_		if (ex instanceof PropertyValueException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof PersistentObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof TransientObjectException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof ObjectDeletedException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof UnresolvableObjectException) {_			return new HibernateObjectRetrievalFailureException((UnresolvableObjectException) ex)__		}_		if (ex instanceof WrongClassException) {_			return new HibernateObjectRetrievalFailureException((WrongClassException) ex)__		}_		if (ex instanceof StaleObjectStateException) {_			return new HibernateOptimisticLockingFailureException((StaleObjectStateException) ex)__		}_		if (ex instanceof StaleStateException) {_			return new HibernateOptimisticLockingFailureException((StaleStateException) ex)__		}_		if (ex instanceof OptimisticEntityLockException) {_			return new HibernateOptimisticLockingFailureException((OptimisticEntityLockException) ex)__		}_		if (ex instanceof PessimisticEntityLockException) {_			if (ex.getCause() instanceof LockAcquisitionException) {_				return new CannotAcquireLockException(ex.getMessage(), ex.getCause())__			}_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}__		_		return new HibernateSystemException(ex)__	};convert,the,given,hibernate,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,param,ex,the,hibernate,exception,that,occurred,return,the,corresponding,data,access,exception,instance,see,hibernate,exception,translator,convert,hibernate,access,exception,see,hibernate,transaction,manager,convert,hibernate,access,exception;public,static,data,access,exception,convert,hibernate,access,exception,hibernate,exception,ex,if,ex,instanceof,jdbcconnection,exception,return,new,data,access,resource,failure,exception,ex,get,message,ex,if,ex,instanceof,sqlgrammar,exception,sqlgrammar,exception,jdbc,ex,sqlgrammar,exception,ex,return,new,invalid,data,access,resource,usage,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,query,timeout,exception,query,timeout,exception,jdbc,ex,query,timeout,exception,ex,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,lock,acquisition,exception,lock,acquisition,exception,jdbc,ex,lock,acquisition,exception,ex,return,new,cannot,acquire,lock,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,pessimistic,lock,exception,pessimistic,lock,exception,jdbc,ex,pessimistic,lock,exception,ex,return,new,pessimistic,locking,failure,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,constraint,violation,exception,constraint,violation,exception,jdbc,ex,constraint,violation,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,constraint,jdbc,ex,get,constraint,name,ex,if,ex,instanceof,data,exception,data,exception,jdbc,ex,data,exception,ex,return,new,data,integrity,violation,exception,ex,get,message,sql,jdbc,ex,get,sql,ex,if,ex,instanceof,jdbcexception,return,new,hibernate,jdbc,exception,jdbcexception,ex,if,ex,instanceof,query,exception,return,new,hibernate,query,exception,query,exception,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,object,exception,return,new,duplicate,key,exception,ex,get,message,ex,if,ex,instanceof,property,value,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,persistent,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,transient,object,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,object,deleted,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,unresolvable,object,exception,return,new,hibernate,object,retrieval,failure,exception,unresolvable,object,exception,ex,if,ex,instanceof,wrong,class,exception,return,new,hibernate,object,retrieval,failure,exception,wrong,class,exception,ex,if,ex,instanceof,stale,object,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,object,state,exception,ex,if,ex,instanceof,stale,state,exception,return,new,hibernate,optimistic,locking,failure,exception,stale,state,exception,ex,if,ex,instanceof,optimistic,entity,lock,exception,return,new,hibernate,optimistic,locking,failure,exception,optimistic,entity,lock,exception,ex,if,ex,instanceof,pessimistic,entity,lock,exception,if,ex,get,cause,instanceof,lock,acquisition,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,get,cause,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,return,new,hibernate,system,exception,ex
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1467668243;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		return (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,return,flush,mode,reflection,utils,invoke,method,get,flush,mode,session
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1468441852;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		return (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,return,flush,mode,reflection,utils,invoke,method,get,flush,mode,session
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1485810955;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		return (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,return,flush,mode,reflection,utils,invoke,method,get,flush,mode,session
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1495868221;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		return (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,return,flush,mode,reflection,utils,invoke,method,get,flush,mode,session
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1496837955;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		FlushMode flushMode = (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__		Assert.state(flushMode != null, "No FlushMode from Session")__		return flushMode__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,flush,mode,flush,mode,flush,mode,reflection,utils,invoke,method,get,flush,mode,session,assert,state,flush,mode,null,no,flush,mode,from,session,return,flush,mode
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1516617801;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		FlushMode flushMode = (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__		Assert.state(flushMode != null, "No FlushMode from Session")__		return flushMode__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,flush,mode,flush,mode,flush,mode,reflection,utils,invoke,method,get,flush,mode,session,assert,state,flush,mode,null,no,flush,mode,from,session,return,flush,mode
SessionFactoryUtils -> static FlushMode getFlushMode(Session session);1530174524;Get the native Hibernate FlushMode, adapting between Hibernate 5.0/5.1 and 5.2+._@param session the Hibernate Session to get the flush mode from_@return the FlushMode (never {@code null})_@since 4.3;static FlushMode getFlushMode(Session session) {_		FlushMode flushMode = (FlushMode) ReflectionUtils.invokeMethod(getFlushMode, session)__		Assert.state(flushMode != null, "No FlushMode from Session")__		return flushMode__	};get,the,native,hibernate,flush,mode,adapting,between,hibernate,5,0,5,1,and,5,2,param,session,the,hibernate,session,to,get,the,flush,mode,from,return,the,flush,mode,never,code,null,since,4,3;static,flush,mode,get,flush,mode,session,session,flush,mode,flush,mode,flush,mode,reflection,utils,invoke,method,get,flush,mode,session,assert,state,flush,mode,null,no,flush,mode,from,session,return,flush,mode
SessionFactoryUtils -> public static DataSource getDataSource(SessionFactory sessionFactory);1467668243;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			Object dataSourceValue = props.get(Environment.DATASOURCE)__			if (dataSourceValue instanceof DataSource) {_				return (DataSource) dataSourceValue__			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> public static DataSource getDataSource(SessionFactory sessionFactory);1468441852;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			Object dataSourceValue = props.get(Environment.DATASOURCE)__			if (dataSourceValue instanceof DataSource) {_				return (DataSource) dataSourceValue__			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
SessionFactoryUtils -> public static DataSource getDataSource(SessionFactory sessionFactory);1485810955;Determine the DataSource of the given SessionFactory._@param sessionFactory the SessionFactory to check_@return the DataSource, or {@code null} if none found_@see ConnectionProvider;public static DataSource getDataSource(SessionFactory sessionFactory) {_		Method getProperties = ClassUtils.getMethodIfAvailable(sessionFactory.getClass(), "getProperties")__		if (getProperties != null) {_			Map<?, ?> props = (Map<?, ?>) ReflectionUtils.invokeMethod(getProperties, sessionFactory)__			Object dataSourceValue = props.get(Environment.DATASOURCE)__			if (dataSourceValue instanceof DataSource) {_				return (DataSource) dataSourceValue__			}_		}_		if (sessionFactory instanceof SessionFactoryImplementor) {_			SessionFactoryImplementor sfi = (SessionFactoryImplementor) sessionFactory__			try {_				ConnectionProvider cp = sfi.getServiceRegistry().getService(ConnectionProvider.class)__				if (cp != null) {_					return cp.unwrap(DataSource.class)__				}_			}_			catch (UnknownServiceException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex)__				}_			}_		}_		return null__	};determine,the,data,source,of,the,given,session,factory,param,session,factory,the,session,factory,to,check,return,the,data,source,or,code,null,if,none,found,see,connection,provider;public,static,data,source,get,data,source,session,factory,session,factory,method,get,properties,class,utils,get,method,if,available,session,factory,get,class,get,properties,if,get,properties,null,map,props,map,reflection,utils,invoke,method,get,properties,session,factory,object,data,source,value,props,get,environment,datasource,if,data,source,value,instanceof,data,source,return,data,source,data,source,value,if,session,factory,instanceof,session,factory,implementor,session,factory,implementor,sfi,session,factory,implementor,session,factory,try,connection,provider,cp,sfi,get,service,registry,get,service,connection,provider,class,if,cp,null,return,cp,unwrap,data,source,class,catch,unknown,service,exception,ex,if,logger,is,debug,enabled,logger,debug,no,connection,provider,found,cannot,determine,data,source,for,session,factory,ex,return,null
