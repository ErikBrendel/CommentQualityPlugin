# id;timestamp;commentText;codeText;commentWords;codeWords
SpringSessionContext -> public SpringSessionContext(SessionFactoryImplementor sessionFactory);1467668243;Create a new SpringSessionContext for the given Hibernate SessionFactory._@param sessionFactory the SessionFactory to provide current Sessions for;public SpringSessionContext(SessionFactoryImplementor sessionFactory) {_		this.sessionFactory = sessionFactory__		try {_			JtaPlatform jtaPlatform = sessionFactory.getServiceRegistry().getService(JtaPlatform.class)__			this.transactionManager = jtaPlatform.retrieveTransactionManager()__			if (this.transactionManager != null) {_				this.jtaSessionContext = new SpringJtaSessionContext(sessionFactory)__			}_		}_		catch (Exception ex) {_			LogFactory.getLog(SpringSessionContext.class).warn(_					"Could not introspect Hibernate JtaPlatform for SpringJtaSessionContext", ex)__		}_	};create,a,new,spring,session,context,for,the,given,hibernate,session,factory,param,session,factory,the,session,factory,to,provide,current,sessions,for;public,spring,session,context,session,factory,implementor,session,factory,this,session,factory,session,factory,try,jta,platform,jta,platform,session,factory,get,service,registry,get,service,jta,platform,class,this,transaction,manager,jta,platform,retrieve,transaction,manager,if,this,transaction,manager,null,this,jta,session,context,new,spring,jta,session,context,session,factory,catch,exception,ex,log,factory,get,log,spring,session,context,class,warn,could,not,introspect,hibernate,jta,platform,for,spring,jta,session,context,ex
SpringSessionContext -> public SpringSessionContext(SessionFactoryImplementor sessionFactory);1498780456;Create a new SpringSessionContext for the given Hibernate SessionFactory._@param sessionFactory the SessionFactory to provide current Sessions for;public SpringSessionContext(SessionFactoryImplementor sessionFactory) {_		this.sessionFactory = sessionFactory__		try {_			JtaPlatform jtaPlatform = sessionFactory.getServiceRegistry().getService(JtaPlatform.class)__			this.transactionManager = jtaPlatform.retrieveTransactionManager()__			if (this.transactionManager != null) {_				this.jtaSessionContext = new SpringJtaSessionContext(sessionFactory)__			}_		}_		catch (Exception ex) {_			LogFactory.getLog(SpringSessionContext.class).warn(_					"Could not introspect Hibernate JtaPlatform for SpringJtaSessionContext", ex)__		}_	};create,a,new,spring,session,context,for,the,given,hibernate,session,factory,param,session,factory,the,session,factory,to,provide,current,sessions,for;public,spring,session,context,session,factory,implementor,session,factory,this,session,factory,session,factory,try,jta,platform,jta,platform,session,factory,get,service,registry,get,service,jta,platform,class,this,transaction,manager,jta,platform,retrieve,transaction,manager,if,this,transaction,manager,null,this,jta,session,context,new,spring,jta,session,context,session,factory,catch,exception,ex,log,factory,get,log,spring,session,context,class,warn,could,not,introspect,hibernate,jta,platform,for,spring,jta,session,context,ex
SpringSessionContext -> public SpringSessionContext(SessionFactoryImplementor sessionFactory);1530709629;Create a new SpringSessionContext for the given Hibernate SessionFactory._@param sessionFactory the SessionFactory to provide current Sessions for;public SpringSessionContext(SessionFactoryImplementor sessionFactory) {_		this.sessionFactory = sessionFactory__		try {_			JtaPlatform jtaPlatform = sessionFactory.getServiceRegistry().getService(JtaPlatform.class)__			this.transactionManager = jtaPlatform.retrieveTransactionManager()__			if (this.transactionManager != null) {_				this.jtaSessionContext = new SpringJtaSessionContext(sessionFactory)__			}_		}_		catch (Exception ex) {_			LogFactory.getLog(SpringSessionContext.class).warn(_					"Could not introspect Hibernate JtaPlatform for SpringJtaSessionContext", ex)__		}_	};create,a,new,spring,session,context,for,the,given,hibernate,session,factory,param,session,factory,the,session,factory,to,provide,current,sessions,for;public,spring,session,context,session,factory,implementor,session,factory,this,session,factory,session,factory,try,jta,platform,jta,platform,session,factory,get,service,registry,get,service,jta,platform,class,this,transaction,manager,jta,platform,retrieve,transaction,manager,if,this,transaction,manager,null,this,jta,session,context,new,spring,jta,session,context,session,factory,catch,exception,ex,log,factory,get,log,spring,session,context,class,warn,could,not,introspect,hibernate,jta,platform,for,spring,jta,session,context,ex
SpringSessionContext -> @Override 	@SuppressWarnings("deprecation") 	public Session currentSession() throws HibernateException;1467668243;Retrieve the Spring-managed Session for the current thread, if any.;@Override_	@SuppressWarnings("deprecation")_	public Session currentSession() throws HibernateException {_		Object value = TransactionSynchronizationManager.getResource(this.sessionFactory)__		if (value instanceof Session) {_			return (Session) value__		}_		else if (value instanceof SessionHolder) {_			SessionHolder sessionHolder = (SessionHolder) value__			Session session = sessionHolder.getSession()__			if (!sessionHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				TransactionSynchronizationManager.registerSynchronization(_						new SpringSessionSynchronization(sessionHolder, this.sessionFactory, false))__				sessionHolder.setSynchronizedWithTransaction(true)__				_				_				FlushMode flushMode = SessionFactoryUtils.getFlushMode(session)__				if (flushMode.equals(FlushMode.MANUAL) &&_						!TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_					session.setFlushMode(FlushMode.AUTO)__					sessionHolder.setPreviousFlushMode(flushMode)__				}_			}_			return session__		}__		if (this.transactionManager != null) {_			try {_				if (this.transactionManager.getStatus() == Status.STATUS_ACTIVE) {_					Session session = this.jtaSessionContext.currentSession()__					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						TransactionSynchronizationManager.registerSynchronization(new SpringFlushSynchronization(session))__					}_					return session__				}_			}_			catch (SystemException ex) {_				throw new HibernateException("JTA TransactionManager found but status check failed", ex)__			}_		}__		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			Session session = this.sessionFactory.openSession()__			if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_				session.setFlushMode(FlushMode.MANUAL)__			}_			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.registerSynchronization(_					new SpringSessionSynchronization(sessionHolder, this.sessionFactory, true))__			TransactionSynchronizationManager.bindResource(this.sessionFactory, sessionHolder)__			sessionHolder.setSynchronizedWithTransaction(true)__			return session__		}_		else {_			throw new HibernateException("Could not obtain transaction-synchronized Session for current thread")__		}_	};retrieve,the,spring,managed,session,for,the,current,thread,if,any;override,suppress,warnings,deprecation,public,session,current,session,throws,hibernate,exception,object,value,transaction,synchronization,manager,get,resource,this,session,factory,if,value,instanceof,session,return,session,value,else,if,value,instanceof,session,holder,session,holder,session,holder,session,holder,value,session,session,session,holder,get,session,if,session,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,false,session,holder,set,synchronized,with,transaction,true,flush,mode,flush,mode,session,factory,utils,get,flush,mode,session,if,flush,mode,equals,flush,mode,manual,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,auto,session,holder,set,previous,flush,mode,flush,mode,return,session,if,this,transaction,manager,null,try,if,this,transaction,manager,get,status,status,session,session,this,jta,session,context,current,session,if,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,flush,synchronization,session,return,session,catch,system,exception,ex,throw,new,hibernate,exception,jta,transaction,manager,found,but,status,check,failed,ex,if,transaction,synchronization,manager,is,synchronization,active,session,session,this,session,factory,open,session,if,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,manual,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,true,transaction,synchronization,manager,bind,resource,this,session,factory,session,holder,session,holder,set,synchronized,with,transaction,true,return,session,else,throw,new,hibernate,exception,could,not,obtain,transaction,synchronized,session,for,current,thread
SpringSessionContext -> @Override 	@SuppressWarnings("deprecation") 	public Session currentSession() throws HibernateException;1498780456;Retrieve the Spring-managed Session for the current thread, if any.;@Override_	@SuppressWarnings("deprecation")_	public Session currentSession() throws HibernateException {_		Object value = TransactionSynchronizationManager.getResource(this.sessionFactory)__		if (value instanceof Session) {_			return (Session) value__		}_		else if (value instanceof SessionHolder) {_			SessionHolder sessionHolder = (SessionHolder) value__			Session session = sessionHolder.getSession()__			if (!sessionHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				TransactionSynchronizationManager.registerSynchronization(_						new SpringSessionSynchronization(sessionHolder, this.sessionFactory, false))__				sessionHolder.setSynchronizedWithTransaction(true)__				_				_				FlushMode flushMode = SessionFactoryUtils.getFlushMode(session)__				if (flushMode.equals(FlushMode.MANUAL) &&_						!TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_					session.setFlushMode(FlushMode.AUTO)__					sessionHolder.setPreviousFlushMode(flushMode)__				}_			}_			return session__		}__		if (this.transactionManager != null && this.jtaSessionContext != null) {_			try {_				if (this.transactionManager.getStatus() == Status.STATUS_ACTIVE) {_					Session session = this.jtaSessionContext.currentSession()__					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						TransactionSynchronizationManager.registerSynchronization(new SpringFlushSynchronization(session))__					}_					return session__				}_			}_			catch (SystemException ex) {_				throw new HibernateException("JTA TransactionManager found but status check failed", ex)__			}_		}__		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			Session session = this.sessionFactory.openSession()__			if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_				session.setFlushMode(FlushMode.MANUAL)__			}_			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.registerSynchronization(_					new SpringSessionSynchronization(sessionHolder, this.sessionFactory, true))__			TransactionSynchronizationManager.bindResource(this.sessionFactory, sessionHolder)__			sessionHolder.setSynchronizedWithTransaction(true)__			return session__		}_		else {_			throw new HibernateException("Could not obtain transaction-synchronized Session for current thread")__		}_	};retrieve,the,spring,managed,session,for,the,current,thread,if,any;override,suppress,warnings,deprecation,public,session,current,session,throws,hibernate,exception,object,value,transaction,synchronization,manager,get,resource,this,session,factory,if,value,instanceof,session,return,session,value,else,if,value,instanceof,session,holder,session,holder,session,holder,session,holder,value,session,session,session,holder,get,session,if,session,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,false,session,holder,set,synchronized,with,transaction,true,flush,mode,flush,mode,session,factory,utils,get,flush,mode,session,if,flush,mode,equals,flush,mode,manual,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,auto,session,holder,set,previous,flush,mode,flush,mode,return,session,if,this,transaction,manager,null,this,jta,session,context,null,try,if,this,transaction,manager,get,status,status,session,session,this,jta,session,context,current,session,if,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,flush,synchronization,session,return,session,catch,system,exception,ex,throw,new,hibernate,exception,jta,transaction,manager,found,but,status,check,failed,ex,if,transaction,synchronization,manager,is,synchronization,active,session,session,this,session,factory,open,session,if,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,manual,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,true,transaction,synchronization,manager,bind,resource,this,session,factory,session,holder,session,holder,set,synchronized,with,transaction,true,return,session,else,throw,new,hibernate,exception,could,not,obtain,transaction,synchronized,session,for,current,thread
SpringSessionContext -> @Override 	@SuppressWarnings("deprecation") 	public Session currentSession() throws HibernateException;1530709629;Retrieve the Spring-managed Session for the current thread, if any.;@Override_	@SuppressWarnings("deprecation")_	public Session currentSession() throws HibernateException {_		Object value = TransactionSynchronizationManager.getResource(this.sessionFactory)__		if (value instanceof Session) {_			return (Session) value__		}_		else if (value instanceof SessionHolder) {_			_			SessionHolder sessionHolder = (SessionHolder) value__			Session session = sessionHolder.getSession()__			if (!sessionHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				TransactionSynchronizationManager.registerSynchronization(_						new SpringSessionSynchronization(sessionHolder, this.sessionFactory, false))__				sessionHolder.setSynchronizedWithTransaction(true)__				_				_				FlushMode flushMode = SessionFactoryUtils.getFlushMode(session)__				if (flushMode.equals(FlushMode.MANUAL) &&_						!TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_					session.setFlushMode(FlushMode.AUTO)__					sessionHolder.setPreviousFlushMode(flushMode)__				}_			}_			return session__		}_		else if (value instanceof EntityManagerHolder) {_			_			return ((EntityManagerHolder) value).getEntityManager().unwrap(Session.class)__		}__		if (this.transactionManager != null && this.jtaSessionContext != null) {_			try {_				if (this.transactionManager.getStatus() == Status.STATUS_ACTIVE) {_					Session session = this.jtaSessionContext.currentSession()__					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						TransactionSynchronizationManager.registerSynchronization(_								new SpringFlushSynchronization(session))__					}_					return session__				}_			}_			catch (SystemException ex) {_				throw new HibernateException("JTA TransactionManager found but status check failed", ex)__			}_		}__		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			Session session = this.sessionFactory.openSession()__			if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {_				session.setFlushMode(FlushMode.MANUAL)__			}_			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.registerSynchronization(_					new SpringSessionSynchronization(sessionHolder, this.sessionFactory, true))__			TransactionSynchronizationManager.bindResource(this.sessionFactory, sessionHolder)__			sessionHolder.setSynchronizedWithTransaction(true)__			return session__		}_		else {_			throw new HibernateException("Could not obtain transaction-synchronized Session for current thread")__		}_	};retrieve,the,spring,managed,session,for,the,current,thread,if,any;override,suppress,warnings,deprecation,public,session,current,session,throws,hibernate,exception,object,value,transaction,synchronization,manager,get,resource,this,session,factory,if,value,instanceof,session,return,session,value,else,if,value,instanceof,session,holder,session,holder,session,holder,session,holder,value,session,session,session,holder,get,session,if,session,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,false,session,holder,set,synchronized,with,transaction,true,flush,mode,flush,mode,session,factory,utils,get,flush,mode,session,if,flush,mode,equals,flush,mode,manual,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,auto,session,holder,set,previous,flush,mode,flush,mode,return,session,else,if,value,instanceof,entity,manager,holder,return,entity,manager,holder,value,get,entity,manager,unwrap,session,class,if,this,transaction,manager,null,this,jta,session,context,null,try,if,this,transaction,manager,get,status,status,session,session,this,jta,session,context,current,session,if,transaction,synchronization,manager,is,synchronization,active,transaction,synchronization,manager,register,synchronization,new,spring,flush,synchronization,session,return,session,catch,system,exception,ex,throw,new,hibernate,exception,jta,transaction,manager,found,but,status,check,failed,ex,if,transaction,synchronization,manager,is,synchronization,active,session,session,this,session,factory,open,session,if,transaction,synchronization,manager,is,current,transaction,read,only,session,set,flush,mode,flush,mode,manual,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,register,synchronization,new,spring,session,synchronization,session,holder,this,session,factory,true,transaction,synchronization,manager,bind,resource,this,session,factory,session,holder,session,holder,set,synchronized,with,transaction,true,return,session,else,throw,new,hibernate,exception,could,not,obtain,transaction,synchronized,session,for,current,thread
