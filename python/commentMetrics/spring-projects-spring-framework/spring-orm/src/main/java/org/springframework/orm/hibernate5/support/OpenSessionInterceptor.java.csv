commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.  */ ;/**  * Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.  */ public void setSessionFactory(@Nullable SessionFactory sessionFactory) {     this.sessionFactory = sessionFactory. }
true;public;0;4;/**  * Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.  */ ;/**  * Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.  */ @Nullable public SessionFactory getSessionFactory() {     return this.sessionFactory. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (getSessionFactory() == null) {         throw new IllegalArgumentException("Property 'sessionFactory' is required").     } }
false;public;1;22;;@Override public Object invoke(MethodInvocation invocation) throws Throwable {     SessionFactory sf = getSessionFactory().     Assert.state(sf != null, "No SessionFactory set").     if (!TransactionSynchronizationManager.hasResource(sf)) {         // New Session to be bound for the current method's scope...         Session session = openSession(sf).         try {             TransactionSynchronizationManager.bindResource(sf, new SessionHolder(session)).             return invocation.proceed().         } finally {             SessionFactoryUtils.closeSession(session).             TransactionSynchronizationManager.unbindResource(sf).         }     } else {         // Pre-bound Session found -> simply proceed.         return invocation.proceed().     } }
true;protected;1;14;/**  * Open a Session for the given SessionFactory.  * <p>The default implementation delegates to the {@link SessionFactory#openSession}  * method and sets the {@link Session}'s flush mode to "MANUAL".  * @param sessionFactory the SessionFactory to use  * @return the Session to use  * @throws DataAccessResourceFailureException if the Session could not be created  * @since 5.0  * @see FlushMode#MANUAL  */ ;/**  * Open a Session for the given SessionFactory.  * <p>The default implementation delegates to the {@link SessionFactory#openSession}  * method and sets the {@link Session}'s flush mode to "MANUAL".  * @param sessionFactory the SessionFactory to use  * @return the Session to use  * @throws DataAccessResourceFailureException if the Session could not be created  * @since 5.0  * @see FlushMode#MANUAL  */ @SuppressWarnings("deprecation") protected Session openSession(SessionFactory sessionFactory) throws DataAccessResourceFailureException {     Session session = openSession().     if (session == null) {         try {             session = sessionFactory.openSession().             session.setFlushMode(FlushMode.MANUAL).         } catch (HibernateException ex) {             throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex).         }     }     return session. }
true;protected;0;5;/**  * Open a Session for the given SessionFactory.  * @deprecated as of 5.0, in favor of {@link #openSession(SessionFactory)}  */ ;/**  * Open a Session for the given SessionFactory.  * @deprecated as of 5.0, in favor of {@link #openSession(SessionFactory)}  */ @Deprecated @Nullable protected Session openSession() throws DataAccessResourceFailureException {     return null. }
