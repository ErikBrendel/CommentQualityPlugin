# id;timestamp;commentText;codeText;commentWords;codeWords
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496837955;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341397;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341594;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1498780456;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1520528267;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530174524;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530188116;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1531945062;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1533562895;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1535316501;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(@Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			if (requestingBeanName != null) {_				clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			}_			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,if,requesting,bean,name,null,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1328020251;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1350077659;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1355352386;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1356735495;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1357119239;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1362408075;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1364391983;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1368482696;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1382746898;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1382788991;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1387493371;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1408526091;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1411076742;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1414678534;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1416688499;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1417981895;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1419339720;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1426780215;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1447399860;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1450454045;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1467668243;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1467730834;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1467846264;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1470948126;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1476521730;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1478541798;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1495868221;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, String requestingBeanName);1496259743;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1328020251;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to <code>persistence-unit-ref</code>_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, <code>@PersistenceContext</code> will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,code,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,code,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1350077659;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to <code>persistence-unit-ref</code>_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, <code>@PersistenceContext</code> will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,code,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,code,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1355352386;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to <code>persistence-unit-ref</code>_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, <code>@PersistenceContext</code> will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,code,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,code,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1356735495;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1357119239;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1362408075;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1364391983;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1368482696;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1382746898;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1382788991;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1387493371;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1408526091;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1411076742;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE 5 server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,5,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1414678534;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1416688499;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1417981895;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1419339720;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1426780215;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1447399860;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1450454045;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1467668243;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1467730834;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1467846264;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1470948126;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1476521730;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1478541798;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1495868221;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1496259743;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1496837955;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1497341397;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1497341594;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1498780456;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1520528267;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1530174524;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1530188116;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1531945062;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1533562895;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceUnits(Map<String, String> persistenceUnits);1535316501;Specify the persistence units for EntityManagerFactory lookups,_as a Map from persistence unit name to persistence unit JNDI name_(which needs to resolve to an EntityManagerFactory instance)._<p>JNDI names specified here should refer to {@code persistence-unit-ref}_entries in the Java EE deployment descriptor, matching the target persistence unit._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all lookup_driven by the standard JPA annotations, and all EntityManagerFactory_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario._<p>If no corresponding "persistenceContexts"/"extendedPersistenceContexts"_are specified, {@code @PersistenceContext} will be resolved to_EntityManagers built on top of the EntityManagerFactory defined here._Note that those will be Spring-managed EntityManagers, which implement_transaction synchronization based on Spring's facilities._If you prefer the Java EE server's own EntityManager handling,_specify corresponding "persistenceContexts"/"extendedPersistenceContexts".;public void setPersistenceUnits(Map<String, String> persistenceUnits) {_		this.persistenceUnits = persistenceUnits__	};specify,the,persistence,units,for,entity,manager,factory,lookups,as,a,map,from,persistence,unit,name,to,persistence,unit,jndi,name,which,needs,to,resolve,to,an,entity,manager,factory,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,unit,ref,entries,in,the,java,ee,deployment,descriptor,matching,the,target,persistence,unit,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,factory,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,p,if,no,corresponding,persistence,contexts,extended,persistence,contexts,are,specified,code,persistence,context,will,be,resolved,to,entity,managers,built,on,top,of,the,entity,manager,factory,defined,here,note,that,those,will,be,spring,managed,entity,managers,which,implement,transaction,synchronization,based,on,spring,s,facilities,if,you,prefer,the,java,ee,server,s,own,entity,manager,handling,specify,corresponding,persistence,contexts,extended,persistence,contexts;public,void,set,persistence,units,map,string,string,persistence,units,this,persistence,units,persistence,units
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(String unitName, boolean extended);1495868221;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(String unitName, boolean extended);1496259743;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1328020251;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1350077659;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1355352386;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1356735495;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1357119239;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1362408075;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1364391983;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1368482696;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1382746898;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1382788991;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1387493371;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1408526091;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1411076742;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1414678534;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1416688499;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1417981895;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1419339720;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1426780215;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1447399860;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1450454045;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1467668243;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1467730834;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1467846264;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1470948126;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1476521730;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1478541798;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1495868221;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1496259743;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1496837955;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1497341397;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1497341594;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1498780456;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1520528267;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1530174524;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1530188116;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1531945062;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1533562895;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> public void setJndiEnvironment(Properties jndiEnvironment);1535316501;Set the JNDI environment to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiEnvironment;public void setJndiEnvironment(Properties jndiEnvironment) {_		this.jndiEnvironment = jndiEnvironment__	};set,the,jndi,environment,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,environment;public,void,set,jndi,environment,properties,jndi,environment,this,jndi,environment,jndi,environment
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1328020251;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be <code>null</code> or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1350077659;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be <code>null</code> or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1355352386;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be <code>null</code> or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1356735495;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1357119239;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1362408075;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1364391983;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1368482696;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382746898;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382788991;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1387493371;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1408526091;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1411076742;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1414678534;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1416688499;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1417981895;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1419339720;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1426780215;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1447399860;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1450454045;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467668243;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467730834;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467846264;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1470948126;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1476521730;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1478541798;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1495868221;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1496259743;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1496837955;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1497341397;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1497341594;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1498780456;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1520528267;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1530174524;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1530188116;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1531945062;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1533562895;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(@Nullable String unitName);1535316501;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(@Nullable String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,nullable,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1496837955;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1497341397;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1497341594;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1498780456;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1520528267;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1530174524;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1530188116;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1531945062;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1533562895;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> PersistenceElement -> @Override 		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName);1535316501;Resolve the object against the application context.;@Override_		protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {_			_			if (this.type != null) {_				return (this.type == PersistenceContextType.EXTENDED ?_						resolveExtendedEntityManager(target, requestingBeanName) :_						resolveEntityManager(requestingBeanName))__			}_			else {_				_				return resolveEntityManagerFactory(requestingBeanName)__			}_		};resolve,the,object,against,the,application,context;override,protected,object,get,resource,to,inject,object,target,nullable,string,requesting,bean,name,if,this,type,null,return,this,type,persistence,context,type,extended,resolve,extended,entity,manager,target,requesting,bean,name,resolve,entity,manager,requesting,bean,name,else,return,resolve,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496837955;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341397;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341594;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1498780456;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1520528267;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530174524;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530188116;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1531945062;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1533562895;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1535316501;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String unitNameForLookup = (unitName != null ? unitName : "")__		if (unitNameForLookup.isEmpty()) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!unitNameForLookup.isEmpty()) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,unit,name,for,lookup,unit,name,null,unit,name,if,unit,name,for,lookup,is,empty,unit,name,for,lookup,this,default,persistence,unit,name,if,unit,name,for,lookup,is,empty,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1496837955;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1497341397;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1497341594;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1498780456;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1520528267;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1530174524;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1530188116;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1531945062;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1533562895;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended);1535316501;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;@Nullable_	protected EntityManager getPersistenceContext(@Nullable String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if (unitNameForLookup.isEmpty()) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;nullable,protected,entity,manager,get,persistence,context,nullable,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,unit,name,for,lookup,is,empty,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(String unitName);1495868221;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(String unitName);1496259743;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1328020251;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1350077659;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1355352386;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1356735495;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1357119239;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1362408075;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1364391983;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1368482696;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1382746898;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1382788991;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1387493371;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1408526091;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1411076742;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1414678534;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1416688499;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1417981895;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1419339720;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1426780215;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1447399860;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1450454045;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1467668243;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1467730834;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1467846264;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1470948126;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1476521730;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1478541798;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1495868221;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1496259743;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1496837955;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1497341397;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1497341594;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1498780456;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1520528267;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1530174524;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1530188116;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1531945062;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1533562895;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception;1535316501;Perform a JNDI lookup for the given resource by name._<p>Called for EntityManagerFactory and EntityManager lookup_when JNDI names are mapped for specific persistence units._@param jndiName the JNDI name to look up_@param requiredType the required type of the object_@return the obtained object_@throws Exception if the JNDI lookup failed;protected <T> T lookup(String jndiName, Class<T> requiredType) throws Exception {_		return new LocatorDelegate().lookup(jndiName, requiredType)__	};perform,a,jndi,lookup,for,the,given,resource,by,name,p,called,for,entity,manager,factory,and,entity,manager,lookup,when,jndi,names,are,mapped,for,specific,persistence,units,param,jndi,name,the,jndi,name,to,look,up,param,required,type,the,required,type,of,the,object,return,the,obtained,object,throws,exception,if,the,jndi,lookup,failed;protected,t,t,lookup,string,jndi,name,class,t,required,type,throws,exception,return,new,locator,delegate,lookup,jndi,name,required,type
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1328020251;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or <code>null</code> if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,code,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1350077659;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or <code>null</code> if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,code,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1355352386;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or <code>null</code> if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,code,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1356735495;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1357119239;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1362408075;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1364391983;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1368482696;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1382746898;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1382788991;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1387493371;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1408526091;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1411076742;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1414678534;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1416688499;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1417981895;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1419339720;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1426780215;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1447399860;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1450454045;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1467668243;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1467730834;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1467846264;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1470948126;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1476521730;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManager getPersistenceContext(String unitName, boolean extended);1478541798;Return a specified persistence context for the given unit name, as defined_through the "persistenceContexts" (or "extendedPersistenceContexts") map._@param unitName the name of the persistence unit_@param extended whether to obtain an extended persistence context_@return the corresponding EntityManager, or {@code null} if none found_@see #setPersistenceContexts_@see #setExtendedPersistenceContexts;protected EntityManager getPersistenceContext(String unitName, boolean extended) {_		Map<String, String> contexts = (extended ? this.extendedPersistenceContexts : this.persistenceContexts)__		if (contexts != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = contexts.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && contexts.size() == 1) {_				jndiName = contexts.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManager.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManager [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,context,for,the,given,unit,name,as,defined,through,the,persistence,contexts,or,extended,persistence,contexts,map,param,unit,name,the,name,of,the,persistence,unit,param,extended,whether,to,obtain,an,extended,persistence,context,return,the,corresponding,entity,manager,or,code,null,if,none,found,see,set,persistence,contexts,see,set,extended,persistence,contexts;protected,entity,manager,get,persistence,context,string,unit,name,boolean,extended,map,string,string,contexts,extended,this,extended,persistence,contexts,this,persistence,contexts,if,contexts,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,contexts,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,contexts,size,1,jndi,name,contexts,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1495868221;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496259743;Find an EntityManagerFactory with the given name in the current Spring_application context, falling back to a single default EntityManagerFactory_(if any) in case of no unit name specified._@param unitName the name of the persistence unit (may be {@code null} or empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findEntityManagerFactory(@Nullable String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory == null) {_			throw new IllegalStateException("ListableBeanFactory required for EntityManagerFactory bean lookup")__		}_		String unitNameForLookup = (unitName != null ? unitName : "")__		if ("".equals(unitNameForLookup)) {_			unitNameForLookup = this.defaultPersistenceUnitName__		}_		if (!"".equals(unitNameForLookup)) {_			return findNamedEntityManagerFactory(unitNameForLookup, requestingBeanName)__		}_		else {_			return findDefaultEntityManagerFactory(requestingBeanName)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,falling,back,to,a,single,default,entity,manager,factory,if,any,in,case,of,no,unit,name,specified,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,entity,manager,factory,nullable,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,null,throw,new,illegal,state,exception,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,if,equals,unit,name,for,lookup,return,find,named,entity,manager,factory,unit,name,for,lookup,requesting,bean,name,else,return,find,default,entity,manager,factory,requesting,bean,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496837955;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341397;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1497341594;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1498780456;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1520528267;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530174524;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1530188116;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1531945062;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1533562895;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName) 			throws NoSuchBeanDefinitionException;1535316501;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, @Nullable String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		Assert.state(this.beanFactory != null, "ListableBeanFactory required for EntityManagerFactory bean lookup")___		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (requestingBeanName != null && this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,nullable,string,requesting,bean,name,throws,no,such,bean,definition,exception,assert,state,this,bean,factory,null,listable,bean,factory,required,for,entity,manager,factory,bean,lookup,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,requesting,bean,name,null,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1328020251;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1350077659;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1355352386;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1356735495;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1357119239;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1362408075;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1364391983;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1368482696;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1382746898;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1382788991;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1387493371;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1408526091;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1411076742;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1414678534;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1416688499;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1417981895;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1419339720;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1426780215;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1447399860;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1450454045;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1467668243;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1467730834;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1467846264;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1470948126;Set whether the lookup occurs in a J2EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,j2ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1476521730;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1478541798;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1495868221;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1496259743;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1496837955;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1497341397;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1497341594;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1498780456;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1520528267;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1530174524;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1530188116;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1531945062;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1533562895;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setResourceRef(boolean resourceRef);1535316501;Set whether the lookup occurs in a Java EE container, i.e. if the prefix_"java:comp/env/" needs to be added if the JNDI name doesn't already_contain it. PersistenceAnnotationBeanPostProcessor's default is "true"._@see org.springframework.jndi.JndiLocatorSupport#setResourceRef;public void setResourceRef(boolean resourceRef) {_		this.resourceRef = resourceRef__	};set,whether,the,lookup,occurs,in,a,java,ee,container,i,e,if,the,prefix,java,comp,env,needs,to,be,added,if,the,jndi,name,doesn,t,already,contain,it,persistence,annotation,bean,post,processor,s,default,is,true,see,org,springframework,jndi,jndi,locator,support,set,resource,ref;public,void,set,resource,ref,boolean,resource,ref,this,resource,ref,resource,ref
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1328020251;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Transaction</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1350077659;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Transaction</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1355352386;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Transaction</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1356735495;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1357119239;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1362408075;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1364391983;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1368482696;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1382746898;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1382788991;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1387493371;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1408526091;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1411076742;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1414678534;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1416688499;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1417981895;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1419339720;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1426780215;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1447399860;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1450454045;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1467668243;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1467730834;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1467846264;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1470948126;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1476521730;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1478541798;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1495868221;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1496259743;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1496837955;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1497341397;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1497341594;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1498780456;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1520528267;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1530174524;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1530188116;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1531945062;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1533562895;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setPersistenceContexts(Map<String, String> persistenceContexts);1535316501;Specify the <i>transactional</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Transaction}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setPersistenceContexts(Map<String, String> persistenceContexts) {_		this.persistenceContexts = persistenceContexts__	};specify,the,i,transactional,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,transaction,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,persistence,contexts,map,string,string,persistence,contexts,this,persistence,contexts,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1328020251;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Extended</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1350077659;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Extended</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1355352386;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to <code>persistence-context-ref</code>_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type <code>Extended</code>._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,code,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,code,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1356735495;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1357119239;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1362408075;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1364391983;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1368482696;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1382746898;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1382788991;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1387493371;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1408526091;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1411076742;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE 5 environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE 5 server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,5,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,5,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1414678534;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1416688499;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1417981895;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1419339720;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1426780215;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1447399860;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1450454045;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1467668243;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1467730834;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1467846264;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1470948126;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1476521730;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1478541798;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1495868221;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1496259743;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1496837955;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1497341397;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1497341594;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1498780456;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1520528267;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1530174524;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1530188116;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1531945062;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1533562895;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts);1535316501;Specify the <i>extended</i> persistence contexts for EntityManager lookups,_as a Map from persistence unit name to persistence context JNDI name_(which needs to resolve to an EntityManager instance)._<p>JNDI names specified here should refer to {@code persistence-context-ref}_entries in the Java EE deployment descriptors, matching the target persistence unit_and being set up with persistence context type {@code Extended}._<p>In case of no unit name specified in the annotation, the specified value_for the {@link #setDefaultPersistenceUnitName default persistence unit}_will be taken (by default, the value mapped to the empty String),_or simply the single persistence unit if there is only one._<p>This is mainly intended for use in a Java EE environment, with all_lookup driven by the standard JPA annotations, and all EntityManager_references obtained from JNDI. No separate EntityManagerFactory bean_definitions are necessary in such a scenario, and all EntityManager_handling is done by the Java EE server itself.;public void setExtendedPersistenceContexts(Map<String, String> extendedPersistenceContexts) {_		this.extendedPersistenceContexts = extendedPersistenceContexts__	};specify,the,i,extended,i,persistence,contexts,for,entity,manager,lookups,as,a,map,from,persistence,unit,name,to,persistence,context,jndi,name,which,needs,to,resolve,to,an,entity,manager,instance,p,jndi,names,specified,here,should,refer,to,code,persistence,context,ref,entries,in,the,java,ee,deployment,descriptors,matching,the,target,persistence,unit,and,being,set,up,with,persistence,context,type,code,extended,p,in,case,of,no,unit,name,specified,in,the,annotation,the,specified,value,for,the,link,set,default,persistence,unit,name,default,persistence,unit,will,be,taken,by,default,the,value,mapped,to,the,empty,string,or,simply,the,single,persistence,unit,if,there,is,only,one,p,this,is,mainly,intended,for,use,in,a,java,ee,environment,with,all,lookup,driven,by,the,standard,jpa,annotations,and,all,entity,manager,references,obtained,from,jndi,no,separate,entity,manager,factory,bean,definitions,are,necessary,in,such,a,scenario,and,all,entity,manager,handling,is,done,by,the,java,ee,server,itself;public,void,set,extended,persistence,contexts,map,string,string,extended,persistence,contexts,this,extended,persistence,contexts,extended,persistence,contexts
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1328020251;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException{__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else {_			throw new NoSuchBeanDefinitionException(_					EntityManagerFactory.class, "expected single bean but found " + beanNames.length)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class,expected,single,bean,but,found,bean,names,length
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1350077659;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else {_			throw new NoSuchBeanDefinitionException(_					EntityManagerFactory.class, "expected single bean but found " + beanNames.length + ": " +_					StringUtils.arrayToCommaDelimitedString(beanNames))__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class,expected,single,bean,but,found,bean,names,length,string,utils,array,to,comma,delimited,string,bean,names
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1355352386;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else {_			throw new NoSuchBeanDefinitionException(_					EntityManagerFactory.class, "expected single bean but found " + beanNames.length + ": " +_					StringUtils.arrayToCommaDelimitedString(beanNames))__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class,expected,single,bean,but,found,bean,names,length,string,utils,array,to,comma,delimited,string,bean,names
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1356735495;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else {_			throw new NoSuchBeanDefinitionException(_					EntityManagerFactory.class, "expected single bean but found " + beanNames.length + ": " +_					StringUtils.arrayToCommaDelimitedString(beanNames))__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class,expected,single,bean,but,found,bean,names,length,string,utils,array,to,comma,delimited,string,bean,names
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1357119239;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else {_			throw new NoSuchBeanDefinitionException(_					EntityManagerFactory.class, "expected single bean but found " + beanNames.length + ": " +_					StringUtils.arrayToCommaDelimitedString(beanNames))__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class,expected,single,bean,but,found,bean,names,length,string,utils,array,to,comma,delimited,string,bean,names
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1362408075;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1364391983;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1368482696;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382746898;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382788991;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1387493371;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1408526091;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1411076742;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1414678534;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1416688499;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1417981895;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1419339720;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1426780215;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1447399860;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1450454045;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467668243;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467730834;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467846264;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		String[] beanNames =_				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, EntityManagerFactory.class)__		if (beanNames.length == 1) {_			String unitName = beanNames[0]__			EntityManagerFactory emf = (EntityManagerFactory) this.beanFactory.getBean(unitName)__			if (this.beanFactory instanceof ConfigurableBeanFactory) {_				((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__			}_			return emf__		}_		else if (beanNames.length > 1) {_			throw new NoUniqueBeanDefinitionException(EntityManagerFactory.class, beanNames)__		}_		else {_			throw new NoSuchBeanDefinitionException(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,string,bean,names,bean,factory,utils,bean,names,for,type,including,ancestors,this,bean,factory,entity,manager,factory,class,if,bean,names,length,1,string,unit,name,bean,names,0,entity,manager,factory,emf,entity,manager,factory,this,bean,factory,get,bean,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf,else,if,bean,names,length,1,throw,new,no,unique,bean,definition,exception,entity,manager,factory,class,bean,names,else,throw,new,no,such,bean,definition,exception,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1470948126;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1476521730;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1478541798;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1495868221;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496259743;Find a single default EntityManagerFactory in the Spring application context._@return the default EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no single EntityManagerFactory in the context;protected EntityManagerFactory findDefaultEntityManagerFactory(String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {_			_			ConfigurableListableBeanFactory clbf = (ConfigurableListableBeanFactory) this.beanFactory__			NamedBeanHolder<EntityManagerFactory> emfHolder = clbf.resolveNamedBean(EntityManagerFactory.class)__			clbf.registerDependentBean(emfHolder.getBeanName(), requestingBeanName)__			return emfHolder.getBeanInstance()__		}_		else {_			_			return this.beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,a,single,default,entity,manager,factory,in,the,spring,application,context,return,the,default,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,single,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,default,entity,manager,factory,string,requesting,bean,name,throws,no,such,bean,definition,exception,if,this,bean,factory,instanceof,configurable,listable,bean,factory,configurable,listable,bean,factory,clbf,configurable,listable,bean,factory,this,bean,factory,named,bean,holder,entity,manager,factory,emf,holder,clbf,resolve,named,bean,entity,manager,factory,class,clbf,register,dependent,bean,emf,holder,get,bean,name,requesting,bean,name,return,emf,holder,get,bean,instance,else,return,this,bean,factory,get,bean,entity,manager,factory,class
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1328020251;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1350077659;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1355352386;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1356735495;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1357119239;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1362408075;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1364391983;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1368482696;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1382746898;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1382788991;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1387493371;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1408526091;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1411076742;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1414678534;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1416688499;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1417981895;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1419339720;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1426780215;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1447399860;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1450454045;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1467668243;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1467730834;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1467846264;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1470948126;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1476521730;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1478541798;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1495868221;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1496259743;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1496837955;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1497341397;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1497341594;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1498780456;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1520528267;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1530174524;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1530188116;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1531945062;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1533562895;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setJndiTemplate(Object jndiTemplate);1535316501;Set the JNDI template to use for JNDI lookups._@see org.springframework.jndi.JndiAccessor#setJndiTemplate;public void setJndiTemplate(Object jndiTemplate) {_		this.jndiEnvironment = jndiTemplate__	};set,the,jndi,template,to,use,for,jndi,lookups,see,org,springframework,jndi,jndi,accessor,set,jndi,template;public,void,set,jndi,template,object,jndi,template,this,jndi,environment,jndi,template
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1328020251;Specify the default persistence unit name, to be used in case_of no unit name specified in an <code>@PersistenceUnit</code> /_<code>@PersistenceContext</code> annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,code,persistence,context,code,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1350077659;Specify the default persistence unit name, to be used in case_of no unit name specified in an <code>@PersistenceUnit</code> /_<code>@PersistenceContext</code> annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,code,persistence,context,code,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1355352386;Specify the default persistence unit name, to be used in case_of no unit name specified in an <code>@PersistenceUnit</code> /_<code>@PersistenceContext</code> annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,code,persistence,context,code,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1356735495;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1357119239;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1362408075;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1364391983;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1368482696;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1382746898;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1382788991;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1387493371;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1408526091;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1411076742;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1414678534;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1416688499;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1417981895;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1419339720;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1426780215;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1447399860;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1450454045;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1467668243;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1467730834;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1467846264;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1470948126;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1476521730;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> public void setDefaultPersistenceUnitName(String unitName);1478541798;Specify the default persistence unit name, to be used in case_of no unit name specified in an {@code @PersistenceUnit} /_{@code @PersistenceContext} annotation._<p>This is mainly intended for lookups in the application context,_indicating the target persistence unit name (typically matching_the bean name), but also applies to lookups in the_{@link #setPersistenceUnits "persistenceUnits"} /_{@link #setPersistenceContexts "persistenceContexts"} /_{@link #setExtendedPersistenceContexts "extendedPersistenceContexts"} map,_avoiding the need for duplicated mappings for the empty String there._<p>Default is to check for a single EntityManagerFactory bean_in the Spring application context, if any. If there are multiple_such factories, either specify this default persistence unit name_or explicitly refer to named persistence units in your annotations.;public void setDefaultPersistenceUnitName(String unitName) {_		this.defaultPersistenceUnitName = (unitName != null ? unitName : "")__	};specify,the,default,persistence,unit,name,to,be,used,in,case,of,no,unit,name,specified,in,an,code,persistence,unit,code,persistence,context,annotation,p,this,is,mainly,intended,for,lookups,in,the,application,context,indicating,the,target,persistence,unit,name,typically,matching,the,bean,name,but,also,applies,to,lookups,in,the,link,set,persistence,units,persistence,units,link,set,persistence,contexts,persistence,contexts,link,set,extended,persistence,contexts,extended,persistence,contexts,map,avoiding,the,need,for,duplicated,mappings,for,the,empty,string,there,p,default,is,to,check,for,a,single,entity,manager,factory,bean,in,the,spring,application,context,if,any,if,there,are,multiple,such,factories,either,specify,this,default,persistence,unit,name,or,explicitly,refer,to,named,persistence,units,in,your,annotations;public,void,set,default,persistence,unit,name,string,unit,name,this,default,persistence,unit,name,unit,name,null,unit,name
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1328020251;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1350077659;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1355352386;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1356735495;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1357119239;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1362408075;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1364391983;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1368482696;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382746898;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1382788991;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1387493371;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1408526091;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1411076742;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1414678534;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1416688499;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1417981895;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1419339720;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1426780215;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1447399860;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1450454045;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467668243;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467730834;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1467846264;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1470948126;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1476521730;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1478541798;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1495868221;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName) 			throws NoSuchBeanDefinitionException;1496259743;Find an EntityManagerFactory with the given name in the current_Spring application context._@param unitName the name of the persistence unit (never empty)_@param requestingBeanName the name of the requesting bean_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context;protected EntityManagerFactory findNamedEntityManagerFactory(String unitName, String requestingBeanName)_			throws NoSuchBeanDefinitionException {__		EntityManagerFactory emf = EntityManagerFactoryUtils.findEntityManagerFactory(this.beanFactory, unitName)__		if (this.beanFactory instanceof ConfigurableBeanFactory) {_			((ConfigurableBeanFactory) this.beanFactory).registerDependentBean(unitName, requestingBeanName)__		}_		return emf__	};find,an,entity,manager,factory,with,the,given,name,in,the,current,spring,application,context,param,unit,name,the,name,of,the,persistence,unit,never,empty,param,requesting,bean,name,the,name,of,the,requesting,bean,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context;protected,entity,manager,factory,find,named,entity,manager,factory,string,unit,name,string,requesting,bean,name,throws,no,such,bean,definition,exception,entity,manager,factory,emf,entity,manager,factory,utils,find,entity,manager,factory,this,bean,factory,unit,name,if,this,bean,factory,instanceof,configurable,bean,factory,configurable,bean,factory,this,bean,factory,register,dependent,bean,unit,name,requesting,bean,name,return,emf
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1328020251;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or <code>null</code> if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,code,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1350077659;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or <code>null</code> if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,code,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1355352386;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or <code>null</code> if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,code,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1356735495;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1357119239;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1362408075;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1364391983;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1368482696;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1382746898;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1382788991;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1387493371;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1408526091;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1411076742;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1414678534;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1416688499;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1417981895;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1419339720;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1426780215;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1447399860;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1450454045;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1467668243;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1467730834;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1467846264;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1470948126;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1476521730;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> protected EntityManagerFactory getPersistenceUnit(String unitName);1478541798;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;protected EntityManagerFactory getPersistenceUnit(String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;protected,entity,manager,factory,get,persistence,unit,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1496837955;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1497341397;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1497341594;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1498780456;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1520528267;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1530174524;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1530188116;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1531945062;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1533562895;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if ("".equals(unitNameForLookup)) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,equals,unit,name,for,lookup,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
PersistenceAnnotationBeanPostProcessor -> @Nullable 	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName);1535316501;Return a specified persistence unit for the given unit name,_as defined through the "persistenceUnits" map._@param unitName the name of the persistence unit_@return the corresponding EntityManagerFactory,_or {@code null} if none found_@see #setPersistenceUnits;@Nullable_	protected EntityManagerFactory getPersistenceUnit(@Nullable String unitName) {_		if (this.persistenceUnits != null) {_			String unitNameForLookup = (unitName != null ? unitName : "")__			if (unitNameForLookup.isEmpty()) {_				unitNameForLookup = this.defaultPersistenceUnitName__			}_			String jndiName = this.persistenceUnits.get(unitNameForLookup)__			if (jndiName == null && "".equals(unitNameForLookup) && this.persistenceUnits.size() == 1) {_				jndiName = this.persistenceUnits.values().iterator().next()__			}_			if (jndiName != null) {_				try {_					return lookup(jndiName, EntityManagerFactory.class)__				}_				catch (Exception ex) {_					throw new IllegalStateException("Could not obtain EntityManagerFactory [" + jndiName + "] from JNDI", ex)__				}_			}_		}_		return null__	};return,a,specified,persistence,unit,for,the,given,unit,name,as,defined,through,the,persistence,units,map,param,unit,name,the,name,of,the,persistence,unit,return,the,corresponding,entity,manager,factory,or,code,null,if,none,found,see,set,persistence,units;nullable,protected,entity,manager,factory,get,persistence,unit,nullable,string,unit,name,if,this,persistence,units,null,string,unit,name,for,lookup,unit,name,null,unit,name,if,unit,name,for,lookup,is,empty,unit,name,for,lookup,this,default,persistence,unit,name,string,jndi,name,this,persistence,units,get,unit,name,for,lookup,if,jndi,name,null,equals,unit,name,for,lookup,this,persistence,units,size,1,jndi,name,this,persistence,units,values,iterator,next,if,jndi,name,null,try,return,lookup,jndi,name,entity,manager,factory,class,catch,exception,ex,throw,new,illegal,state,exception,could,not,obtain,entity,manager,factory,jndi,name,from,jndi,ex,return,null
