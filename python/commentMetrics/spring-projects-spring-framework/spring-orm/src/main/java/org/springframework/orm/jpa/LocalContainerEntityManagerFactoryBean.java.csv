# id;timestamp;commentText;codeText;commentWords;codeWords
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1328020251;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. <code>persistence.xml</code> location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,code,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1329142650;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. <code>persistence.xml</code> location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,code,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1351648399;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. <code>persistence.xml</code> location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,code,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1356735495;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1357119239;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1364559513;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1368482696;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1375458214;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1390313076;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1390691471;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1404056186;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1414678671;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1447323728;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1450534426;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1467677340;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1471448458;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1471464767;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1471508221;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1496259743;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1496837955;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1497341594;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1498780456;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1500495740;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1502974979;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1510341663;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1530174524;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager);1532091916;Set the PersistenceUnitManager to use for obtaining the JPA persistence unit_that this FactoryBean is supposed to build an EntityManagerFactory for._<p>The default is to rely on the local settings specified on this FactoryBean,_such as "persistenceXmlLocation", "dataSource" and "loadTimeWeaver"._<p>For reuse of existing persistence unit configuration or more advanced forms_of custom persistence unit handling, consider defining a separate_PersistenceUnitManager bean (typically a DefaultPersistenceUnitManager instance)_and linking it in here. {@code persistence.xml} location, DataSource_configuration and LoadTimeWeaver will be defined on that separate_DefaultPersistenceUnitManager bean in such a scenario._@see #setPersistenceXmlLocation_@see #setDataSource_@see #setLoadTimeWeaver_@see org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager;public void setPersistenceUnitManager(PersistenceUnitManager persistenceUnitManager) {_		this.persistenceUnitManager = persistenceUnitManager__	};set,the,persistence,unit,manager,to,use,for,obtaining,the,jpa,persistence,unit,that,this,factory,bean,is,supposed,to,build,an,entity,manager,factory,for,p,the,default,is,to,rely,on,the,local,settings,specified,on,this,factory,bean,such,as,persistence,xml,location,data,source,and,load,time,weaver,p,for,reuse,of,existing,persistence,unit,configuration,or,more,advanced,forms,of,custom,persistence,unit,handling,consider,defining,a,separate,persistence,unit,manager,bean,typically,a,default,persistence,unit,manager,instance,and,linking,it,in,here,code,persistence,xml,location,data,source,configuration,and,load,time,weaver,will,be,defined,on,that,separate,default,persistence,unit,manager,bean,in,such,a,scenario,see,set,persistence,xml,location,see,set,data,source,see,set,load,time,weaver,see,org,springframework,orm,jpa,persistenceunit,default,persistence,unit,manager;public,void,set,persistence,unit,manager,persistence,unit,manager,persistence,unit,manager,this,persistence,unit,manager,persistence,unit,manager
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1328020251;Set the location of the <code>persistence.xml</code> file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the <code>persistence.xml</code> file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,code,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,code,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1329142650;Set the location of the <code>persistence.xml</code> file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the <code>persistence.xml</code> file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,code,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,code,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1351648399;Set the location of the <code>persistence.xml</code> file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the <code>persistence.xml</code> file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,code,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,code,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1356735495;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1357119239;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1364559513;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1368482696;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1375458214;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1390313076;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1390691471;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1404056186;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1414678671;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1447323728;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1450534426;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1467677340;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1471448458;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1471464767;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1471508221;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1496259743;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1496837955;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1497341594;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1498780456;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1500495740;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1502974979;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1510341663;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1530174524;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceXmlLocation(String persistenceXmlLocation);1532091916;Set the location of the {@code persistence.xml} file_we want to use. This is a Spring resource location._<p>Default is "classpath:META-INF/persistence.xml"._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param persistenceXmlLocation a Spring resource String_identifying the location of the {@code persistence.xml} file_that this LocalContainerEntityManagerFactoryBean should parse_@see #setPersistenceUnitManager;public void setPersistenceXmlLocation(String persistenceXmlLocation) {_		this.internalPersistenceUnitManager.setPersistenceXmlLocation(persistenceXmlLocation)__	};set,the,location,of,the,code,persistence,xml,file,we,want,to,use,this,is,a,spring,resource,location,p,default,is,classpath,meta,inf,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,persistence,xml,location,a,spring,resource,string,identifying,the,location,of,the,code,persistence,xml,file,that,this,local,container,entity,manager,factory,bean,should,parse,see,set,persistence,unit,manager;public,void,set,persistence,xml,location,string,persistence,xml,location,this,internal,persistence,unit,manager,set,persistence,xml,location,persistence,xml,location
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1375458214;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1390313076;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1390691471;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1404056186;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1414678671;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1447323728;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1450534426;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1467677340;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1471448458;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1471464767;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1471508221;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1496259743;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1496837955;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1497341594;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1498780456;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1500495740;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1502974979;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1510341663;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1530174524;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> public void setValidationMode(ValidationMode validationMode);1532091916;Specify the JPA 2.0 validation mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getValidationMode()_@see #setPersistenceUnitManager;public void setValidationMode(ValidationMode validationMode) {_		this.internalPersistenceUnitManager.setValidationMode(validationMode)__	};specify,the,jpa,2,0,validation,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,validation,mode,see,set,persistence,unit,manager;public,void,set,validation,mode,validation,mode,validation,mode,this,internal,persistence,unit,manager,set,validation,mode,validation,mode
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(@Nullable String persistenceUnitName);1500495740;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		if (persistenceUnitName != null) {_			this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__		}_	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,if,persistence,unit,name,null,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(@Nullable String persistenceUnitName);1502974979;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		if (persistenceUnitName != null) {_			this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__		}_	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,if,persistence,unit,name,null,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(@Nullable String persistenceUnitName);1510341663;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		if (persistenceUnitName != null) {_			this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__		}_	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,if,persistence,unit,name,null,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530174524;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		if (persistenceUnitName != null) {_			this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__		}_	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,if,persistence,unit,name,null,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(@Nullable String persistenceUnitName);1532091916;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		if (persistenceUnitName != null) {_			this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__		}_	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,if,persistence,unit,name,null,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1328020251;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_<code>persistence.xml</code>, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1329142650;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_<code>persistence.xml</code>, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1351648399;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_<code>persistence.xml</code>, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,code,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1356735495;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1357119239;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1364559513;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1368482696;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1375458214;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1390313076;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1390691471;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1404056186;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1414678671;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1447323728;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1450534426;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1467677340;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1471448458;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1471464767;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1471508221;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1496259743;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1496837955;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1497341594;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1498780456;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1500495740;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1502974979;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1510341663;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1530174524;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager);1532091916;Determine the PersistenceUnitInfo to use for the EntityManagerFactory_created by this bean._<p>The default implementation reads in all persistence unit infos from_{@code persistence.xml}, as defined in the JPA specification._If no entity manager name was specified, it takes the first info in the_array as returned by the reader. Otherwise, it checks for a matching name._@param persistenceUnitManager the PersistenceUnitManager to obtain from_@return the chosen PersistenceUnitInfo;protected PersistenceUnitInfo determinePersistenceUnitInfo(PersistenceUnitManager persistenceUnitManager) {_		if (getPersistenceUnitName() != null) {_			return persistenceUnitManager.obtainPersistenceUnitInfo(getPersistenceUnitName())__		}_		else {_			return persistenceUnitManager.obtainDefaultPersistenceUnitInfo()__		}_	};determine,the,persistence,unit,info,to,use,for,the,entity,manager,factory,created,by,this,bean,p,the,default,implementation,reads,in,all,persistence,unit,infos,from,code,persistence,xml,as,defined,in,the,jpa,specification,if,no,entity,manager,name,was,specified,it,takes,the,first,info,in,the,array,as,returned,by,the,reader,otherwise,it,checks,for,a,matching,name,param,persistence,unit,manager,the,persistence,unit,manager,to,obtain,from,return,the,chosen,persistence,unit,info;protected,persistence,unit,info,determine,persistence,unit,info,persistence,unit,manager,persistence,unit,manager,if,get,persistence,unit,name,null,return,persistence,unit,manager,obtain,persistence,unit,info,get,persistence,unit,name,else,return,persistence,unit,manager,obtain,default,persistence,unit,info
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1356735495;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1368482696;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1375458214;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1390313076;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1390691471;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1404056186;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1414678671;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1447323728;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1450534426;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1467677340;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1471448458;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1471464767;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1471508221;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1496259743;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1496837955;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1497341594;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1498780456;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1500495740;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1502974979;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1510341663;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1530174524;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE:</b> Only applied if no external PersistenceUnitManager specified._Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,b,only,applied,if,no,external,persistence,unit,manager,specified,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1532091916;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean._Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE:</b> Only applied if no external PersistenceUnitManager specified._Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver;@Override_	public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,b,only,applied,if,no,external,persistence,unit,manager,specified,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver;override,public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1329142650;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1351648399;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1356735495;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1357119239;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1364559513;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1368482696;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1375458214;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1390313076;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1390691471;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1404056186;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1414678671;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1447323728;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1450534426;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1467677340;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1471448458;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1471464767;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1471508221;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1496259743;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1496837955;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1497341594;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> @Override 	public void setPersistenceUnitName(String persistenceUnitName);1498780456;Uses the specified persistence unit name as the name of the default_persistence unit, if applicable._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitName;@Override_	public void setPersistenceUnitName(String persistenceUnitName) {_		super.setPersistenceUnitName(persistenceUnitName)__		this.internalPersistenceUnitManager.setDefaultPersistenceUnitName(persistenceUnitName)__	};uses,the,specified,persistence,unit,name,as,the,name,of,the,default,persistence,unit,if,applicable,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,default,persistence,unit,manager,set,default,persistence,unit,name;override,public,void,set,persistence,unit,name,string,persistence,unit,name,super,set,persistence,unit,name,persistence,unit,name,this,internal,persistence,unit,manager,set,default,persistence,unit,name,persistence,unit,name
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1328020251;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1329142650;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1351648399;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with <code>persistence.xml</code>_markers in them. In case of Spring-based scanning, no <code>persistence.xml</code>_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,code,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,code,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1356735495;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1357119239;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1364559513;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1368482696;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1375458214;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1390313076;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1390691471;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1404056186;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1414678671;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1447323728;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1450534426;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1467677340;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1471448458;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1471464767;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1471508221;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1496259743;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1496837955;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1497341594;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1498780456;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1500495740;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1502974979;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1510341663;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,p,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1530174524;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPackagesToScan(String... packagesToScan);1532091916;Set whether to use Spring-based scanning for entity classes in the classpath_instead of using JPA's standard scanning of jar files with {@code persistence.xml}_markers in them. In case of Spring-based scanning, no {@code persistence.xml}_is necessary_ all you need to do is to specify base packages to search here._<p>Default is none. Specify packages to search for autodetection of your entity_classes in the classpath. This is analogous to Spring's component-scan feature_({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner})._<p><b>Note: There may be limitations in comparison to regular JPA scanning.</b>_In particular, JPA providers may pick up annotated packages for provider-specific_annotations only when driven by {@code persistence.xml}. As of 4.1, Spring's_scan can detect annotated packages as well if supported by the given_{@link JpaVendorAdapter} (e.g. for Hibernate)._<p>If no explicit {@link #setMappingResources mapping resources} have been_specified in addition to these packages, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@param packagesToScan one or more base packages to search, analogous to_Spring's component-scan configuration for regular Spring components_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setPackagesToScan;public void setPackagesToScan(String... packagesToScan) {_		this.internalPersistenceUnitManager.setPackagesToScan(packagesToScan)__	};set,whether,to,use,spring,based,scanning,for,entity,classes,in,the,classpath,instead,of,using,jpa,s,standard,scanning,of,jar,files,with,code,persistence,xml,markers,in,them,in,case,of,spring,based,scanning,no,code,persistence,xml,is,necessary,all,you,need,to,do,is,to,specify,base,packages,to,search,here,p,default,is,none,specify,packages,to,search,for,autodetection,of,your,entity,classes,in,the,classpath,this,is,analogous,to,spring,s,component,scan,feature,link,org,springframework,context,annotation,class,path,bean,definition,scanner,p,b,note,there,may,be,limitations,in,comparison,to,regular,jpa,scanning,b,in,particular,jpa,providers,may,pick,up,annotated,packages,for,provider,specific,annotations,only,when,driven,by,code,persistence,xml,as,of,4,1,spring,s,scan,can,detect,annotated,packages,as,well,if,supported,by,the,given,link,jpa,vendor,adapter,e,g,for,hibernate,p,if,no,explicit,link,set,mapping,resources,mapping,resources,have,been,specified,in,addition,to,these,packages,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,param,packages,to,scan,one,or,more,base,packages,to,search,analogous,to,spring,s,component,scan,configuration,for,regular,spring,components,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,packages,to,scan;public,void,set,packages,to,scan,string,packages,to,scan,this,internal,persistence,unit,manager,set,packages,to,scan,packages,to,scan
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1328020251;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read in from_<code>persistence.xml</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,in,from,code,persistence,xml,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1329142650;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read in from_<code>persistence.xml</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,in,from,code,persistence,xml,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1351648399;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_<code>persistence.xml</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1356735495;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1357119239;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1364559513;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1368482696;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1375458214;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1390313076;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1390691471;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1404056186;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1414678671;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1447323728;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1450534426;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1467677340;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1471448458;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1471464767;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1471508221;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1496259743;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1496837955;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1497341594;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1498780456;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1500495740;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1502974979;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1510341663;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1530174524;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors);1532091916;Set the PersistenceUnitPostProcessors to be applied to the_PersistenceUnitInfo used for creating this EntityManagerFactory._<p>Such post-processors can, for example, register further entity_classes and jar files, in addition to the metadata read from_{@code persistence.xml}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setPersistenceUnitPostProcessors(PersistenceUnitPostProcessor... postProcessors) {_		this.internalPersistenceUnitManager.setPersistenceUnitPostProcessors(postProcessors)__	};set,the,persistence,unit,post,processors,to,be,applied,to,the,persistence,unit,info,used,for,creating,this,entity,manager,factory,p,such,post,processors,can,for,example,register,further,entity,classes,and,jar,files,in,addition,to,the,metadata,read,from,code,persistence,xml,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,persistence,unit,post,processors,persistence,unit,post,processor,post,processors,this,internal,persistence,unit,manager,set,persistence,unit,post,processors,post,processors
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1351648399;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in <code>persistence.xml</code>, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in <code>persistence.xml</code> (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,code,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,code,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1356735495;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1357119239;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1364559513;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1368482696;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1375458214;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1390313076;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1390691471;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1404056186;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1414678671;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1447323728;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1450534426;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1467677340;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1471448458;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1471464767;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1471508221;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1496259743;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1496837955;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1497341594;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1498780456;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1500495740;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1502974979;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1510341663;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1530174524;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setJtaDataSource(DataSource jtaDataSource);1532091916;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "jtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getJtaDataSource()_@see #setPersistenceUnitManager;public void setJtaDataSource(DataSource jtaDataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(jtaDataSource))__		this.internalPersistenceUnitManager.setDefaultJtaDataSource(jtaDataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,jta,data,source,see,set,persistence,unit,manager;public,void,set,jta,data,source,data,source,jta,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,jta,data,source,this,internal,persistence,unit,manager,set,default,jta,data,source,jta,data,source
LocalContainerEntityManagerFactoryBean -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1328020251;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1329142650;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1351648399;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the <code>context:load-time-weaver</code> XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,code,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1357119239;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver);1364559513;Specify the Spring LoadTimeWeaver to use for class instrumentation according_to the JPA class transformer contract._<p>It is a not required to specify a LoadTimeWeaver: Most providers will be_able to provide a subset of their functionality without class instrumentation_as well, or operate with their VM agent specified on JVM startup._<p>In terms of Spring-provided weaving options, the most important ones are_InstrumentationLoadTimeWeaver, which requires a Spring-specific (but very general)_VM agent specified on JVM startup, and ReflectiveLoadTimeWeaver, which interacts_with an underlying ClassLoader based on specific extended methods being available_on it (for example, interacting with Spring's TomcatInstrumentableClassLoader)._<p><b>NOTE:</b> As of Spring 2.5, the context's default LoadTimeWeaver (defined_as bean with name "loadTimeWeaver") will be picked up automatically, if available,_removing the need for LoadTimeWeaver configuration on each affected target bean.</b>_Consider using the {@code context:load-time-weaver} XML tag for creating_such a shared LoadTimeWeaver (autodetecting the environment by default)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_Otherwise, the external {@link #setPersistenceUnitManager PersistenceUnitManager}_is responsible for the weaving configuration._@see org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver_@see org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver_@see org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader;public void setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver) {_		this.internalPersistenceUnitManager.setLoadTimeWeaver(loadTimeWeaver)__	};specify,the,spring,load,time,weaver,to,use,for,class,instrumentation,according,to,the,jpa,class,transformer,contract,p,it,is,a,not,required,to,specify,a,load,time,weaver,most,providers,will,be,able,to,provide,a,subset,of,their,functionality,without,class,instrumentation,as,well,or,operate,with,their,vm,agent,specified,on,jvm,startup,p,in,terms,of,spring,provided,weaving,options,the,most,important,ones,are,instrumentation,load,time,weaver,which,requires,a,spring,specific,but,very,general,vm,agent,specified,on,jvm,startup,and,reflective,load,time,weaver,which,interacts,with,an,underlying,class,loader,based,on,specific,extended,methods,being,available,on,it,for,example,interacting,with,spring,s,tomcat,instrumentable,class,loader,p,b,note,b,as,of,spring,2,5,the,context,s,default,load,time,weaver,defined,as,bean,with,name,load,time,weaver,will,be,picked,up,automatically,if,available,removing,the,need,for,load,time,weaver,configuration,on,each,affected,target,bean,b,consider,using,the,code,context,load,time,weaver,xml,tag,for,creating,such,a,shared,load,time,weaver,autodetecting,the,environment,by,default,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,otherwise,the,external,link,set,persistence,unit,manager,persistence,unit,manager,is,responsible,for,the,weaving,configuration,see,org,springframework,instrument,classloading,instrumentation,load,time,weaver,see,org,springframework,instrument,classloading,reflective,load,time,weaver,see,org,springframework,instrument,classloading,tomcat,tomcat,instrumentable,class,loader;public,void,set,load,time,weaver,load,time,weaver,load,time,weaver,this,internal,persistence,unit,manager,set,load,time,weaver,load,time,weaver
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1328020251;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1329142650;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1351648399;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1356735495;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1357119239;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1364559513;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1368482696;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1375458214;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1390313076;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1390691471;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1404056186;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1414678671;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1447323728;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1450534426;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1467677340;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1471448458;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1471464767;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1471508221;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1496259743;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1496837955;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1497341594;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1498780456;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1500495740;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1502974979;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1510341663;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1530174524;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui);1532091916;Hook method allowing subclasses to customize the EntityManagerFactory_after its creation via the PersistenceProvider._<p>The default implementation is empty._@param emf the newly created EntityManagerFactory we are working with_@param pui the PersistenceUnitInfo used to configure the EntityManagerFactory_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory;protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {_	};hook,method,allowing,subclasses,to,customize,the,entity,manager,factory,after,its,creation,via,the,persistence,provider,p,the,default,implementation,is,empty,param,emf,the,newly,created,entity,manager,factory,we,are,working,with,param,pui,the,persistence,unit,info,used,to,configure,the,entity,manager,factory,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory;protected,void,post,process,entity,manager,factory,entity,manager,factory,emf,persistence,unit,info,pui
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1375458214;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1390313076;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1390691471;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1404056186;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1414678671;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1447323728;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1450534426;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1467677340;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1471448458;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1471464767;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1471508221;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1496259743;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1496837955;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1497341594;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1498780456;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1500495740;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1502974979;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1510341663;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1530174524;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setSharedCacheMode(SharedCacheMode sharedCacheMode);1532091916;Specify the JPA 2.0 shared cache mode for this persistence unit,_overriding a value in {@code persistence.xml} if set._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.0_@see javax.persistence.spi.PersistenceUnitInfo#getSharedCacheMode()_@see #setPersistenceUnitManager;public void setSharedCacheMode(SharedCacheMode sharedCacheMode) {_		this.internalPersistenceUnitManager.setSharedCacheMode(sharedCacheMode)__	};specify,the,jpa,2,0,shared,cache,mode,for,this,persistence,unit,overriding,a,value,in,code,persistence,xml,if,set,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,0,see,javax,persistence,spi,persistence,unit,info,get,shared,cache,mode,see,set,persistence,unit,manager;public,void,set,shared,cache,mode,shared,cache,mode,shared,cache,mode,this,internal,persistence,unit,manager,set,shared,cache,mode,shared,cache,mode
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1328020251;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1329142650;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1351648399;Specify one or more mapping resources (equivalent to <code>&lt_mapping-file&gt_</code>_entries in <code>persistence.xml</code>) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding <code>persistence.xml</code>._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through <code>ClassLoader.getResource</code>._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,code,entries,in,code,persistence,xml,code,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,code,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,code,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1356735495;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1357119239;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1364559513;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1368482696;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1375458214;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1390313076;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1390691471;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1404056186;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1414678671;Specify one or more mapping resources (equivalent to {@code &lt_mapping-file&gt_}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,lt,mapping,file,gt,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1447323728;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1450534426;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1467677340;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1471448458;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1471464767;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1471508221;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1496259743;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1496837955;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1497341594;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1498780456;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1500495740;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1502974979;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1510341663;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1530174524;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setMappingResources(String... mappingResources);1532091916;Specify one or more mapping resources (equivalent to {@code <mapping-file>}_entries in {@code persistence.xml}) for the default persistence unit._Can be used on its own or in combination with entity scanning in the classpath,_in both cases avoiding {@code persistence.xml}._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._<p>If no explicit mapping resources have been specified next to_{@link #setPackagesToScan packages to scan}, Spring's setup looks for a default_{@code META-INF/orm.xml} file in the classpath, registering it as a mapping_resource for the default unit if the mapping file is not co-located with a_{@code persistence.xml} file (in which case we assume it is only meant to be_used with the persistence units defined there, like in standard JPA)._<p>Note that specifying an empty array/list here suppresses the default_{@code META-INF/orm.xml} check. On the other hand, explicitly specifying_{@code META-INF/orm.xml} here will register that file even if it happens_to be co-located with a {@code persistence.xml} file._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see #setPersistenceUnitManager_@see DefaultPersistenceUnitManager#setMappingResources;public void setMappingResources(String... mappingResources) {_		this.internalPersistenceUnitManager.setMappingResources(mappingResources)__	};specify,one,or,more,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,default,persistence,unit,can,be,used,on,its,own,or,in,combination,with,entity,scanning,in,the,classpath,in,both,cases,avoiding,code,persistence,xml,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,p,if,no,explicit,mapping,resources,have,been,specified,next,to,link,set,packages,to,scan,packages,to,scan,spring,s,setup,looks,for,a,default,code,meta,inf,orm,xml,file,in,the,classpath,registering,it,as,a,mapping,resource,for,the,default,unit,if,the,mapping,file,is,not,co,located,with,a,code,persistence,xml,file,in,which,case,we,assume,it,is,only,meant,to,be,used,with,the,persistence,units,defined,there,like,in,standard,jpa,p,note,that,specifying,an,empty,array,list,here,suppresses,the,default,code,meta,inf,orm,xml,check,on,the,other,hand,explicitly,specifying,code,meta,inf,orm,xml,here,will,register,that,file,even,if,it,happens,to,be,co,located,with,a,code,persistence,xml,file,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,set,persistence,unit,manager,see,default,persistence,unit,manager,set,mapping,resources;public,void,set,mapping,resources,string,mapping,resources,this,internal,persistence,unit,manager,set,mapping,resources,mapping,resources
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1328020251;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in <code>persistence.xml</code>, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, overriding_data source configuration in <code>persistence.xml</code> (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,code,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,overriding,data,source,configuration,in,code,persistence,xml,code,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1329142650;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in <code>persistence.xml</code>, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, overriding_data source configuration in <code>persistence.xml</code> (if any)._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,code,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,overriding,data,source,configuration,in,code,persistence,xml,code,if,any,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1351648399;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in <code>persistence.xml</code>, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in <code>persistence.xml</code> (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,code,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,code,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1356735495;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1357119239;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1364559513;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1368482696;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1375458214;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1390313076;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1390691471;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1404056186;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1414678671;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1447323728;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1450534426;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1467677340;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1471448458;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1471464767;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1471508221;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1496259743;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1496837955;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1497341594;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1498780456;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1500495740;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1502974979;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1510341663;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1530174524;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setDataSource(DataSource dataSource);1532091916;Specify the JDBC DataSource that the JPA persistence provider is supposed_to use for accessing the database. This is an alternative to keeping the_JDBC configuration in {@code persistence.xml}, passing in a Spring-managed_DataSource instead._<p>In JPA speak, a DataSource passed in here will be used as "nonJtaDataSource"_on the PersistenceUnitInfo passed to the PersistenceProvider, as well as_overriding data source configuration in {@code persistence.xml} (if any)._Note that this variant typically works for JTA transaction management as well__if it does not, consider using the explicit {@link #setJtaDataSource} instead._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@see javax.persistence.spi.PersistenceUnitInfo#getNonJtaDataSource()_@see #setPersistenceUnitManager;public void setDataSource(DataSource dataSource) {_		this.internalPersistenceUnitManager.setDataSourceLookup(new SingleDataSourceLookup(dataSource))__		this.internalPersistenceUnitManager.setDefaultDataSource(dataSource)__	};specify,the,jdbc,data,source,that,the,jpa,persistence,provider,is,supposed,to,use,for,accessing,the,database,this,is,an,alternative,to,keeping,the,jdbc,configuration,in,code,persistence,xml,passing,in,a,spring,managed,data,source,instead,p,in,jpa,speak,a,data,source,passed,in,here,will,be,used,as,non,jta,data,source,on,the,persistence,unit,info,passed,to,the,persistence,provider,as,well,as,overriding,data,source,configuration,in,code,persistence,xml,if,any,note,that,this,variant,typically,works,for,jta,transaction,management,as,well,if,it,does,not,consider,using,the,explicit,link,set,jta,data,source,instead,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,see,javax,persistence,spi,persistence,unit,info,get,non,jta,data,source,see,set,persistence,unit,manager;public,void,set,data,source,data,source,data,source,this,internal,persistence,unit,manager,set,data,source,lookup,new,single,data,source,lookup,data,source,this,internal,persistence,unit,manager,set,default,data,source,data,source
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1471464767;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1471508221;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1496259743;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1496837955;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1497341594;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1498780456;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1500495740;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1502974979;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1510341663;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1530174524;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
LocalContainerEntityManagerFactoryBean -> public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation);1532091916;Set a persistence unit root location for the default persistence unit._<p>Default is "classpath:", that is, the root of the current classpath_(nearest root directory). To be overridden if unit-specific resolution_does not work and the classpath root is not appropriate either._<p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>_@since 4.3.3_@see DefaultPersistenceUnitManager#setDefaultPersistenceUnitRootLocation;public void setPersistenceUnitRootLocation(String defaultPersistenceUnitRootLocation) {_		this.internalPersistenceUnitManager.setDefaultPersistenceUnitRootLocation(defaultPersistenceUnitRootLocation)__	};set,a,persistence,unit,root,location,for,the,default,persistence,unit,p,default,is,classpath,that,is,the,root,of,the,current,classpath,nearest,root,directory,to,be,overridden,if,unit,specific,resolution,does,not,work,and,the,classpath,root,is,not,appropriate,either,p,b,note,only,applied,if,no,external,persistence,unit,manager,specified,b,since,4,3,3,see,default,persistence,unit,manager,set,default,persistence,unit,root,location;public,void,set,persistence,unit,root,location,string,default,persistence,unit,root,location,this,internal,persistence,unit,manager,set,default,persistence,unit,root,location,default,persistence,unit,root,location
