# id;timestamp;commentText;codeText;commentWords;codeWords
JpaDialect -> boolean supportsEntityManagerPlusOperations()_;1328020251;Return whether the EntityManagerPlus(Operations) interface is_supported by this provider._@see EntityManagerPlusOperations_@see EntityManagerPlus;boolean supportsEntityManagerPlusOperations()_;return,whether,the,entity,manager,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,plus,operations,see,entity,manager,plus;boolean,supports,entity,manager,plus,operations
JpaDialect -> boolean supportsEntityManagerPlusOperations()_;1356735495;Return whether the EntityManagerPlus(Operations) interface is_supported by this provider._@see EntityManagerPlusOperations_@see EntityManagerPlus;boolean supportsEntityManagerPlusOperations()_;return,whether,the,entity,manager,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,plus,operations,see,entity,manager,plus;boolean,supports,entity,manager,plus,operations
JpaDialect -> boolean supportsEntityManagerPlusOperations()_;1364391983;Return whether the EntityManagerPlus(Operations) interface is_supported by this provider._@see EntityManagerPlusOperations_@see EntityManagerPlus;boolean supportsEntityManagerPlusOperations()_;return,whether,the,entity,manager,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,plus,operations,see,entity,manager,plus;boolean,supports,entity,manager,plus,operations
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1328020251;Release the given JDBC Connection, which has originally been retrieved_via <code>getJdbcConnection</code>. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by <code>getJdbcConnection</code> will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,code,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,code,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1356735495;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1364391983;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1364559513;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1414619099;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1471508221;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1487178248;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1495868221;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager) 			throws PersistenceException, SQLException_;1496837955;Release the given JDBC Connection, which has originally been retrieved_via {@code getJdbcConnection}. This should be invoked in any case,_to allow for proper release of the retrieved Connection handle._<p>An implementation might simply do nothing, if the Connection returned_by {@code getJdbcConnection} will be implicitly closed when the JPA_transaction completes or when the EntityManager is closed._@param conHandle the JDBC Connection handle to release_@param entityManager the current JPA EntityManager_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #getJdbcConnection;void releaseJdbcConnection(ConnectionHandle conHandle, EntityManager entityManager)_			throws PersistenceException, SQLException_;release,the,given,jdbc,connection,which,has,originally,been,retrieved,via,code,get,jdbc,connection,this,should,be,invoked,in,any,case,to,allow,for,proper,release,of,the,retrieved,connection,handle,p,an,implementation,might,simply,do,nothing,if,the,connection,returned,by,code,get,jdbc,connection,will,be,implicitly,closed,when,the,jpa,transaction,completes,or,when,the,entity,manager,is,closed,param,con,handle,the,jdbc,connection,handle,to,release,param,entity,manager,the,current,jpa,entity,manager,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,get,jdbc,connection;void,release,jdbc,connection,connection,handle,con,handle,entity,manager,entity,manager,throws,persistence,exception,sqlexception
JpaDialect -> boolean supportsEntityManagerFactoryPlusOperations()_;1328020251;Return whether the EntityManagerFactoryPlus(Operations) interface is_supported by this provider._@see EntityManagerFactoryPlusOperations_@see EntityManagerFactoryPlus;boolean supportsEntityManagerFactoryPlusOperations()_;return,whether,the,entity,manager,factory,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,factory,plus,operations,see,entity,manager,factory,plus;boolean,supports,entity,manager,factory,plus,operations
JpaDialect -> boolean supportsEntityManagerFactoryPlusOperations()_;1356735495;Return whether the EntityManagerFactoryPlus(Operations) interface is_supported by this provider._@see EntityManagerFactoryPlusOperations_@see EntityManagerFactoryPlus;boolean supportsEntityManagerFactoryPlusOperations()_;return,whether,the,entity,manager,factory,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,factory,plus,operations,see,entity,manager,factory,plus;boolean,supports,entity,manager,factory,plus,operations
JpaDialect -> boolean supportsEntityManagerFactoryPlusOperations()_;1364391983;Return whether the EntityManagerFactoryPlus(Operations) interface is_supported by this provider._@see EntityManagerFactoryPlusOperations_@see EntityManagerFactoryPlus;boolean supportsEntityManagerFactoryPlusOperations()_;return,whether,the,entity,manager,factory,plus,operations,interface,is,supported,by,this,provider,see,entity,manager,factory,plus,operations,see,entity,manager,factory,plus;boolean,supports,entity,manager,factory,plus,operations
JpaDialect -> void cleanupTransaction(@Nullable Object transactionData)_;1495868221;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(@Nullable Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,nullable,object,transaction,data
JpaDialect -> void cleanupTransaction(@Nullable Object transactionData)_;1496837955;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(@Nullable Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,nullable,object,transaction,data
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1328020251;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke <code>begin</code>, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in <code>cleanupTransaction</code>._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,code,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,code,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1356735495;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1364391983;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1364559513;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1414619099;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1471508221;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1487178248;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1328020251;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the <code>releaseJdbcConnection</code> method when not needed anymore._<p>This strategy is necessary as JPA 1.0 does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in <code>releaseJdbcConnection</code>,_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the JDBC Connection, to be passed into_<code>releaseJdbcConnection</code>, or <code>null</code>_if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,code,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,1,0,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,code,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,jdbc,connection,to,be,passed,into,code,release,jdbc,connection,code,or,code,null,code,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1356735495;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA 1.0 does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the JDBC Connection, to be passed into_{@code releaseJdbcConnection}, or {@code null}_if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,1,0,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,jdbc,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1364391983;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA 1.0 does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the JDBC Connection, to be passed into_{@code releaseJdbcConnection}, or {@code null}_if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,1,0,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,jdbc,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1364559513;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the JDBC Connection, to be passed into_{@code releaseJdbcConnection}, or {@code null}_if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,jdbc,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1414619099;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the Connection, to be passed into {@code releaseJdbcConnection},_or {@code null} if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1471508221;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the Connection, to be passed into {@code releaseJdbcConnection},_or {@code null} if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource_@see org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractor;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source,see,org,springframework,jdbc,support,nativejdbc,native,jdbc,extractor;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1487178248;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the Connection, to be passed into {@code releaseJdbcConnection},_or {@code null} if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource;ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source;connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;1328020251;Return an EntityManagerFactoryPlusOperations implementation for_the given raw EntityManagerFactory. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerFactoryPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;return,an,entity,manager,factory,plus,operations,implementation,for,the,given,raw,entity,manager,factory,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,factory,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,factory,plus,operations,get,entity,manager,factory,plus,operations,entity,manager,factory,raw,entity,manager
JpaDialect -> EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;1356735495;Return an EntityManagerFactoryPlusOperations implementation for_the given raw EntityManagerFactory. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerFactoryPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;return,an,entity,manager,factory,plus,operations,implementation,for,the,given,raw,entity,manager,factory,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,factory,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,factory,plus,operations,get,entity,manager,factory,plus,operations,entity,manager,factory,raw,entity,manager
JpaDialect -> EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;1364391983;Return an EntityManagerFactoryPlusOperations implementation for_the given raw EntityManagerFactory. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerFactoryPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerFactoryPlusOperations getEntityManagerFactoryPlusOperations(EntityManagerFactory rawEntityManager)_;return,an,entity,manager,factory,plus,operations,implementation,for,the,given,raw,entity,manager,factory,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,factory,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,factory,plus,operations,get,entity,manager,factory,plus,operations,entity,manager,factory,raw,entity,manager
JpaDialect -> @Nullable 	ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1495868221;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the Connection, to be passed into {@code releaseJdbcConnection},_or {@code null} if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource;@Nullable_	ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source;nullable,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> @Nullable 	ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) 			throws PersistenceException, SQLException_;1496837955;Retrieve the JDBC Connection that the given JPA EntityManager uses underneath,_if accessing a relational database. This method will just get invoked if actually_needing access to the underlying JDBC Connection, usually within an active JPA_transaction (for example, by JpaTransactionManager). The returned handle will_be passed into the {@code releaseJdbcConnection} method when not needed anymore._<p>This strategy is necessary as JPA does not provide a standard way to retrieve_the underlying JDBC Connection (due to the fact that a JPA implementation might not_work with a relational database at all)._<p>Implementations are encouraged to return an unwrapped Connection object, i.e._the Connection as they got it from the connection pool. This makes it easier for_application code to get at the underlying native JDBC Connection, like an_OracleConnection, which is sometimes necessary for LOB handling etc. We assume_that calling code knows how to properly handle the returned Connection object._<p>In a simple case where the returned Connection will be auto-closed with the_EntityManager or can be released via the Connection object itself, an_implementation can return a SimpleConnectionHandle that just contains the_Connection. If some other object is needed in {@code releaseJdbcConnection},_an implementation should use a special handle that references that other object._@param entityManager the current JPA EntityManager_@param readOnly whether the Connection is only needed for read-only purposes_@return a handle for the Connection, to be passed into {@code releaseJdbcConnection},_or {@code null} if no JDBC Connection can be retrieved_@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@see #releaseJdbcConnection_@see org.springframework.jdbc.datasource.ConnectionHandle#getConnection_@see org.springframework.jdbc.datasource.SimpleConnectionHandle_@see JpaTransactionManager#setDataSource;@Nullable_	ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly)_			throws PersistenceException, SQLException_;retrieve,the,jdbc,connection,that,the,given,jpa,entity,manager,uses,underneath,if,accessing,a,relational,database,this,method,will,just,get,invoked,if,actually,needing,access,to,the,underlying,jdbc,connection,usually,within,an,active,jpa,transaction,for,example,by,jpa,transaction,manager,the,returned,handle,will,be,passed,into,the,code,release,jdbc,connection,method,when,not,needed,anymore,p,this,strategy,is,necessary,as,jpa,does,not,provide,a,standard,way,to,retrieve,the,underlying,jdbc,connection,due,to,the,fact,that,a,jpa,implementation,might,not,work,with,a,relational,database,at,all,p,implementations,are,encouraged,to,return,an,unwrapped,connection,object,i,e,the,connection,as,they,got,it,from,the,connection,pool,this,makes,it,easier,for,application,code,to,get,at,the,underlying,native,jdbc,connection,like,an,oracle,connection,which,is,sometimes,necessary,for,lob,handling,etc,we,assume,that,calling,code,knows,how,to,properly,handle,the,returned,connection,object,p,in,a,simple,case,where,the,returned,connection,will,be,auto,closed,with,the,entity,manager,or,can,be,released,via,the,connection,object,itself,an,implementation,can,return,a,simple,connection,handle,that,just,contains,the,connection,if,some,other,object,is,needed,in,code,release,jdbc,connection,an,implementation,should,use,a,special,handle,that,references,that,other,object,param,entity,manager,the,current,jpa,entity,manager,param,read,only,whether,the,connection,is,only,needed,for,read,only,purposes,return,a,handle,for,the,connection,to,be,passed,into,code,release,jdbc,connection,or,code,null,if,no,jdbc,connection,can,be,retrieved,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,see,release,jdbc,connection,see,org,springframework,jdbc,datasource,connection,handle,get,connection,see,org,springframework,jdbc,datasource,simple,connection,handle,see,jpa,transaction,manager,set,data,source;nullable,connection,handle,get,jdbc,connection,entity,manager,entity,manager,boolean,read,only,throws,persistence,exception,sqlexception
JpaDialect -> @Nullable 	Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1495868221;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;@Nullable_	Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;nullable,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> @Nullable 	Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) 			throws PersistenceException, SQLException, TransactionException_;1496837955;Begin the given JPA transaction, applying the semantics specified by the_given Spring transaction definition (in particular, an isolation level_and a timeout). Called by JpaTransactionManager on transaction begin._<p>An implementation can configure the JPA Transaction object and then_invoke {@code begin}, or invoke a special begin method that takes,_for example, an isolation level._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._It may also apply the read-only flag and isolation level to the underlying_JDBC Connection before beginning the transaction._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._<p>This method also allows for exposing savepoint capabilities if supported by_the persistence provider, through returning an Object that implements Spring's_{@link org.springframework.transaction.SavepointManager} interface._{@link JpaTransactionManager} will use this capability if needed._@param entityManager the EntityManager to begin a JPA transaction on_@param definition the Spring transaction definition that defines semantics_@return an arbitrary object that holds transaction data, if any_(to be passed into {@link #cleanupTransaction}). May implement the_{@link org.springframework.transaction.SavepointManager} interface._@throws javax.persistence.PersistenceException if thrown by JPA methods_@throws java.sql.SQLException if thrown by JDBC methods_@throws org.springframework.transaction.TransactionException in case of invalid arguments_@see #cleanupTransaction_@see javax.persistence.EntityTransaction#begin_@see org.springframework.jdbc.datasource.DataSourceUtils#prepareConnectionForTransaction;@Nullable_	Object beginTransaction(EntityManager entityManager, TransactionDefinition definition)_			throws PersistenceException, SQLException, TransactionException_;begin,the,given,jpa,transaction,applying,the,semantics,specified,by,the,given,spring,transaction,definition,in,particular,an,isolation,level,and,a,timeout,called,by,jpa,transaction,manager,on,transaction,begin,p,an,implementation,can,configure,the,jpa,transaction,object,and,then,invoke,code,begin,or,invoke,a,special,begin,method,that,takes,for,example,an,isolation,level,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,it,may,also,apply,the,read,only,flag,and,isolation,level,to,the,underlying,jdbc,connection,before,beginning,the,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,p,this,method,also,allows,for,exposing,savepoint,capabilities,if,supported,by,the,persistence,provider,through,returning,an,object,that,implements,spring,s,link,org,springframework,transaction,savepoint,manager,interface,link,jpa,transaction,manager,will,use,this,capability,if,needed,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,definition,the,spring,transaction,definition,that,defines,semantics,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,link,cleanup,transaction,may,implement,the,link,org,springframework,transaction,savepoint,manager,interface,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,throws,java,sql,sqlexception,if,thrown,by,jdbc,methods,throws,org,springframework,transaction,transaction,exception,in,case,of,invalid,arguments,see,cleanup,transaction,see,javax,persistence,entity,transaction,begin,see,org,springframework,jdbc,datasource,data,source,utils,prepare,connection,for,transaction;nullable,object,begin,transaction,entity,manager,entity,manager,transaction,definition,definition,throws,persistence,exception,sqlexception,transaction,exception
JpaDialect -> EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;1328020251;Return an EntityManagerPlusOperations implementation for_the given raw EntityManager. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;return,an,entity,manager,plus,operations,implementation,for,the,given,raw,entity,manager,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,plus,operations,get,entity,manager,plus,operations,entity,manager,raw,entity,manager
JpaDialect -> EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;1356735495;Return an EntityManagerPlusOperations implementation for_the given raw EntityManager. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;return,an,entity,manager,plus,operations,implementation,for,the,given,raw,entity,manager,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,plus,operations,get,entity,manager,plus,operations,entity,manager,raw,entity,manager
JpaDialect -> EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;1364391983;Return an EntityManagerPlusOperations implementation for_the given raw EntityManager. This operations object can be_used to serve the additional operations behind a proxy that_implements the EntityManagerPlus interface._@param rawEntityManager the raw provider-specific EntityManagerFactory_@return the EntityManagerFactoryPlusOperations implementation;EntityManagerPlusOperations getEntityManagerPlusOperations(EntityManager rawEntityManager)_;return,an,entity,manager,plus,operations,implementation,for,the,given,raw,entity,manager,this,operations,object,can,be,used,to,serve,the,additional,operations,behind,a,proxy,that,implements,the,entity,manager,plus,interface,param,raw,entity,manager,the,raw,provider,specific,entity,manager,factory,return,the,entity,manager,factory,plus,operations,implementation;entity,manager,plus,operations,get,entity,manager,plus,operations,entity,manager,raw,entity,manager
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1328020251;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in <code>cleanupTransaction</code>._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,code,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1356735495;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name, as exposed by the_passed-in TransactionDefinition, to optimize for specific data access use cases_(effectively using the current transaction name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,as,exposed,by,the,passed,in,transaction,definition,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1364391983;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction_or a locally joined transaction (e.g. after upgrading an unsynchronized_EntityManager to a synchronized one)._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name to optimize for_specific data access use cases (effectively using the current transaction_name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,or,a,locally,joined,transaction,e,g,after,upgrading,an,unsynchronized,entity,manager,to,a,synchronized,one,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1364559513;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction_or a locally joined transaction (e.g. after upgrading an unsynchronized_EntityManager to a synchronized one)._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name to optimize for_specific data access use cases (effectively using the current transaction_name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,or,a,locally,joined,transaction,e,g,after,upgrading,an,unsynchronized,entity,manager,to,a,synchronized,one,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1414619099;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction_or a locally joined transaction (e.g. after upgrading an unsynchronized_EntityManager to a synchronized one)._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name to optimize for_specific data access use cases (effectively using the current transaction_name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,or,a,locally,joined,transaction,e,g,after,upgrading,an,unsynchronized,entity,manager,to,a,synchronized,one,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1471508221;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction_or a locally joined transaction (e.g. after upgrading an unsynchronized_EntityManager to a synchronized one)._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name to optimize for_specific data access use cases (effectively using the current transaction_name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,or,a,locally,joined,transaction,e,g,after,upgrading,an,unsynchronized,entity,manager,to,a,synchronized,one,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name) 			throws PersistenceException_;1487178248;Prepare a JPA transaction, applying the specified semantics. Called by_EntityManagerFactoryUtils when enlisting an EntityManager in a JTA transaction_or a locally joined transaction (e.g. after upgrading an unsynchronized_EntityManager to a synchronized one)._<p>An implementation can apply the read-only flag as flush mode. In that case,_a transaction data object can be returned that holds the previous flush mode_(and possibly other data), to be reset in {@code cleanupTransaction}._<p>Implementations can also use the Spring transaction name to optimize for_specific data access use cases (effectively using the current transaction_name as use case identifier)._@param entityManager the EntityManager to begin a JPA transaction on_@param readOnly whether the transaction is supposed to be read-only_@param name the name of the transaction (if any)_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@throws javax.persistence.PersistenceException if thrown by JPA methods_@see #cleanupTransaction;Object prepareTransaction(EntityManager entityManager, boolean readOnly, String name)_			throws PersistenceException_;prepare,a,jpa,transaction,applying,the,specified,semantics,called,by,entity,manager,factory,utils,when,enlisting,an,entity,manager,in,a,jta,transaction,or,a,locally,joined,transaction,e,g,after,upgrading,an,unsynchronized,entity,manager,to,a,synchronized,one,p,an,implementation,can,apply,the,read,only,flag,as,flush,mode,in,that,case,a,transaction,data,object,can,be,returned,that,holds,the,previous,flush,mode,and,possibly,other,data,to,be,reset,in,code,cleanup,transaction,p,implementations,can,also,use,the,spring,transaction,name,to,optimize,for,specific,data,access,use,cases,effectively,using,the,current,transaction,name,as,use,case,identifier,param,entity,manager,the,entity,manager,to,begin,a,jpa,transaction,on,param,read,only,whether,the,transaction,is,supposed,to,be,read,only,param,name,the,name,of,the,transaction,if,any,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,throws,javax,persistence,persistence,exception,if,thrown,by,jpa,methods,see,cleanup,transaction;object,prepare,transaction,entity,manager,entity,manager,boolean,read,only,string,name,throws,persistence,exception
JpaDialect -> void cleanupTransaction(Object transactionData)_;1328020251;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1356735495;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1364391983;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1364559513;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1414619099;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1471508221;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
JpaDialect -> void cleanupTransaction(Object transactionData)_;1487178248;Clean up the transaction via the given transaction data. Called by_JpaTransactionManager and EntityManagerFactoryUtils on transaction cleanup._<p>An implementation can, for example, reset read-only flag and_isolation level of the underlying JDBC Connection. Furthermore,_an exposed data access use case can be reset here._@param transactionData arbitrary object that holds transaction data, if any_(as returned by beginTransaction or prepareTransaction)_@see #beginTransaction_@see org.springframework.jdbc.datasource.DataSourceUtils#resetConnectionAfterTransaction;void cleanupTransaction(Object transactionData)_;clean,up,the,transaction,via,the,given,transaction,data,called,by,jpa,transaction,manager,and,entity,manager,factory,utils,on,transaction,cleanup,p,an,implementation,can,for,example,reset,read,only,flag,and,isolation,level,of,the,underlying,jdbc,connection,furthermore,an,exposed,data,access,use,case,can,be,reset,here,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,begin,transaction,or,prepare,transaction,see,begin,transaction,see,org,springframework,jdbc,datasource,data,source,utils,reset,connection,after,transaction;void,cleanup,transaction,object,transaction,data
