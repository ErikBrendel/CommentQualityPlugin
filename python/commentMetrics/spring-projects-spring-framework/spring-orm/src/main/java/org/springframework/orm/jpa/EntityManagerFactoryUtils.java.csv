# id;timestamp;commentText;codeText;commentWords;codeWords
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1328020251;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_peristence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be <code>null</code> or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,peristence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,utils,bean,of,type,bean,factory,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1329142650;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_peristence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be <code>null</code> or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,peristence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,utils,bean,of,type,bean,factory,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1354631884;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_peristence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be <code>null</code> or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,peristence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,code,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,utils,bean,of,type,bean,factory,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1356735495;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_peristence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,peristence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,utils,bean,of,type,bean,factory,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1357119239;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_peristence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			return BeanFactoryUtils.beanOfType(beanFactory, EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,peristence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,utils,bean,of,type,bean,factory,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1362408075;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1364391983;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1368482696;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1377018122;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1385412762;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1413848647;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1414678671;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1437139492;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1467668243;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1469489019;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1469534553;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException;1490114687;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1495868221;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1496837955;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1498780456;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1506097334;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo) {_					if (unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_						return emf__					}_				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,if,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1520529117;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo &&_						unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_					return emf__				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1530174524;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo &&_						unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_					return emf__				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1543877450;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo &&_						unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_					return emf__				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManagerFactory findEntityManagerFactory( 			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException;1543886147;Find an EntityManagerFactory with the given name in the given_Spring application context (represented as ListableBeanFactory)._<p>The specified unit name will be matched against the configured_persistence unit, provided that a discovered EntityManagerFactory_implements the {@link EntityManagerFactoryInfo} interface. If not,_the persistence unit name will be matched against the Spring bean name,_assuming that the EntityManagerFactory bean names follow that convention._<p>If no unit name has been given, this method will search for a default_EntityManagerFactory through {@link ListableBeanFactory#getBean(Class)}._@param beanFactory the ListableBeanFactory to search_@param unitName the name of the persistence unit (may be {@code null} or empty,_in which case a single bean of type EntityManagerFactory will be searched for)_@return the EntityManagerFactory_@throws NoSuchBeanDefinitionException if there is no such EntityManagerFactory in the context_@see EntityManagerFactoryInfo#getPersistenceUnitName();public static EntityManagerFactory findEntityManagerFactory(_			ListableBeanFactory beanFactory, @Nullable String unitName) throws NoSuchBeanDefinitionException {__		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		if (StringUtils.hasLength(unitName)) {_			_			String[] candidateNames =_					BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, EntityManagerFactory.class)__			for (String candidateName : candidateNames) {_				EntityManagerFactory emf = (EntityManagerFactory) beanFactory.getBean(candidateName)__				if (emf instanceof EntityManagerFactoryInfo &&_						unitName.equals(((EntityManagerFactoryInfo) emf).getPersistenceUnitName())) {_					return emf__				}_			}_			_			_			return beanFactory.getBean(unitName, EntityManagerFactory.class)__		}_		else {_			_			return beanFactory.getBean(EntityManagerFactory.class)__		}_	};find,an,entity,manager,factory,with,the,given,name,in,the,given,spring,application,context,represented,as,listable,bean,factory,p,the,specified,unit,name,will,be,matched,against,the,configured,persistence,unit,provided,that,a,discovered,entity,manager,factory,implements,the,link,entity,manager,factory,info,interface,if,not,the,persistence,unit,name,will,be,matched,against,the,spring,bean,name,assuming,that,the,entity,manager,factory,bean,names,follow,that,convention,p,if,no,unit,name,has,been,given,this,method,will,search,for,a,default,entity,manager,factory,through,link,listable,bean,factory,get,bean,class,param,bean,factory,the,listable,bean,factory,to,search,param,unit,name,the,name,of,the,persistence,unit,may,be,code,null,or,empty,in,which,case,a,single,bean,of,type,entity,manager,factory,will,be,searched,for,return,the,entity,manager,factory,throws,no,such,bean,definition,exception,if,there,is,no,such,entity,manager,factory,in,the,context,see,entity,manager,factory,info,get,persistence,unit,name;public,static,entity,manager,factory,find,entity,manager,factory,listable,bean,factory,bean,factory,nullable,string,unit,name,throws,no,such,bean,definition,exception,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,if,string,utils,has,length,unit,name,string,candidate,names,bean,factory,utils,bean,names,for,type,including,ancestors,bean,factory,entity,manager,factory,class,for,string,candidate,name,candidate,names,entity,manager,factory,emf,entity,manager,factory,bean,factory,get,bean,candidate,name,if,emf,instanceof,entity,manager,factory,info,unit,name,equals,entity,manager,factory,info,emf,get,persistence,unit,name,return,emf,return,bean,factory,get,bean,unit,name,entity,manager,factory,class,else,return,bean,factory,get,bean,entity,manager,factory,class
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1328020251;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1329142650;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1354631884;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1356735495;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1357119239;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1362408075;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1364391983;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1368482696;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws DataAccessResourceFailureException;1377018122;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1328020251;Convert the given runtime exception to an appropriate exception from the_<code>org.springframework.dao</code> hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking_failure are covered here. For more fine-granular conversion, JpaAccessor and_JpaTransactionManager support sophisticated translation of exceptions via a_JpaDialect._@param ex runtime exception that occured_@return the corresponding DataAccessException instance,_or <code>null</code> if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}_		_		_		_		_		return null_				_	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,code,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,accessor,and,jpa,transaction,manager,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occured,return,the,corresponding,data,access,exception,instance,or,code,null,code,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1329142650;Convert the given runtime exception to an appropriate exception from the_<code>org.springframework.dao</code> hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking_failure are covered here. For more fine-granular conversion, JpaAccessor and_JpaTransactionManager support sophisticated translation of exceptions via a_JpaDialect._@param ex runtime exception that occured_@return the corresponding DataAccessException instance,_or <code>null</code> if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}_		_		_		_		_		return null_				_	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,code,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,accessor,and,jpa,transaction,manager,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occured,return,the,corresponding,data,access,exception,instance,or,code,null,code,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1354631884;Convert the given runtime exception to an appropriate exception from the_<code>org.springframework.dao</code> hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or <code>null</code> if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}_		_		_		_		_		return null_				_	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,code,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,code,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1356735495;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1357119239;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1362408075;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1364391983;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1368482696;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1377018122;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1385412762;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1413848647;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1414678671;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1437139492;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1467668243;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException((PersistenceException) ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,persistence,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1469489019;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1469534553;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1490114687;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1495868221;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1496837955;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1498780456;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1506097334;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1520529117;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1530174524;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1543877450;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1543886147;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;@Nullable_	private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;nullable,private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1496837955;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1498780456;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1506097334;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1520529117;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1530174524;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1543877450;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) 			throws PersistenceException;1543886147;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction)_			throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		try {_			_			_			emHolder = new EntityManagerHolder(em)__			if (synchronizedWithTransaction) {_				Object transactionData = prepareTransaction(em, emf)__				TransactionSynchronizationManager.registerSynchronization(_						new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__				emHolder.setSynchronizedWithTransaction(true)__			}_			else {_				_				TransactionSynchronizationManager.registerSynchronization(_						new TransactionScopedEntityManagerSynchronization(emHolder, emf))__			}_			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}_		catch (RuntimeException ex) {_			_			closeEntityManager(em)__			throw ex__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,try,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,catch,runtime,exception,ex,close,entity,manager,em,throw,ex,return,em
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1328020251;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1329142650;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1354631884;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return <code>null</code> if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or <code>null</code> if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,code,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,code,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1356735495;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1357119239;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1362408075;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1364391983;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1368482696;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1377018122;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1385412762;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1413848647;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1414678671;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1437139492;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1467668243;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1469489019;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1469534553;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1490114687;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1495868221;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1496837955;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1498780456;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1506097334;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1520529117;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1530174524;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1543877450;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf) 			throws DataAccessResourceFailureException;1543886147;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf)_			throws DataAccessResourceFailureException {__		return getTransactionalEntityManager(emf, null)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,throws,data,access,resource,failure,exception,return,get,transactional,entity,manager,emf,null
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1328020251;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1329142650;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1354631884;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1356735495;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1357119239;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1362408075;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1364391983;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1368482696;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1377018122;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1385412762;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1413848647;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1414678671;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1437139492;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1467668243;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1469489019;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1469534553;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1490114687;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1495868221;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf);1496837955;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1498780456;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1506097334;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1520529117;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1530174524;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1543877450;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf);1543886147;Prepare a transaction on the given EntityManager, if possible._@param transactionData arbitrary object that holds transaction data, if any_(as returned by prepareTransaction)_@param emf the EntityManagerFactory that the EntityManager has been created with_@see JpaDialect#cleanupTransaction;private static void cleanupTransaction(@Nullable Object transactionData, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				jpaDialect.cleanupTransaction(transactionData)__			}_		}_	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,transaction,data,arbitrary,object,that,holds,transaction,data,if,any,as,returned,by,prepare,transaction,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,see,jpa,dialect,cleanup,transaction;private,static,void,cleanup,transaction,nullable,object,transaction,data,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,jpa,dialect,cleanup,transaction,transaction,data
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1495868221;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1496837955;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1498780456;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1506097334;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1520529117;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1530174524;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1543877450;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(@Nullable EntityManager em);1543886147;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(@Nullable EntityManager em) {_		if (em != null) {_			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,nullable,entity,manager,em,if,em,null,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1328020251;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be <code>null</code>)_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,code,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1329142650;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be <code>null</code>)_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,code,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1354631884;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be <code>null</code>)_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,code,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1356735495;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1357119239;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1362408075;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1364391983;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1368482696;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1377018122;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1385412762;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1413848647;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1414678671;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1437139492;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1467668243;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1469489019;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1469534553;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void closeEntityManager(EntityManager em);1490114687;Close the given JPA EntityManager,_catching and logging any cleanup exceptions thrown._@param em the JPA EntityManager to close (may be {@code null})_@see javax.persistence.EntityManager#close();public static void closeEntityManager(EntityManager em) {_		if (em != null) {_			logger.debug("Closing JPA EntityManager")__			try {_				if (em.isOpen()) {_					em.close()__				}_			}_			catch (PersistenceException ex) {_				logger.debug("Could not close JPA EntityManager", ex)__			}_			catch (Throwable ex) {_				logger.debug("Unexpected exception on closing JPA EntityManager", ex)__			}_		}_	};close,the,given,jpa,entity,manager,catching,and,logging,any,cleanup,exceptions,thrown,param,em,the,jpa,entity,manager,to,close,may,be,code,null,see,javax,persistence,entity,manager,close;public,static,void,close,entity,manager,entity,manager,em,if,em,null,logger,debug,closing,jpa,entity,manager,try,if,em,is,open,em,close,catch,persistence,exception,ex,logger,debug,could,not,close,jpa,entity,manager,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1328020251;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hints "javax.persistence.lock.timeout"_and "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.lock.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hints,javax,persistence,lock,timeout,and,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,lock,timeout,timeout,value,catch,illegal,argument,exception,ex,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1329142650;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hints "javax.persistence.lock.timeout"_and "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.lock.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hints,javax,persistence,lock,timeout,and,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,lock,timeout,timeout,value,catch,illegal,argument,exception,ex,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1354631884;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1356735495;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1357119239;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1362408075;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1364391983;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1368482696;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1377018122;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1385412762;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1413848647;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1414678671;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1437139492;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1467668243;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1469489019;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1469534553;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1490114687;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1495868221;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1496837955;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1498780456;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1506097334;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1520529117;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1530174524;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf the JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,the,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1543877450;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf the JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,the,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> public static void applyTransactionTimeout(Query query, EntityManagerFactory emf);1543886147;Apply the current transaction timeout, if any, to the given JPA Query object._<p>This method sets the JPA 2.0 query hint "javax.persistence.query.timeout" accordingly._@param query the JPA Query object_@param emf the JPA EntityManagerFactory that the Query was created for;public static void applyTransactionTimeout(Query query, EntityManagerFactory emf) {_		EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null && emHolder.hasTimeout()) {_			int timeoutValue = (int) emHolder.getTimeToLiveInMillis()__			try {_				query.setHint("javax.persistence.query.timeout", timeoutValue)__			}_			catch (IllegalArgumentException ex) {_				_			}_		}_	};apply,the,current,transaction,timeout,if,any,to,the,given,jpa,query,object,p,this,method,sets,the,jpa,2,0,query,hint,javax,persistence,query,timeout,accordingly,param,query,the,jpa,query,object,param,emf,the,jpa,entity,manager,factory,that,the,query,was,created,for;public,static,void,apply,transaction,timeout,query,query,entity,manager,factory,emf,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,em,holder,has,timeout,int,timeout,value,int,em,holder,get,time,to,live,in,millis,try,query,set,hint,javax,persistence,query,timeout,timeout,value,catch,illegal,argument,exception,ex
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1495868221;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1496837955;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1498780456;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1506097334;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1520529117;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1530174524;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1543877450;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> @Nullable 	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex);1543886147;Convert the given runtime exception to an appropriate exception from the_{@code org.springframework.dao} hierarchy._Return null if no translation is appropriate: any other exception may_have resulted from user code, and should not be translated._<p>The most important cases like object not found or optimistic locking failure_are covered here. For more fine-granular conversion, JpaTransactionManager etc_support sophisticated translation of exceptions via a JpaDialect._@param ex runtime exception that occurred_@return the corresponding DataAccessException instance,_or {@code null} if the exception should not be translated;@Nullable_	public static DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex) {_		_		_		if (ex instanceof IllegalStateException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}_		if (ex instanceof IllegalArgumentException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof EntityNotFoundException) {_			return new JpaObjectRetrievalFailureException((EntityNotFoundException) ex)__		}_		if (ex instanceof NoResultException) {_			return new EmptyResultDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof NonUniqueResultException) {_			return new IncorrectResultSizeDataAccessException(ex.getMessage(), 1, ex)__		}_		if (ex instanceof QueryTimeoutException) {_			return new org.springframework.dao.QueryTimeoutException(ex.getMessage(), ex)__		}_		if (ex instanceof LockTimeoutException) {_			return new CannotAcquireLockException(ex.getMessage(), ex)__		}_		if (ex instanceof PessimisticLockException) {_			return new PessimisticLockingFailureException(ex.getMessage(), ex)__		}_		if (ex instanceof OptimisticLockException) {_			return new JpaOptimisticLockingFailureException((OptimisticLockException) ex)__		}_		if (ex instanceof EntityExistsException) {_			return new DataIntegrityViolationException(ex.getMessage(), ex)__		}_		if (ex instanceof TransactionRequiredException) {_			return new InvalidDataAccessApiUsageException(ex.getMessage(), ex)__		}__		_		if (ex instanceof PersistenceException) {_			return new JpaSystemException(ex)__		}__		_		_		_		return null__	};convert,the,given,runtime,exception,to,an,appropriate,exception,from,the,code,org,springframework,dao,hierarchy,return,null,if,no,translation,is,appropriate,any,other,exception,may,have,resulted,from,user,code,and,should,not,be,translated,p,the,most,important,cases,like,object,not,found,or,optimistic,locking,failure,are,covered,here,for,more,fine,granular,conversion,jpa,transaction,manager,etc,support,sophisticated,translation,of,exceptions,via,a,jpa,dialect,param,ex,runtime,exception,that,occurred,return,the,corresponding,data,access,exception,instance,or,code,null,if,the,exception,should,not,be,translated;nullable,public,static,data,access,exception,convert,jpa,access,exception,if,possible,runtime,exception,ex,if,ex,instanceof,illegal,state,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,illegal,argument,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,entity,not,found,exception,return,new,jpa,object,retrieval,failure,exception,entity,not,found,exception,ex,if,ex,instanceof,no,result,exception,return,new,empty,result,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,non,unique,result,exception,return,new,incorrect,result,size,data,access,exception,ex,get,message,1,ex,if,ex,instanceof,query,timeout,exception,return,new,org,springframework,dao,query,timeout,exception,ex,get,message,ex,if,ex,instanceof,lock,timeout,exception,return,new,cannot,acquire,lock,exception,ex,get,message,ex,if,ex,instanceof,pessimistic,lock,exception,return,new,pessimistic,locking,failure,exception,ex,get,message,ex,if,ex,instanceof,optimistic,lock,exception,return,new,jpa,optimistic,locking,failure,exception,optimistic,lock,exception,ex,if,ex,instanceof,entity,exists,exception,return,new,data,integrity,violation,exception,ex,get,message,ex,if,ex,instanceof,transaction,required,exception,return,new,invalid,data,access,api,usage,exception,ex,get,message,ex,if,ex,instanceof,persistence,exception,return,new,jpa,system,exception,ex,return,null
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException;1364391983;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException;1368482696;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException;1377018122;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1385412762;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1413848647;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1414678671;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction() &&_						TransactionSynchronizationManager.isSynchronizationActive()) {_					_					_					try {_						emHolder.getEntityManager().joinTransaction()__					}_					catch (TransactionRequiredException ex) {_						logger.debug("Could not join transaction because none was actually active", ex)__					}_					Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__					TransactionSynchronizationManager.registerSynchronization(_							new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__					emHolder.setSynchronizedWithTransaction(true)__				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1437139492;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction && createEntityManagerWithSynchronizationTypeMethod != null) {_			try {_				em = (EntityManager) ReflectionUtils.invokeMethod(createEntityManagerWithSynchronizationTypeMethod,_						emf, synchronizationTypeUnsynchronized, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,create,entity,manager,with,synchronization,type,method,null,try,em,entity,manager,reflection,utils,invoke,method,create,entity,manager,with,synchronization,type,method,emf,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1467668243;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1469489019;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1469534553;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException;1490114687;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (synchronizedWithTransaction) {_				if (!emHolder.isSynchronizedWithTransaction()) {_					if (TransactionSynchronizationManager.isActualTransactionActive()) {_						_						_						try {_							emHolder.getEntityManager().joinTransaction()__						}_						catch (TransactionRequiredException ex) {_							logger.debug("Could not join transaction because none was actually active", ex)__						}_					}_					if (TransactionSynchronizationManager.isSynchronizationActive()) {_						Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__						TransactionSynchronizationManager.registerSynchronization(_								new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, false))__						emHolder.setSynchronizedWithTransaction(true)__					}_				}_				_				_				emHolder.requested()__				return emHolder.getEntityManager()__			}_			else {_				_				if (emHolder.isTransactionActive() && !emHolder.isOpen()) {_					if (!TransactionSynchronizationManager.isSynchronizationActive()) {_						return null__					}_					_					_					_					TransactionSynchronizationManager.unbindResource(emf)__				}_				else {_					_					_					_					return emHolder.getEntityManager()__				}_			}_		}_		else if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em = null__		if (!synchronizedWithTransaction) {_			try {_				em = emf.createEntityManager(SynchronizationType.UNSYNCHRONIZED, properties)__			}_			catch (AbstractMethodError err) {_				_				_			}_		}_		if (em == null) {_			em = (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())__		}__		_		_		logger.debug("Registering transaction synchronization for JPA EntityManager")__		emHolder = new EntityManagerHolder(em)__		if (synchronizedWithTransaction) {_			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new TransactionalEntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__		}_		else {_			_			TransactionSynchronizationManager.registerSynchronization(_					new TransactionScopedEntityManagerSynchronization(emHolder, emf))__		}_		TransactionSynchronizationManager.bindResource(emf, emHolder)___		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,synchronized,with,transaction,if,em,holder,is,synchronized,with,transaction,if,transaction,synchronization,manager,is,actual,transaction,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,transaction,because,none,was,actually,active,ex,if,transaction,synchronization,manager,is,synchronization,active,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,em,holder,requested,return,em,holder,get,entity,manager,else,if,em,holder,is,transaction,active,em,holder,is,open,if,transaction,synchronization,manager,is,synchronization,active,return,null,transaction,synchronization,manager,unbind,resource,emf,else,return,em,holder,get,entity,manager,else,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,null,if,synchronized,with,transaction,try,em,emf,create,entity,manager,synchronization,type,unsynchronized,properties,catch,abstract,method,error,err,if,em,null,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,if,synchronized,with,transaction,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,transactional,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,else,transaction,synchronization,manager,register,synchronization,new,transaction,scoped,entity,manager,synchronization,em,holder,emf,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1495868221;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1496837955;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1498780456;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1506097334;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1520529117;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1530174524;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1543877450;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1543886147;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;@Nullable_	public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;nullable,public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws PersistenceException;1364391983;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws PersistenceException;1368482696;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties) 			throws PersistenceException;1377018122;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1385412762;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1413848647;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1414678671;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1437139492;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1467668243;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1469489019;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1469534553;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws PersistenceException;1490114687;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws PersistenceException {__		return doGetTransactionalEntityManager(emf, properties, true)__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,return,do,get,transactional,entity,manager,emf,properties,true
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1328020251;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1329142650;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1354631884;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1356735495;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1357119239;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1362408075;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1364391983;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1368482696;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1377018122;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1385412762;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1413848647;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1414678671;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1437139492;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1467668243;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1469489019;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1469534553;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf);1490114687;Prepare a transaction on the given EntityManager, if possible._@param em the EntityManager to prepare_@param emf the EntityManagerFactory that the EntityManager has been created with_@return an arbitrary object that holds transaction data, if any_(to be passed into cleanupTransaction)_@see JpaDialect#prepareTransaction;private static Object prepareTransaction(EntityManager em, EntityManagerFactory emf) {_		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			JpaDialect jpaDialect = emfInfo.getJpaDialect()__			if (jpaDialect != null) {_				return jpaDialect.prepareTransaction(em,_						TransactionSynchronizationManager.isCurrentTransactionReadOnly(),_						TransactionSynchronizationManager.getCurrentTransactionName())__			}_		}_		return null__	};prepare,a,transaction,on,the,given,entity,manager,if,possible,param,em,the,entity,manager,to,prepare,param,emf,the,entity,manager,factory,that,the,entity,manager,has,been,created,with,return,an,arbitrary,object,that,holds,transaction,data,if,any,to,be,passed,into,cleanup,transaction,see,jpa,dialect,prepare,transaction;private,static,object,prepare,transaction,entity,manager,em,entity,manager,factory,emf,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,if,jpa,dialect,null,return,jpa,dialect,prepare,transaction,em,transaction,synchronization,manager,is,current,transaction,read,only,transaction,synchronization,manager,get,current,transaction,name,return,null
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1385412762;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1413848647;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1414678671;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1437139492;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1467668243;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1469489019;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1469534553;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties) 			throws DataAccessResourceFailureException;1490114687;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1328020251;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as <code>getEntityManager</code>, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,code,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1329142650;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as <code>getEntityManager</code>, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,code,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1354631884;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as <code>getEntityManager</code>, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return the EntityManager, or <code>null</code> if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,code,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,the,entity,manager,or,code,null,code,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1356735495;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1357119239;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> public static EntityManager doGetTransactionalEntityManager( 			EntityManagerFactory emf, Map properties) throws PersistenceException;1362408075;Obtain a JPA EntityManager from the given factory. Is aware of a_corresponding EntityManager bound to the current thread,_for example when using JpaTransactionManager._<p>Same as {@code getEntityManager}, but throwing the original PersistenceException._@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws javax.persistence.PersistenceException if the EntityManager couldn't be created_@see #getTransactionalEntityManager(javax.persistence.EntityManagerFactory)_@see JpaTransactionManager;public static EntityManager doGetTransactionalEntityManager(_			EntityManagerFactory emf, Map properties) throws PersistenceException {__		Assert.notNull(emf, "No EntityManagerFactory specified")___		EntityManagerHolder emHolder =_				(EntityManagerHolder) TransactionSynchronizationManager.getResource(emf)__		if (emHolder != null) {_			if (!emHolder.isSynchronizedWithTransaction() &&_					TransactionSynchronizationManager.isSynchronizationActive()) {_				_				_				try {_					emHolder.getEntityManager().joinTransaction()__				}_				catch (TransactionRequiredException ex) {_					logger.debug("Could not join JTA transaction because none was active", ex)__				}_				Object transactionData = prepareTransaction(emHolder.getEntityManager(), emf)__				TransactionSynchronizationManager.registerSynchronization(_						new EntityManagerSynchronization(emHolder, emf, transactionData, false))__				emHolder.setSynchronizedWithTransaction(true)__			}_			return emHolder.getEntityManager()__		}__		if (!TransactionSynchronizationManager.isSynchronizationActive()) {_			_			return null__		}__		_		logger.debug("Opening JPA EntityManager")__		EntityManager em =_				(!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager())___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for JPA EntityManager")__			_			_			emHolder = new EntityManagerHolder(em)__			Object transactionData = prepareTransaction(em, emf)__			TransactionSynchronizationManager.registerSynchronization(_					new EntityManagerSynchronization(emHolder, emf, transactionData, true))__			emHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.bindResource(emf, emHolder)__		}__		return em__	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,for,example,when,using,jpa,transaction,manager,p,same,as,code,get,entity,manager,but,throwing,the,original,persistence,exception,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,javax,persistence,persistence,exception,if,the,entity,manager,couldn,t,be,created,see,get,transactional,entity,manager,javax,persistence,entity,manager,factory,see,jpa,transaction,manager;public,static,entity,manager,do,get,transactional,entity,manager,entity,manager,factory,emf,map,properties,throws,persistence,exception,assert,not,null,emf,no,entity,manager,factory,specified,entity,manager,holder,em,holder,entity,manager,holder,transaction,synchronization,manager,get,resource,emf,if,em,holder,null,if,em,holder,is,synchronized,with,transaction,transaction,synchronization,manager,is,synchronization,active,try,em,holder,get,entity,manager,join,transaction,catch,transaction,required,exception,ex,logger,debug,could,not,join,jta,transaction,because,none,was,active,ex,object,transaction,data,prepare,transaction,em,holder,get,entity,manager,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,false,em,holder,set,synchronized,with,transaction,true,return,em,holder,get,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,return,null,logger,debug,opening,jpa,entity,manager,entity,manager,em,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,jpa,entity,manager,em,holder,new,entity,manager,holder,em,object,transaction,data,prepare,transaction,em,emf,transaction,synchronization,manager,register,synchronization,new,entity,manager,synchronization,em,holder,emf,transaction,data,true,em,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,bind,resource,emf,em,holder,return,em
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1495868221;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1496837955;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1498780456;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1506097334;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1520529117;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1530174524;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1543877450;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
EntityManagerFactoryUtils -> @Nullable 	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) 			throws DataAccessResourceFailureException;1543886147;Obtain a JPA EntityManager from the given factory. Is aware of a corresponding_EntityManager bound to the current thread, e.g. when using JpaTransactionManager._<p>Note: Will return {@code null} if no thread-bound EntityManager found!_@param emf the EntityManagerFactory to create the EntityManager with_@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return the EntityManager, or {@code null} if none found_@throws DataAccessResourceFailureException if the EntityManager couldn't be obtained_@see JpaTransactionManager;@Nullable_	public static EntityManager getTransactionalEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties)_			throws DataAccessResourceFailureException {_		try {_			return doGetTransactionalEntityManager(emf, properties, true)__		}_		catch (PersistenceException ex) {_			throw new DataAccessResourceFailureException("Could not obtain JPA EntityManager", ex)__		}_	};obtain,a,jpa,entity,manager,from,the,given,factory,is,aware,of,a,corresponding,entity,manager,bound,to,the,current,thread,e,g,when,using,jpa,transaction,manager,p,note,will,return,code,null,if,no,thread,bound,entity,manager,found,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,the,entity,manager,or,code,null,if,none,found,throws,data,access,resource,failure,exception,if,the,entity,manager,couldn,t,be,obtained,see,jpa,transaction,manager;nullable,public,static,entity,manager,get,transactional,entity,manager,entity,manager,factory,emf,nullable,map,properties,throws,data,access,resource,failure,exception,try,return,do,get,transactional,entity,manager,emf,properties,true,catch,persistence,exception,ex,throw,new,data,access,resource,failure,exception,could,not,obtain,jpa,entity,manager,ex
