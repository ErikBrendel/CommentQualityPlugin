commented;modifiers;parameterAmount;loc;comment;code
false;public;1;31;;@Override public void preHandle(WebRequest request) throws DataAccessException {     String key = getParticipateAttributeName().     WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request).     if (asyncManager.hasConcurrentResult() && applyEntityManagerBindingInterceptor(asyncManager, key)) {         return.     }     EntityManagerFactory emf = obtainEntityManagerFactory().     if (TransactionSynchronizationManager.hasResource(emf)) {         // Do not modify the EntityManager: just mark the request accordingly.         Integer count = (Integer) request.getAttribute(key, WebRequest.SCOPE_REQUEST).         int newCount = (count != null ? count + 1 : 1).         request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST).     } else {         logger.debug("Opening JPA EntityManager in OpenEntityManagerInViewInterceptor").         try {             EntityManager em = createEntityManager().             EntityManagerHolder emHolder = new EntityManagerHolder(em).             TransactionSynchronizationManager.bindResource(emf, emHolder).             AsyncRequestInterceptor interceptor = new AsyncRequestInterceptor(emf, emHolder).             asyncManager.registerCallableInterceptor(key, interceptor).             asyncManager.registerDeferredResultInterceptor(key, interceptor).         } catch (PersistenceException ex) {             throw new DataAccessResourceFailureException("Could not create JPA EntityManager", ex).         }     } }
false;public;2;3;;@Override public void postHandle(WebRequest request, @Nullable ModelMap model) { }
false;public;2;9;;@Override public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException {     if (!decrementParticipateCount(request)) {         EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(obtainEntityManagerFactory()).         logger.debug("Closing JPA EntityManager in OpenEntityManagerInViewInterceptor").         EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager()).     } }
false;private;1;15;;private boolean decrementParticipateCount(WebRequest request) {     String participateAttributeName = getParticipateAttributeName().     Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST).     if (count == null) {         return false.     }     // Do not modify the Session: just clear the marker.     if (count > 1) {         request.setAttribute(participateAttributeName, count - 1, WebRequest.SCOPE_REQUEST).     } else {         request.removeAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST).     }     return true. }
false;public;1;6;;@Override public void afterConcurrentHandlingStarted(WebRequest request) {     if (!decrementParticipateCount(request)) {         TransactionSynchronizationManager.unbindResource(obtainEntityManagerFactory()).     } }
true;protected;0;3;/**  * Return the name of the request attribute that identifies that a request is  * already filtered. Default implementation takes the toString representation  * of the EntityManagerFactory instance and appends ".FILTERED".  * @see #PARTICIPATE_SUFFIX  */ ;/**  * Return the name of the request attribute that identifies that a request is  * already filtered. Default implementation takes the toString representation  * of the EntityManagerFactory instance and appends ".FILTERED".  * @see #PARTICIPATE_SUFFIX  */ protected String getParticipateAttributeName() {     return obtainEntityManagerFactory().toString() + PARTICIPATE_SUFFIX. }
false;private;2;8;;private boolean applyEntityManagerBindingInterceptor(WebAsyncManager asyncManager, String key) {     CallableProcessingInterceptor cpi = asyncManager.getCallableInterceptor(key).     if (cpi == null) {         return false.     }     ((AsyncRequestInterceptor) cpi).bindEntityManager().     return true. }
