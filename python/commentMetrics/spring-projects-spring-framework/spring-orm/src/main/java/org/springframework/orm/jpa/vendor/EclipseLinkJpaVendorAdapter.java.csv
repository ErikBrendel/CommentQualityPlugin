commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public PersistenceProvider getPersistenceProvider() {     return this.persistenceProvider. }
false;public;0;28;;@Override public Map<String, Object> getJpaPropertyMap() {     Map<String, Object> jpaProperties = new HashMap<>().     if (getDatabasePlatform() != null) {         jpaProperties.put(PersistenceUnitProperties.TARGET_DATABASE, getDatabasePlatform()).     } else {         String targetDatabase = determineTargetDatabaseName(getDatabase()).         if (targetDatabase != null) {             jpaProperties.put(PersistenceUnitProperties.TARGET_DATABASE, targetDatabase).         }     }     if (isGenerateDdl()) {         jpaProperties.put(PersistenceUnitProperties.DDL_GENERATION, PersistenceUnitProperties.CREATE_ONLY).         jpaProperties.put(PersistenceUnitProperties.DDL_GENERATION_MODE, PersistenceUnitProperties.DDL_DATABASE_GENERATION).     }     if (isShowSql()) {         jpaProperties.put(PersistenceUnitProperties.CATEGORY_LOGGING_LEVEL_ + org.eclipse.persistence.logging.SessionLog.SQL, Level.FINE.toString()).         jpaProperties.put(PersistenceUnitProperties.LOGGING_PARAMETERS, Boolean.TRUE.toString()).     }     return jpaProperties. }
true;protected;1;16;/**  * Determine the EclipseLink target database name for the given database.  * @param database the specified database  * @return the EclipseLink target database name, or {@code null} if none found  */ ;/**  * Determine the EclipseLink target database name for the given database.  * @param database the specified database  * @return the EclipseLink target database name, or {@code null} if none found  */ @Nullable protected String determineTargetDatabaseName(Database database) {     switch(database) {         case DB2:             return TargetDatabase.DB2.         case DERBY:             return TargetDatabase.Derby.         case HANA:             return TargetDatabase.HANA.         case HSQL:             return TargetDatabase.HSQL.         case INFORMIX:             return TargetDatabase.Informix.         case MYSQL:             return TargetDatabase.MySQL.         case ORACLE:             return TargetDatabase.Oracle.         case POSTGRESQL:             return TargetDatabase.PostgreSQL.         case SQL_SERVER:             return TargetDatabase.SQLServer.         case SYBASE:             return TargetDatabase.Sybase.         default:             return null.     } }
false;public;0;4;;@Override public EclipseLinkJpaDialect getJpaDialect() {     return this.jpaDialect. }
false;public;0;4;;@Override public Class<? extends EntityManager> getEntityManagerInterface() {     return JpaEntityManager.class. }
