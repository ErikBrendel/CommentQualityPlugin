# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1495868221;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1496242568;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1496837955;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1497341397;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1497362807;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1498780456;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1500448076;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1500495740;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1502974979;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1510341663;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1515364205;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1518264213;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1519295386;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1519308860;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1520373974;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> @Nullable 	public JpaVendorAdapter getJpaVendorAdapter();1530174524;Return the JpaVendorAdapter implementation for this EntityManagerFactory,_or {@code null} if not known.;@Nullable_	public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;nullable,public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1500495740;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1502974979;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1510341663;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1515364205;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1518264213;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1519295386;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1519308860;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1520373974;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(@Nullable String persistenceUnitName);1530174524;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(@Nullable String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,nullable,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1328020251;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or <code>null</code> if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,code,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1356735495;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1357119239;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1364391983;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1364559513;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1368482696;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1385412762;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1414678671;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1450534426;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1450706949;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1455808749;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1467730834;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public JpaVendorAdapter getJpaVendorAdapter();1485810955;Return the JpaVendorAdapter implementation for this_EntityManagerFactory, or {@code null} if not known.;public JpaVendorAdapter getJpaVendorAdapter() {_		return this.jpaVendorAdapter__	};return,the,jpa,vendor,adapter,implementation,for,this,entity,manager,factory,or,code,null,if,not,known;public,jpa,vendor,adapter,get,jpa,vendor,adapter,return,this,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1328020251;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard <code>javax.persistence.EntityManager</code>_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,code,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1356735495;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1357119239;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1364391983;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1364559513;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1368482696;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1385412762;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1414678671;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1450534426;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1450706949;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1455808749;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1467730834;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		Assert.isAssignable(EntityManager.class, emInterface)__		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,assert,is,assignable,entity,manager,class,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1485810955;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1495868221;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1496242568;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1496837955;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1497341397;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1497362807;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1498780456;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(Class<? extends EntityManager> emInterface);1500448076;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1496837955;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1497341397;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1497362807;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1498780456;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1500448076;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1500495740;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1502974979;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1510341663;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1515364205;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1518264213;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1519295386;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1519308860;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1520373974;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable;1530174524;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, @Nullable Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] == SynchronizationType.SYNCHRONIZED) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,nullable,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,synchronization,type,synchronized,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1328020251;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard <code>javax.persistence.EntityManagerFactory</code>_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,code,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1356735495;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1357119239;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1364391983;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1364559513;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1368482696;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1385412762;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1414678671;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1450534426;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1450706949;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1455808749;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1467730834;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		Assert.isAssignable(EntityManagerFactory.class, emfInterface)__		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,assert,is,assignable,entity,manager,factory,class,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1485810955;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1495868221;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1496242568;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1496837955;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1497341397;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1497362807;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1498780456;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1500448076;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1500495740;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1502974979;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1510341663;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1515364205;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1518264213;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1519295386;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1519308860;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1520373974;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface);1530174524;Specify the (potentially vendor-specific) EntityManagerFactory interface_that this EntityManagerFactory proxy is supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManagerFactory}_interface else._@see JpaVendorAdapter#getEntityManagerFactoryInterface();public void setEntityManagerFactoryInterface(Class<? extends EntityManagerFactory> emfInterface) {_		this.entityManagerFactoryInterface = emfInterface__	};specify,the,potentially,vendor,specific,entity,manager,factory,interface,that,this,entity,manager,factory,proxy,is,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,factory,interface,else,see,jpa,vendor,adapter,get,entity,manager,factory,interface;public,void,set,entity,manager,factory,interface,class,extends,entity,manager,factory,emf,interface,this,entity,manager,factory,interface,emf,interface
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1328020251;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1356735495;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1357119239;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1364391983;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1364559513;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1368482696;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1385412762;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1414678671;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1450534426;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1450706949;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1455808749;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1467730834;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1485810955;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1495868221;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1496242568;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1496837955;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1497341397;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1497362807;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter);1498780456;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1328020251;Specify JPA properties as a Map, to be passed into_<code>Persistence.createEntityManagerFactory</code> (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,code,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1356735495;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1357119239;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1364391983;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1364559513;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1368482696;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1385412762;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1414678671;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1450534426;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1450706949;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1455808749;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1467730834;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1485810955;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1495868221;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(Map<String, ?> jpaProperties);1496242568;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void destroy();1328020251;Close the EntityManagerFactory on bean factory shutdown.;public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> public void destroy();1357119239;Close the EntityManagerFactory on bean factory shutdown.;public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> public void destroy();1364391983;Close the EntityManagerFactory on bean factory shutdown.;public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> public void destroy();1364559513;Close the EntityManagerFactory on bean factory shutdown.;public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1356735495;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1368482696;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1385412762;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1414678671;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1450534426;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1450706949;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1455808749;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1467730834;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1485810955;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1495868221;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1496242568;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1496837955;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1497341397;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1497362807;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1498780456;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1500448076;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1500495740;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1500448076;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1500495740;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1502974979;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1510341663;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1515364205;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1518264213;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1519295386;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1519308860;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1520373974;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter);1530174524;Specify the JpaVendorAdapter implementation for the desired JPA provider,_if any. This will initialize appropriate defaults for the given provider,_such as persistence provider class and JpaDialect, unless locally_overridden in this FactoryBean.;public void setJpaVendorAdapter(@Nullable JpaVendorAdapter jpaVendorAdapter) {_		this.jpaVendorAdapter = jpaVendorAdapter__	};specify,the,jpa,vendor,adapter,implementation,for,the,desired,jpa,provider,if,any,this,will,initialize,appropriate,defaults,for,the,given,provider,such,as,persistence,provider,class,and,jpa,dialect,unless,locally,overridden,in,this,factory,bean;public,void,set,jpa,vendor,adapter,nullable,jpa,vendor,adapter,jpa,vendor,adapter,this,jpa,vendor,adapter,jpa,vendor,adapter
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1328020251;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		if (getJpaDialect() != null && getJpaDialect().supportsEntityManagerFactoryPlusOperations()) {_			this.plusOperations = getJpaDialect().getEntityManagerFactoryPlusOperations(emf)__			ifcs.add(EntityManagerFactoryPlusOperations.class)__		}_		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,if,get,jpa,dialect,null,get,jpa,dialect,supports,entity,manager,factory,plus,operations,this,plus,operations,get,jpa,dialect,get,entity,manager,factory,plus,operations,emf,ifcs,add,entity,manager,factory,plus,operations,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1356735495;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		if (getJpaDialect() != null && getJpaDialect().supportsEntityManagerFactoryPlusOperations()) {_			this.plusOperations = getJpaDialect().getEntityManagerFactoryPlusOperations(emf)__			ifcs.add(EntityManagerFactoryPlusOperations.class)__		}_		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,if,get,jpa,dialect,null,get,jpa,dialect,supports,entity,manager,factory,plus,operations,this,plus,operations,get,jpa,dialect,get,entity,manager,factory,plus,operations,emf,ifcs,add,entity,manager,factory,plus,operations,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1357119239;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		if (getJpaDialect() != null && getJpaDialect().supportsEntityManagerFactoryPlusOperations()) {_			this.plusOperations = getJpaDialect().getEntityManagerFactoryPlusOperations(emf)__			ifcs.add(EntityManagerFactoryPlusOperations.class)__		}_		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,if,get,jpa,dialect,null,get,jpa,dialect,supports,entity,manager,factory,plus,operations,this,plus,operations,get,jpa,dialect,get,entity,manager,factory,plus,operations,emf,ifcs,add,entity,manager,factory,plus,operations,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1364391983;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		if (getJpaDialect() != null && getJpaDialect().supportsEntityManagerFactoryPlusOperations()) {_			this.plusOperations = getJpaDialect().getEntityManagerFactoryPlusOperations(emf)__			ifcs.add(EntityManagerFactoryPlusOperations.class)__		}_		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,if,get,jpa,dialect,null,get,jpa,dialect,supports,entity,manager,factory,plus,operations,this,plus,operations,get,jpa,dialect,get,entity,manager,factory,plus,operations,emf,ifcs,add,entity,manager,factory,plus,operations,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1364559513;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1368482696;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1385412762;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1414678671;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1450534426;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1450706949;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1455808749;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1467730834;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1485810955;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1495868221;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf);1496242568;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1495868221;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1496242568;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1496837955;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1497341397;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1497362807;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1498780456;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1500448076;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1500495740;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1502974979;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1510341663;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1515364205;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1518264213;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1519295386;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1519308860;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1520373974;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> @Nullable 	public AsyncTaskExecutor getBootstrapExecutor();1530174524;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;@Nullable_	public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;nullable,public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1328020251;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1356735495;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1357119239;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1364391983;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1364559513;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1368482696;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1385412762;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1414678671;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1450534426;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1450706949;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1455808749;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1467730834;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1485810955;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1495868221;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1496242568;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1496837955;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1497341397;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1497362807;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1498780456;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(PersistenceProvider persistenceProvider);1500448076;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1328020251;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1356735495;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1357119239;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1364391983;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1364559513;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1368482696;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1385412762;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1414678671;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1450534426;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1450706949;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1455808749;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1467730834;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1485810955;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1495868221;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1496242568;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1496837955;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1497341397;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1497362807;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1498780456;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1500448076;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1500495740;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1502974979;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1510341663;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1515364205;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1518264213;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1519295386;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1519308860;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1520373974;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public Map<String, Object> getJpaPropertyMap();1530174524;Allow Map access to the JPA properties to be passed to the persistence_provider, with the option to add or override specific entries._<p>Useful for specifying entries directly, for example via_"jpaPropertyMap[myKey]".;public Map<String, Object> getJpaPropertyMap() {_		return this.jpaPropertyMap__	};allow,map,access,to,the,jpa,properties,to,be,passed,to,the,persistence,provider,with,the,option,to,add,or,override,specific,entries,p,useful,for,specifying,entries,directly,for,example,via,jpa,property,map,my,key;public,map,string,object,get,jpa,property,map,return,this,jpa,property,map
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1328020251;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the <code>getObject()</code> method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,code,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1356735495;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1357119239;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1364391983;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1364559513;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1368482696;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1385412762;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1414678671;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1450534426;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1450706949;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1455808749;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1467730834;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1485810955;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1495868221;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1496242568;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1496837955;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1497341397;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1497362807;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1498780456;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1500448076;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1500495740;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1502974979;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1510341663;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1515364205;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1518264213;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1519295386;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1519308860;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1520373974;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;1530174524;Subclasses must implement this method to create the EntityManagerFactory_that will be returned by the {@code getObject()} method._@return the EntityManagerFactory instance returned by this FactoryBean_@throws PersistenceException if the EntityManager cannot be created;protected abstract EntityManagerFactory createNativeEntityManagerFactory() throws PersistenceException_;subclasses,must,implement,this,method,to,create,the,entity,manager,factory,that,will,be,returned,by,the,code,get,object,method,return,the,entity,manager,factory,instance,returned,by,this,factory,bean,throws,persistence,exception,if,the,entity,manager,cannot,be,created;protected,abstract,entity,manager,factory,create,native,entity,manager,factory,throws,persistence,exception
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1496837955;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1497341397;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1497362807;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1498780456;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1500448076;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1500495740;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1502974979;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (this.entityManagerFactoryInterface != null) {_			ifcs.add(this.entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (this.entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + this.entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,if,this,entity,manager,factory,interface,null,ifcs,add,this,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,this,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,this,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1510341663;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1515364205;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1518264213;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs.toArray(new Class<?>[ifcs.size()]),_					new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,ifcs,to,array,new,class,ifcs,size,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1519295386;Create a proxy of the given EntityManagerFactory. We do this to be able_to return transaction-aware proxies for application-managed_EntityManagers, and to introduce the NamedEntityManagerFactory interface_@param emf EntityManagerFactory as returned by the persistence provider,_if initialized already_@return proxy entity manager;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(this.beanClassLoader,_					ClassUtils.toClassArray(ifcs), new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,of,the,given,entity,manager,factory,we,do,this,to,be,able,to,return,transaction,aware,proxies,for,application,managed,entity,managers,and,to,introduce,the,named,entity,manager,factory,interface,param,emf,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,proxy,entity,manager;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,class,utils,to,class,array,ifcs,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1519308860;Create a proxy for the given {@link EntityManagerFactory}. We do this to be able to_return a transaction-aware proxy for an application-managed {@link EntityManager}._@param emf the EntityManagerFactory as returned by the persistence provider,_if initialized already_@return the EntityManagerFactory proxy;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)__		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(this.beanClassLoader,_					ClassUtils.toClassArray(ifcs), new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,for,the,given,link,entity,manager,factory,we,do,this,to,be,able,to,return,a,transaction,aware,proxy,for,an,application,managed,link,entity,manager,param,emf,the,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,the,entity,manager,factory,proxy;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,class,utils,to,class,array,ifcs,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1520373974;Create a proxy for the given {@link EntityManagerFactory}. We do this to be able to_return a transaction-aware proxy for an application-managed {@link EntityManager}._@param emf the EntityManagerFactory as returned by the persistence provider,_if initialized already_@return the EntityManagerFactory proxy;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)___		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(this.beanClassLoader,_					ClassUtils.toClassArray(ifcs), new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,for,the,given,link,entity,manager,factory,we,do,this,to,be,able,to,return,a,transaction,aware,proxy,for,an,application,managed,link,entity,manager,param,emf,the,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,the,entity,manager,factory,proxy;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,class,utils,to,class,array,ifcs,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf);1530174524;Create a proxy for the given {@link EntityManagerFactory}. We do this to be able to_return a transaction-aware proxy for an application-managed {@link EntityManager}._@param emf the EntityManagerFactory as returned by the persistence provider,_if initialized already_@return the EntityManagerFactory proxy;protected EntityManagerFactory createEntityManagerFactoryProxy(@Nullable EntityManagerFactory emf) {_		Set<Class<?>> ifcs = new LinkedHashSet<>()__		Class<?> entityManagerFactoryInterface = this.entityManagerFactoryInterface__		if (entityManagerFactoryInterface != null) {_			ifcs.add(entityManagerFactoryInterface)__		}_		else if (emf != null) {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(emf.getClass(), this.beanClassLoader))__		}_		else {_			ifcs.add(EntityManagerFactory.class)__		}_		ifcs.add(EntityManagerFactoryInfo.class)___		try {_			return (EntityManagerFactory) Proxy.newProxyInstance(this.beanClassLoader,_					ClassUtils.toClassArray(ifcs), new ManagedEntityManagerFactoryInvocationHandler(this))__		}_		catch (IllegalArgumentException ex) {_			if (entityManagerFactoryInterface != null) {_				throw new IllegalStateException("EntityManagerFactory interface [" + entityManagerFactoryInterface +_						"] seems to conflict with Spring's EntityManagerFactoryInfo mixin - consider resetting the "+_						"'entityManagerFactoryInterface' property to plain [javax.persistence.EntityManagerFactory]", ex)__			}_			else {_				throw new IllegalStateException("Conflicting EntityManagerFactory interfaces - " +_						"consider specifying the 'jpaVendorAdapter' or 'entityManagerFactoryInterface' property " +_						"to select a specific EntityManagerFactory interface to proceed with", ex)__			}_		}_	};create,a,proxy,for,the,given,link,entity,manager,factory,we,do,this,to,be,able,to,return,a,transaction,aware,proxy,for,an,application,managed,link,entity,manager,param,emf,the,entity,manager,factory,as,returned,by,the,persistence,provider,if,initialized,already,return,the,entity,manager,factory,proxy;protected,entity,manager,factory,create,entity,manager,factory,proxy,nullable,entity,manager,factory,emf,set,class,ifcs,new,linked,hash,set,class,entity,manager,factory,interface,this,entity,manager,factory,interface,if,entity,manager,factory,interface,null,ifcs,add,entity,manager,factory,interface,else,if,emf,null,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,emf,get,class,this,bean,class,loader,else,ifcs,add,entity,manager,factory,class,ifcs,add,entity,manager,factory,info,class,try,return,entity,manager,factory,proxy,new,proxy,instance,this,bean,class,loader,class,utils,to,class,array,ifcs,new,managed,entity,manager,factory,invocation,handler,this,catch,illegal,argument,exception,ex,if,entity,manager,factory,interface,null,throw,new,illegal,state,exception,entity,manager,factory,interface,entity,manager,factory,interface,seems,to,conflict,with,spring,s,entity,manager,factory,info,mixin,consider,resetting,the,entity,manager,factory,interface,property,to,plain,javax,persistence,entity,manager,factory,ex,else,throw,new,illegal,state,exception,conflicting,entity,manager,factory,interfaces,consider,specifying,the,jpa,vendor,adapter,or,entity,manager,factory,interface,property,to,select,a,specific,entity,manager,factory,interface,to,proceed,with,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1502974979;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1510341663;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1515364205;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1518264213;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1519295386;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1519308860;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1520373974;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public EntityManagerFactory getObject();1530174524;Return the singleton EntityManagerFactory.;@Override_	@Nullable_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,nullable,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1500448076;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1500495740;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1502974979;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1510341663;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1515364205;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1518264213;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1519295386;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1519308860;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1520373974;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor);1530174524;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(@Nullable AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,nullable,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1328020251;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1356735495;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1357119239;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1364391983;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1364559513;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1368482696;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1385412762;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1414678671;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1450534426;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1450706949;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1455808749;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1467730834;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1485810955;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1495868221;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1496242568;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1496837955;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1497341397;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1497362807;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1498780456;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setPersistenceUnitName(String persistenceUnitName);1500448076;Specify the name of the EntityManagerFactory configuration._<p>Default is none, indicating the default EntityManagerFactory_configuration. The persistence provider will throw an exception if_ambiguous EntityManager configurations are found._@see javax.persistence.Persistence#createEntityManagerFactory(String);public void setPersistenceUnitName(String persistenceUnitName) {_		this.persistenceUnitName = persistenceUnitName__	};specify,the,name,of,the,entity,manager,factory,configuration,p,default,is,none,indicating,the,default,entity,manager,factory,configuration,the,persistence,provider,will,throw,an,exception,if,ambiguous,entity,manager,configurations,are,found,see,javax,persistence,persistence,create,entity,manager,factory,string;public,void,set,persistence,unit,name,string,persistence,unit,name,this,persistence,unit,name,persistence,unit,name
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1328020251;Specify JPA properties, to be passed into_<code>Persistence.createEntityManagerFactory</code> (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,code,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1356735495;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1357119239;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1364391983;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1364559513;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1368482696;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1385412762;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1414678671;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1450534426;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1450706949;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1455808749;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1467730834;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1485810955;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1495868221;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1496242568;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1496837955;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1497341397;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1497362807;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1498780456;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1500448076;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1500495740;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1502974979;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1510341663;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1515364205;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1518264213;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1519295386;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1519308860;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1520373974;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> public void setJpaProperties(Properties jpaProperties);1530174524;Specify JPA properties, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a String "value" (parsed via PropertiesEditor) or a_"props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaProperties(Properties jpaProperties) {_		CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap)__	};specify,jpa,properties,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,string,value,parsed,via,properties,editor,or,a,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,properties,properties,jpa,properties,collection,utils,merge,properties,into,map,jpa,properties,this,jpa,property,map
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1356735495;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1368482696;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1385412762;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1414678671;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1450534426;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1450706949;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1455808749;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1467730834;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1485810955;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1495868221;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1496242568;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1496837955;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1497341397;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1497362807;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (logger.isInfoEnabled()) {_			logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__		}_		this.entityManagerFactory.close()__	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1498780456;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1500448076;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1500495740;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1502974979;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1510341663;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1515364205;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1518264213;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1519295386;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1519308860;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1520373974;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> @Override 	public void destroy();1530174524;Close the EntityManagerFactory on bean factory shutdown.;@Override_	public void destroy() {_		if (this.entityManagerFactory != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'")__			}_			this.entityManagerFactory.close()__		}_	};close,the,entity,manager,factory,on,bean,factory,shutdown;override,public,void,destroy,if,this,entity,manager,factory,null,if,logger,is,info,enabled,logger,info,closing,jpa,entity,manager,factory,for,persistence,unit,get,persistence,unit,name,this,entity,manager,factory,close
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1450534426;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1450706949;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1455808749;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1467730834;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1485810955;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1495868221;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1496242568;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1496837955;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1497341397;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1497362807;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1498780456;Specify an asynchronous executor for background bootstrapping,_e.g. a {@link org.springframework.core.task.SimpleAsyncTaskExecutor}._<p>{@code EntityManagerFactory} initialization will then switch into background_bootstrap mode, with a {@code EntityManagerFactory} proxy immediately returned for_injection purposes instead of waiting for the JPA provider's bootstrapping to complete._However, note that the first actual call to a {@code EntityManagerFactory} method will_then block until the JPA provider's bootstrapping completed, if not ready by then._For maximum benefit, make sure to avoid early {@code EntityManagerFactory} calls_in init methods of related beans, even for metadata introspection purposes._@since 4.3;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};specify,an,asynchronous,executor,for,background,bootstrapping,e,g,a,link,org,springframework,core,task,simple,async,task,executor,p,code,entity,manager,factory,initialization,will,then,switch,into,background,bootstrap,mode,with,a,code,entity,manager,factory,proxy,immediately,returned,for,injection,purposes,instead,of,waiting,for,the,jpa,provider,s,bootstrapping,to,complete,however,note,that,the,first,actual,call,to,a,code,entity,manager,factory,method,will,then,block,until,the,jpa,provider,s,bootstrapping,completed,if,not,ready,by,then,for,maximum,benefit,make,sure,to,avoid,early,code,entity,manager,factory,calls,in,init,methods,of,related,beans,even,for,metadata,introspection,purposes,since,4,3;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
AbstractEntityManagerFactoryBean -> public AsyncTaskExecutor getBootstrapExecutor();1450534426;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public AsyncTaskExecutor getBootstrapExecutor();1450706949;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public AsyncTaskExecutor getBootstrapExecutor();1455808749;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public AsyncTaskExecutor getBootstrapExecutor();1467730834;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public AsyncTaskExecutor getBootstrapExecutor();1485810955;Return the asynchronous executor for background bootstrapping, if any._@since 4.3;public AsyncTaskExecutor getBootstrapExecutor() {_		return this.bootstrapExecutor__	};return,the,asynchronous,executor,for,background,bootstrapping,if,any,since,4,3;public,async,task,executor,get,bootstrap,executor,return,this,bootstrap,executor
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1496837955;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1497341397;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1497362807;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1498780456;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1500448076;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1500495740;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1502974979;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1510341663;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1515364205;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1518264213;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1519295386;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1519308860;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1520373974;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties);1530174524;Specify JPA properties as a Map, to be passed into_{@code Persistence.createEntityManagerFactory} (if any)._<p>Can be populated with a "map" or "props" element in XML bean definitions._@see javax.persistence.Persistence#createEntityManagerFactory(String, java.util.Map)_@see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(javax.persistence.spi.PersistenceUnitInfo, java.util.Map);public void setJpaPropertyMap(@Nullable Map<String, ?> jpaProperties) {_		if (jpaProperties != null) {_			this.jpaPropertyMap.putAll(jpaProperties)__		}_	};specify,jpa,properties,as,a,map,to,be,passed,into,code,persistence,create,entity,manager,factory,if,any,p,can,be,populated,with,a,map,or,props,element,in,xml,bean,definitions,see,javax,persistence,persistence,create,entity,manager,factory,string,java,util,map,see,javax,persistence,spi,persistence,provider,create,container,entity,manager,factory,javax,persistence,spi,persistence,unit,info,java,util,map;public,void,set,jpa,property,map,nullable,map,string,jpa,properties,if,jpa,properties,null,this,jpa,property,map,put,all,jpa,properties
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1500495740;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1502974979;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1510341663;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1515364205;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1518264213;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1519295386;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1519308860;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1520373974;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(@Nullable JpaDialect jpaDialect);1530174524;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(@Nullable JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,nullable,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1328020251;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo /_EntityManagerFactoryPlusOperations / the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getDeclaringClass().equals(EntityManagerFactoryPlusOperations.class)) {_			return method.invoke(this.plusOperations, args)__		}_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,entity,manager,factory,plus,operations,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,declaring,class,equals,entity,manager,factory,plus,operations,class,return,method,invoke,this,plus,operations,args,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1356735495;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo /_EntityManagerFactoryPlusOperations / the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getDeclaringClass().equals(EntityManagerFactoryPlusOperations.class)) {_			return method.invoke(this.plusOperations, args)__		}_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,entity,manager,factory,plus,operations,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,declaring,class,equals,entity,manager,factory,plus,operations,class,return,method,invoke,this,plus,operations,args,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1357119239;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo /_EntityManagerFactoryPlusOperations / the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getDeclaringClass().equals(EntityManagerFactoryPlusOperations.class)) {_			return method.invoke(this.plusOperations, args)__		}_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,entity,manager,factory,plus,operations,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,declaring,class,equals,entity,manager,factory,plus,operations,class,return,method,invoke,this,plus,operations,args,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1364391983;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo /_EntityManagerFactoryPlusOperations / the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getDeclaringClass().equals(EntityManagerFactoryPlusOperations.class)) {_			return method.invoke(this.plusOperations, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					this.nativeEntityManagerFactory.createEntityManager((Map) args[1]) :_					this.nativeEntityManagerFactory.createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,entity,manager,factory,plus,operations,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,declaring,class,equals,entity,manager,factory,plus,operations,class,return,method,invoke,this,plus,operations,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,this,native,entity,manager,factory,create,entity,manager,map,args,1,this,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1364559513;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					this.nativeEntityManagerFactory.createEntityManager((Map) args[1]) :_					this.nativeEntityManagerFactory.createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,this,native,entity,manager,factory,create,entity,manager,map,args,1,this,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1368482696;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					this.nativeEntityManagerFactory.createEntityManager((Map) args[1]) :_					this.nativeEntityManagerFactory.createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,this,native,entity,manager,factory,create,entity,manager,map,args,1,this,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1385412762;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					this.nativeEntityManagerFactory.createEntityManager((Map<?, ?>) args[1]) :_					this.nativeEntityManagerFactory.createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,this,native,entity,manager,factory,create,entity,manager,map,args,1,this,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1414678671;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					this.nativeEntityManagerFactory.createEntityManager((Map<?, ?>) args[1]) :_					this.nativeEntityManagerFactory.createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(this.nativeEntityManagerFactory, args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,this,native,entity,manager,factory,create,entity,manager,map,args,1,this,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,this,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1450534426;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1450706949;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1455808749;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1467730834;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1485810955;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1495868221;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> Object invokeProxyMethod(Method method, Object[] args) throws Throwable;1496242568;Delegate an incoming invocation from the proxy, dispatching to EntityManagerFactoryInfo_or the native EntityManagerFactory accordingly.;Object invokeProxyMethod(Method method, Object[] args) throws Throwable {_		if (method.getDeclaringClass().isAssignableFrom(EntityManagerFactoryInfo.class)) {_			return method.invoke(this, args)__		}_		else if (method.getName().equals("createEntityManager") && args != null && args.length > 0 &&_				args[0] != null && args[0].getClass().isEnum() && "SYNCHRONIZED".equals(args[0].toString())) {_			_			_			EntityManager rawEntityManager = (args.length > 1 ?_					getNativeEntityManagerFactory().createEntityManager((Map<?, ?>) args[1]) :_					getNativeEntityManagerFactory().createEntityManager())__			return ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, true)__		}__		_		if (args != null) {_			for (int i = 0_ i < args.length_ i++) {_				Object arg = args[i]__				if (arg instanceof Query && Proxy.isProxyClass(arg.getClass())) {_					_					_					_					try {_						args[i] = ((Query) arg).unwrap(null)__					}_					catch (RuntimeException ex) {_						_					}_				}_			}_		}__		_		Object retVal = method.invoke(getNativeEntityManagerFactory(), args)__		if (retVal instanceof EntityManager) {_			_			EntityManager rawEntityManager = (EntityManager) retVal__			retVal = ExtendedEntityManagerCreator.createApplicationManagedEntityManager(rawEntityManager, this, false)__		}_		return retVal__	};delegate,an,incoming,invocation,from,the,proxy,dispatching,to,entity,manager,factory,info,or,the,native,entity,manager,factory,accordingly;object,invoke,proxy,method,method,method,object,args,throws,throwable,if,method,get,declaring,class,is,assignable,from,entity,manager,factory,info,class,return,method,invoke,this,args,else,if,method,get,name,equals,create,entity,manager,args,null,args,length,0,args,0,null,args,0,get,class,is,enum,synchronized,equals,args,0,to,string,entity,manager,raw,entity,manager,args,length,1,get,native,entity,manager,factory,create,entity,manager,map,args,1,get,native,entity,manager,factory,create,entity,manager,return,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,true,if,args,null,for,int,i,0,i,args,length,i,object,arg,args,i,if,arg,instanceof,query,proxy,is,proxy,class,arg,get,class,try,args,i,query,arg,unwrap,null,catch,runtime,exception,ex,object,ret,val,method,invoke,get,native,entity,manager,factory,args,if,ret,val,instanceof,entity,manager,entity,manager,raw,entity,manager,entity,manager,ret,val,ret,val,extended,entity,manager,creator,create,application,managed,entity,manager,raw,entity,manager,this,false,return,ret,val
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1328020251;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1356735495;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1357119239;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1364391983;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1364559513;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1368482696;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1385412762;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1414678671;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1450534426;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1450706949;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1455808749;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1467730834;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1485810955;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1495868221;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1496242568;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1496837955;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1497341397;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1497362807;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1498780456;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public void setJpaDialect(JpaDialect jpaDialect);1500448076;Specify the vendor-specific JpaDialect implementation to associate with_this EntityManagerFactory. This will be exposed through the_EntityManagerFactoryInfo interface, to be picked up as default dialect by_accessors that intend to use JpaDialect functionality._@see EntityManagerFactoryInfo#getJpaDialect();public void setJpaDialect(JpaDialect jpaDialect) {_		this.jpaDialect = jpaDialect__	};specify,the,vendor,specific,jpa,dialect,implementation,to,associate,with,this,entity,manager,factory,this,will,be,exposed,through,the,entity,manager,factory,info,interface,to,be,picked,up,as,default,dialect,by,accessors,that,intend,to,use,jpa,dialect,functionality,see,entity,manager,factory,info,get,jpa,dialect;public,void,set,jpa,dialect,jpa,dialect,jpa,dialect,this,jpa,dialect,jpa,dialect
AbstractEntityManagerFactoryBean -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1328020251;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1357119239;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1364391983;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> public DataAccessException translateExceptionIfPossible(RuntimeException ex);1364559513;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1356735495;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1368482696;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1385412762;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1414678671;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1450534426;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1450706949;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1455808749;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1467730834;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1485810955;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1495868221;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1496242568;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1496837955;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1497341397;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1497362807;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1498780456;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1500448076;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> @Override 	public EntityManagerFactory getObject();1500495740;Return the singleton EntityManagerFactory.;@Override_	public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;override,public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1500495740;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1502974979;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1510341663;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1515364205;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1518264213;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1519295386;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1519308860;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1520373974;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface);1530174524;Specify the (potentially vendor-specific) EntityManager interface_that this factory's EntityManagers are supposed to implement._<p>The default will be taken from the specific JpaVendorAdapter, if any,_or set to the standard {@code javax.persistence.EntityManager}_interface else._@see JpaVendorAdapter#getEntityManagerInterface()_@see EntityManagerFactoryInfo#getEntityManagerInterface();public void setEntityManagerInterface(@Nullable Class<? extends EntityManager> emInterface) {_		this.entityManagerInterface = emInterface__	};specify,the,potentially,vendor,specific,entity,manager,interface,that,this,factory,s,entity,managers,are,supposed,to,implement,p,the,default,will,be,taken,from,the,specific,jpa,vendor,adapter,if,any,or,set,to,the,standard,code,javax,persistence,entity,manager,interface,else,see,jpa,vendor,adapter,get,entity,manager,interface,see,entity,manager,factory,info,get,entity,manager,interface;public,void,set,entity,manager,interface,nullable,class,extends,entity,manager,em,interface,this,entity,manager,interface,em,interface
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1328020251;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1356735495;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1357119239;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1364391983;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1364559513;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1368482696;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1385412762;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1414678671;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1450534426;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1450706949;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1455808749;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1467730834;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		Assert.isAssignable(PersistenceProvider.class, persistenceProviderClass)__		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,assert,is,assignable,persistence,provider,class,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1485810955;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1495868221;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1496242568;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1496837955;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1497341397;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1497362807;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1498780456;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1500448076;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1500495740;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1502974979;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1510341663;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1515364205;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1518264213;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1519295386;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1519308860;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1520373974;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass);1530174524;Set the PersistenceProvider implementation class to use for creating the_EntityManagerFactory. If not specified, the persistence provider will be_taken from the JpaVendorAdapter (if any) or retrieved through scanning_(as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProviderClass(Class<? extends PersistenceProvider> persistenceProviderClass) {_		this.persistenceProvider = BeanUtils.instantiateClass(persistenceProviderClass)__	};set,the,persistence,provider,implementation,class,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,retrieved,through,scanning,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,class,class,extends,persistence,provider,persistence,provider,class,this,persistence,provider,bean,utils,instantiate,class,persistence,provider,class
AbstractEntityManagerFactoryBean -> public EntityManagerFactory getObject();1328020251;Return the singleton EntityManagerFactory.;public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public EntityManagerFactory getObject();1357119239;Return the singleton EntityManagerFactory.;public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public EntityManagerFactory getObject();1364391983;Return the singleton EntityManagerFactory.;public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public EntityManagerFactory getObject();1364559513;Return the singleton EntityManagerFactory.;public EntityManagerFactory getObject() {_		return this.entityManagerFactory__	};return,the,singleton,entity,manager,factory;public,entity,manager,factory,get,object,return,this,entity,manager,factory
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1500495740;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1502974979;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1510341663;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1515364205;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1518264213;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1519295386;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1519308860;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1520373974;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider);1530174524;Set the PersistenceProvider instance to use for creating the_EntityManagerFactory. If not specified, the persistence provider_will be taken from the JpaVendorAdapter (if any) or determined_by the persistence unit deployment descriptor (as far as possible)._@see JpaVendorAdapter#getPersistenceProvider()_@see javax.persistence.spi.PersistenceProvider_@see javax.persistence.Persistence;public void setPersistenceProvider(@Nullable PersistenceProvider persistenceProvider) {_		this.persistenceProvider = persistenceProvider__	};set,the,persistence,provider,instance,to,use,for,creating,the,entity,manager,factory,if,not,specified,the,persistence,provider,will,be,taken,from,the,jpa,vendor,adapter,if,any,or,determined,by,the,persistence,unit,deployment,descriptor,as,far,as,possible,see,jpa,vendor,adapter,get,persistence,provider,see,javax,persistence,spi,persistence,provider,see,javax,persistence,persistence;public,void,set,persistence,provider,nullable,persistence,provider,persistence,provider,this,persistence,provider,persistence,provider
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1502974979;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		return (this.jpaDialect != null ? this.jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,return,this,jpa,dialect,null,this,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1510341663;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1515364205;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1518264213;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1519295386;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1519308860;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1520373974;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
AbstractEntityManagerFactoryBean -> @Override 	@Nullable 	public DataAccessException translateExceptionIfPossible(RuntimeException ex);1530174524;Implementation of the PersistenceExceptionTranslator interface, as_autodetected by Spring's PersistenceExceptionTranslationPostProcessor._<p>Uses the dialect's conversion if possible_ otherwise falls back to_standard JPA exception conversion._@see org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor_@see JpaDialect#translateExceptionIfPossible_@see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible;@Override_	@Nullable_	public DataAccessException translateExceptionIfPossible(RuntimeException ex) {_		JpaDialect jpaDialect = getJpaDialect()__		return (jpaDialect != null ? jpaDialect.translateExceptionIfPossible(ex) :_				EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex))__	};implementation,of,the,persistence,exception,translator,interface,as,autodetected,by,spring,s,persistence,exception,translation,post,processor,p,uses,the,dialect,s,conversion,if,possible,otherwise,falls,back,to,standard,jpa,exception,conversion,see,org,springframework,dao,annotation,persistence,exception,translation,post,processor,see,jpa,dialect,translate,exception,if,possible,see,entity,manager,factory,utils,convert,jpa,access,exception,if,possible;override,nullable,public,data,access,exception,translate,exception,if,possible,runtime,exception,ex,jpa,dialect,jpa,dialect,get,jpa,dialect,return,jpa,dialect,null,jpa,dialect,translate,exception,if,possible,ex,entity,manager,factory,utils,convert,jpa,access,exception,if,possible,ex
