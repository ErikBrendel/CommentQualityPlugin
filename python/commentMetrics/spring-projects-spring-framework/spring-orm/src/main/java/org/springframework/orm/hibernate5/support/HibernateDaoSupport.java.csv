commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;5;/**  * Set the Hibernate SessionFactory to be used by this DAO.  * Will automatically create a HibernateTemplate for the given SessionFactory.  * @see #createHibernateTemplate  * @see #setHibernateTemplate  */ ;/**  * Set the Hibernate SessionFactory to be used by this DAO.  * Will automatically create a HibernateTemplate for the given SessionFactory.  * @see #createHibernateTemplate  * @see #setHibernateTemplate  */ public final void setSessionFactory(SessionFactory sessionFactory) {     if (this.hibernateTemplate == null || sessionFactory != this.hibernateTemplate.getSessionFactory()) {         this.hibernateTemplate = createHibernateTemplate(sessionFactory).     } }
true;protected;1;3;/**  * Create a HibernateTemplate for the given SessionFactory.  * Only invoked if populating the DAO with a SessionFactory reference!  * <p>Can be overridden in subclasses to provide a HibernateTemplate instance  * with different configuration, or a custom HibernateTemplate subclass.  * @param sessionFactory the Hibernate SessionFactory to create a HibernateTemplate for  * @return the new HibernateTemplate instance  * @see #setSessionFactory  */ ;/**  * Create a HibernateTemplate for the given SessionFactory.  * Only invoked if populating the DAO with a SessionFactory reference!  * <p>Can be overridden in subclasses to provide a HibernateTemplate instance  * with different configuration, or a custom HibernateTemplate subclass.  * @param sessionFactory the Hibernate SessionFactory to create a HibernateTemplate for  * @return the new HibernateTemplate instance  * @see #setSessionFactory  */ protected HibernateTemplate createHibernateTemplate(SessionFactory sessionFactory) {     return new HibernateTemplate(sessionFactory). }
true;public,final;0;4;/**  * Return the Hibernate SessionFactory used by this DAO.  */ ;/**  * Return the Hibernate SessionFactory used by this DAO.  */ @Nullable public final SessionFactory getSessionFactory() {     return (this.hibernateTemplate != null ? this.hibernateTemplate.getSessionFactory() : null). }
true;public,final;1;3;/**  * Set the HibernateTemplate for this DAO explicitly,  * as an alternative to specifying a SessionFactory.  * @see #setSessionFactory  */ ;/**  * Set the HibernateTemplate for this DAO explicitly,  * as an alternative to specifying a SessionFactory.  * @see #setSessionFactory  */ public final void setHibernateTemplate(@Nullable HibernateTemplate hibernateTemplate) {     this.hibernateTemplate = hibernateTemplate. }
true;public,final;0;4;/**  * Return the HibernateTemplate for this DAO,  * pre-initialized with the SessionFactory or set explicitly.  * <p><b>Note: The returned HibernateTemplate is a shared instance.</b>  * You may introspect its configuration, but not modify the configuration  * (other than from within an {@link #initDao} implementation).  * Consider creating a custom HibernateTemplate instance via  * {@code new HibernateTemplate(getSessionFactory())}, in which case  * you're allowed to customize the settings on the resulting instance.  */ ;/**  * Return the HibernateTemplate for this DAO,  * pre-initialized with the SessionFactory or set explicitly.  * <p><b>Note: The returned HibernateTemplate is a shared instance.</b>  * You may introspect its configuration, but not modify the configuration  * (other than from within an {@link #initDao} implementation).  * Consider creating a custom HibernateTemplate instance via  * {@code new HibernateTemplate(getSessionFactory())}, in which case  * you're allowed to customize the settings on the resulting instance.  */ @Nullable public final HibernateTemplate getHibernateTemplate() {     return this.hibernateTemplate. }
false;protected,final;0;6;;@Override protected final void checkDaoConfig() {     if (this.hibernateTemplate == null) {         throw new IllegalArgumentException("'sessionFactory' or 'hibernateTemplate' is required").     } }
true;protected,final;0;5;/**  * Conveniently obtain the current Hibernate Session.  * @return the Hibernate Session  * @throws DataAccessResourceFailureException if the Session couldn't be created  * @see SessionFactory#getCurrentSession()  */ ;/**  * Conveniently obtain the current Hibernate Session.  * @return the Hibernate Session  * @throws DataAccessResourceFailureException if the Session couldn't be created  * @see SessionFactory#getCurrentSession()  */ protected final Session currentSession() throws DataAccessResourceFailureException {     SessionFactory sessionFactory = getSessionFactory().     Assert.state(sessionFactory != null, "No SessionFactory set").     return sessionFactory.getCurrentSession(). }
