commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the vendor-specific persistence provider.  */ ;/**  * Return the vendor-specific persistence provider.  */ PersistenceProvider getPersistenceProvider().
true;default;0;4;/**  * Return the name of the persistence provider's root package  * (e.g. "oracle.toplink.essentials"). Will be used for  * excluding provider classes from temporary class overriding.  * @since 2.5.2  */ ;/**  * Return the name of the persistence provider's root package  * (e.g. "oracle.toplink.essentials"). Will be used for  * excluding provider classes from temporary class overriding.  * @since 2.5.2  */ @Nullable default String getPersistenceProviderRootPackage() {     return null. }
true;default;1;3;/**  * Return a Map of vendor-specific JPA properties for the given persistence  * unit, typically based on settings in this JpaVendorAdapter instance.  * <p>Note that there might be further JPA properties defined on the  * EntityManagerFactory bean, which might potentially override individual  * JPA property values specified here.  * <p>This implementation delegates to {@link #getJpaPropertyMap()} for  * non-unit-dependent properties. Effectively, this PersistenceUnitInfo-based  * variant only needs to be implemented if there is an actual need to react  * to unit-specific characteristics such as the transaction type.  * <p><b>NOTE:</b> This variant will only be invoked in case of Java EE style  * container bootstrapping where a {@link PersistenceUnitInfo} is present  * (i.e. {@link LocalContainerEntityManagerFactoryBean}. In case of simple  * Java SE style bootstrapping via {@link javax.persistence.Persistence}  * (i.e. {@link LocalEntityManagerFactoryBean}), the parameter-less  * {@link #getJpaPropertyMap()} variant will be called directly.  * @param pui the PersistenceUnitInfo for the current persistence unit  * @return a Map of JPA properties, as accepted by the standard JPA bootstrap  * facilities, or an empty Map if there are no properties to expose  * @since 4.3.13  * @see PersistenceUnitInfo#getTransactionType()  * @see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(PersistenceUnitInfo, Map)  */ ;/**  * Return a Map of vendor-specific JPA properties for the given persistence  * unit, typically based on settings in this JpaVendorAdapter instance.  * <p>Note that there might be further JPA properties defined on the  * EntityManagerFactory bean, which might potentially override individual  * JPA property values specified here.  * <p>This implementation delegates to {@link #getJpaPropertyMap()} for  * non-unit-dependent properties. Effectively, this PersistenceUnitInfo-based  * variant only needs to be implemented if there is an actual need to react  * to unit-specific characteristics such as the transaction type.  * <p><b>NOTE:</b> This variant will only be invoked in case of Java EE style  * container bootstrapping where a {@link PersistenceUnitInfo} is present  * (i.e. {@link LocalContainerEntityManagerFactoryBean}. In case of simple  * Java SE style bootstrapping via {@link javax.persistence.Persistence}  * (i.e. {@link LocalEntityManagerFactoryBean}), the parameter-less  * {@link #getJpaPropertyMap()} variant will be called directly.  * @param pui the PersistenceUnitInfo for the current persistence unit  * @return a Map of JPA properties, as accepted by the standard JPA bootstrap  * facilities, or an empty Map if there are no properties to expose  * @since 4.3.13  * @see PersistenceUnitInfo#getTransactionType()  * @see javax.persistence.spi.PersistenceProvider#createContainerEntityManagerFactory(PersistenceUnitInfo, Map)  */ default Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {     return getJpaPropertyMap(). }
true;default;0;3;/**  * Return a Map of vendor-specific JPA properties,  * typically based on settings in this JpaVendorAdapter instance.  * <p>Note that there might be further JPA properties defined on the  * EntityManagerFactory bean, which might potentially override individual  * JPA property values specified here.  * @return a Map of JPA properties, as accepted by the standard JPA bootstrap  * facilities, or an empty Map if there are no properties to expose  * @see javax.persistence.Persistence#createEntityManagerFactory(String, Map)  */ ;/**  * Return a Map of vendor-specific JPA properties,  * typically based on settings in this JpaVendorAdapter instance.  * <p>Note that there might be further JPA properties defined on the  * EntityManagerFactory bean, which might potentially override individual  * JPA property values specified here.  * @return a Map of JPA properties, as accepted by the standard JPA bootstrap  * facilities, or an empty Map if there are no properties to expose  * @see javax.persistence.Persistence#createEntityManagerFactory(String, Map)  */ default Map<String, ?> getJpaPropertyMap() {     return Collections.emptyMap(). }
true;default;0;4;/**  * Return the vendor-specific JpaDialect implementation for this  * provider, or {@code null} if there is none.  */ ;/**  * Return the vendor-specific JpaDialect implementation for this  * provider, or {@code null} if there is none.  */ @Nullable default JpaDialect getJpaDialect() {     return null. }
true;default;0;3;/**  * Return the vendor-specific EntityManagerFactory interface  * that the EntityManagerFactory proxy is supposed to implement.  * <p>If the provider does not offer any EntityManagerFactory extensions,  * the adapter should simply return the standard  * {@link javax.persistence.EntityManagerFactory} class here.  * @since 2.5.2  */ ;/**  * Return the vendor-specific EntityManagerFactory interface  * that the EntityManagerFactory proxy is supposed to implement.  * <p>If the provider does not offer any EntityManagerFactory extensions,  * the adapter should simply return the standard  * {@link javax.persistence.EntityManagerFactory} class here.  * @since 2.5.2  */ default Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {     return EntityManagerFactory.class. }
true;default;0;3;/**  * Return the vendor-specific EntityManager interface  * that this provider's EntityManagers will implement.  * <p>If the provider does not offer any EntityManager extensions,  * the adapter should simply return the standard  * {@link javax.persistence.EntityManager} class here.  */ ;/**  * Return the vendor-specific EntityManager interface  * that this provider's EntityManagers will implement.  * <p>If the provider does not offer any EntityManager extensions,  * the adapter should simply return the standard  * {@link javax.persistence.EntityManager} class here.  */ default Class<? extends EntityManager> getEntityManagerInterface() {     return EntityManager.class. }
true;default;1;2;/**  * Optional callback for post-processing the native EntityManagerFactory  * before active use.  * <p>This can be used for triggering vendor-specific initialization processes.  * While this is not expected to be used for most providers, it is included  * here as a general extension hook.  */ ;/**  * Optional callback for post-processing the native EntityManagerFactory  * before active use.  * <p>This can be used for triggering vendor-specific initialization processes.  * While this is not expected to be used for most providers, it is included  * here as a general extension hook.  */ default void postProcessEntityManagerFactory(EntityManagerFactory emf) { }
