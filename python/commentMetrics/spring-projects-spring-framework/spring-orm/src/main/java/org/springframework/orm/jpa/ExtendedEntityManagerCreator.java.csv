# id;timestamp;commentText;codeText;commentWords;codeWords
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged);1328020251;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		EntityManagerPlusOperations plusOperations = null__		if (jpaDialect != null && jpaDialect.supportsEntityManagerPlusOperations()) {_			plusOperations = jpaDialect.getEntityManagerPlusOperations(rawEntityManager)__		}_		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), plusOperations, jpaDialect, jta, containerManaged)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,entity,manager,plus,operations,plus,operations,null,if,jpa,dialect,null,jpa,dialect,supports,entity,manager,plus,operations,plus,operations,jpa,dialect,get,entity,manager,plus,operations,raw,entity,manager,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,plus,operations,jpa,dialect,jta,container,managed
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged);1356735495;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		EntityManagerPlusOperations plusOperations = null__		if (jpaDialect != null && jpaDialect.supportsEntityManagerPlusOperations()) {_			plusOperations = jpaDialect.getEntityManagerPlusOperations(rawEntityManager)__		}_		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), plusOperations, jpaDialect, jta, containerManaged)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,entity,manager,plus,operations,plus,operations,null,if,jpa,dialect,null,jpa,dialect,supports,entity,manager,plus,operations,plus,operations,jpa,dialect,get,entity,manager,plus,operations,raw,entity,manager,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,plus,operations,jpa,dialect,jta,container,managed
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged);1357119239;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean containerManaged) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		EntityManagerPlusOperations plusOperations = null__		if (jpaDialect != null && jpaDialect.supportsEntityManagerPlusOperations()) {_			plusOperations = jpaDialect.getEntityManagerPlusOperations(rawEntityManager)__		}_		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), plusOperations, jpaDialect, jta, containerManaged)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,entity,manager,plus,operations,plus,operations,null,if,jpa,dialect,null,jpa,dialect,supports,entity,manager,plus,operations,plus,operations,jpa,dialect,get,entity,manager,plus,operations,raw,entity,manager,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,plus,operations,jpa,dialect,jta,container,managed
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1495868221;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1496259743;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1496837955;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1498780456;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1519295386;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@since 4.0_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,since,4,0,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@since 4.0_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,since,4,0,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction);1531144424;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@since 4.0_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, @Nullable Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,since,4,0,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_may automatically join a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,may,automatically,join,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction);1364559513;Create an EntityManager whose lifecycle is managed by the container and which_may automatically join a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,may,automatically,join,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction);1368482696;Create an EntityManager whose lifecycle is managed by the container and which_may automatically join a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,may,automatically,join,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1328020251;Create an EntityManager that can join transactions with the_<code>joinTransaction()</code> method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,code,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1356735495;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1357119239;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1364391983;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1364559513;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1368482696;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1385412762;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1395060818;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1414678671;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1455808749;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1467730834;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1495868221;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1496259743;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1496837955;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1498780456;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1519295386;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1530174524;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1530174524;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1531144424;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, false, false)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,false,false
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1328020251;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1356735495;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1357119239;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1364391983;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1364559513;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1368482696;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1385412762;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1395060818;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1414678671;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1455808749;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1467730834;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1495868221;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1496259743;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1496837955;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1498780456;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1519295386;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1530174524;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1530174524;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void doJoinTransaction(boolean enforce);1531144424;Join an existing transaction, if not already joined._@param enforce whether to enforce the transaction_(i.e. whether failure to join is considered fatal);private void doJoinTransaction(boolean enforce) {_			if (this.jta) {_				_				try {_					this.target.joinTransaction()__					logger.debug("Joined JTA transaction")__				}_				catch (TransactionRequiredException ex) {_					if (!enforce) {_						logger.debug("No JTA transaction to join: " + ex)__					}_					else {_						throw ex__					}_				}_			}_			else {_				if (TransactionSynchronizationManager.isSynchronizationActive()) {_					if (!TransactionSynchronizationManager.hasResource(this.target) &&_							!this.target.getTransaction().isActive()) {_						enlistInCurrentTransaction()__					}_					logger.debug("Joined local transaction")__				}_				else {_					if (!enforce) {_						logger.debug("No local transaction to join")__					}_					else {_						throw new TransactionRequiredException("No local transaction to join")__					}_				}_			}_		};join,an,existing,transaction,if,not,already,joined,param,enforce,whether,to,enforce,the,transaction,i,e,whether,failure,to,join,is,considered,fatal;private,void,do,join,transaction,boolean,enforce,if,this,jta,try,this,target,join,transaction,logger,debug,joined,jta,transaction,catch,transaction,required,exception,ex,if,enforce,logger,debug,no,jta,transaction,to,join,ex,else,throw,ex,else,if,transaction,synchronization,manager,is,synchronization,active,if,transaction,synchronization,manager,has,resource,this,target,this,target,get,transaction,is,active,enlist,in,current,transaction,logger,debug,joined,local,transaction,else,if,enforce,logger,debug,no,local,transaction,to,join,else,throw,new,transaction,required,exception,no,local,transaction,to,join
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator, 			Boolean jta, boolean containerManaged);1328020251;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or <code>null</code> for default detection of all interfaces_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be <code>null</code>)_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or <code>null</code> if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator,_			Boolean jta, boolean containerManaged) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		if (plusOperations != null) {_			ifcs.add(EntityManagerPlusOperations.class)__		}_		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, plusOperations, exceptionTranslator, jta, containerManaged))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,code,for,default,detection,of,all,interfaces,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,code,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,code,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,if,plus,operations,null,ifcs,add,entity,manager,plus,operations,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,plus,operations,exception,translator,jta,container,managed
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator, 			Boolean jta, boolean containerManaged);1356735495;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator,_			Boolean jta, boolean containerManaged) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		if (plusOperations != null) {_			ifcs.add(EntityManagerPlusOperations.class)__		}_		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, plusOperations, exceptionTranslator, jta, containerManaged))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,if,plus,operations,null,ifcs,add,entity,manager,plus,operations,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,plus,operations,exception,translator,jta,container,managed
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator, 			Boolean jta, boolean containerManaged);1357119239;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			EntityManagerPlusOperations plusOperations, PersistenceExceptionTranslator exceptionTranslator,_			Boolean jta, boolean containerManaged) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		if (plusOperations != null) {_			ifcs.add(EntityManagerPlusOperations.class)__		}_		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, plusOperations, exceptionTranslator, jta, containerManaged))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,if,plus,operations,null,ifcs,add,entity,manager,plus,operations,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,plus,operations,exception,translator,jta,container,managed
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1328020251;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@param properties the properties to be passed into the <code>createEntityManager</code>_call (may be <code>null</code>)_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, null, true)__		}_	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,code,call,may,be,code,null,code,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1356735495;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, null, true)__		}_	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1357119239;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, null, true)__		}_	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1364559513;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties);1368482696;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1328020251;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be <code>null</code>)_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be <code>null</code>)_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,code,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,code,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1356735495;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1357119239;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,true,true
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1328020251;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target,_					extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1356735495;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target,_					extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1357119239;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target,_					extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1364391983;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1364559513;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1368482696;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1385412762;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1395060818;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1414678671;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1455808749;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1467730834;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1495868221;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1496259743;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1496837955;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1498780456;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1519295386;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1530174524;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1530174524;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> ExtendedEntityManagerInvocationHandler -> private void enlistInCurrentTransaction();1531144424;Enlist this application-managed EntityManager in the current transaction.;private void enlistInCurrentTransaction() {_			_			_			EntityTransaction et = this.target.getTransaction()__			et.begin()__			if (logger.isDebugEnabled()) {_				logger.debug("Starting resource-local transaction on application-managed " +_						"EntityManager [" + this.target + "]")__			}_			ExtendedEntityManagerSynchronization extendedEntityManagerSynchronization =_					new ExtendedEntityManagerSynchronization(this.target, this.exceptionTranslator)__			TransactionSynchronizationManager.bindResource(this.target, extendedEntityManagerSynchronization)__			TransactionSynchronizationManager.registerSynchronization(extendedEntityManagerSynchronization)__		};enlist,this,application,managed,entity,manager,in,the,current,transaction;private,void,enlist,in,current,transaction,entity,transaction,et,this,target,get,transaction,et,begin,if,logger,is,debug,enabled,logger,debug,starting,resource,local,transaction,on,application,managed,entity,manager,this,target,extended,entity,manager,synchronization,extended,entity,manager,synchronization,new,extended,entity,manager,synchronization,this,target,this,exception,translator,transaction,synchronization,manager,bind,resource,this,target,extended,entity,manager,synchronization,transaction,synchronization,manager,register,synchronization,extended,entity,manager,synchronization
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1328020251;Create an EntityManager that can join transactions with the_<code>joinTransaction()</code> method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be <code>null</code>)_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be <code>null</code>)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,code,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,code,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,code,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1356735495;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1357119239;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations, 			PersistenceExceptionTranslator exceptionTranslator);1364391983;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@param exceptionTranslator the exception translator to use for translating_JPA commit/rollback exceptions during transaction synchronization_(may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations,_			PersistenceExceptionTranslator exceptionTranslator) {__		return createProxy(rawEntityManager, null, null, plusOperations, exceptionTranslator, null, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,param,exception,translator,the,exception,translator,to,use,for,translating,jpa,commit,rollback,exceptions,during,transaction,synchronization,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,persistence,exception,translator,exception,translator,return,create,proxy,raw,entity,manager,null,null,plus,operations,exception,translator,null,false,false
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1364391983;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		EntityManagerPlusOperations plusOperations = null__		if (jpaDialect != null && jpaDialect.supportsEntityManagerPlusOperations()) {_			plusOperations = jpaDialect.getEntityManagerPlusOperations(rawEntityManager)__		}_		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), plusOperations, jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,entity,manager,plus,operations,plus,operations,null,if,jpa,dialect,null,jpa,dialect,supports,entity,manager,plus,operations,plus,operations,jpa,dialect,get,entity,manager,plus,operations,raw,entity,manager,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,plus,operations,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1364559513;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1368482696;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1385412762;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1395060818;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1414678671;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1455808749;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1467730834;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1495868221;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1496259743;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1496837955;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1498780456;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1519295386;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1530174524;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1530174524;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy(EntityManager rawEntityManager, 			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction);1531144424;Actually create the EntityManager proxy._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(EntityManager rawEntityManager,_			EntityManagerFactoryInfo emfInfo, boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(emfInfo, "EntityManagerFactoryInfo must not be null")__		JpaDialect jpaDialect = emfInfo.getJpaDialect()__		PersistenceUnitInfo pui = emfInfo.getPersistenceUnitInfo()__		Boolean jta = (pui != null ? pui.getTransactionType() == PersistenceUnitTransactionType.JTA : null)__		return createProxy(rawEntityManager, emfInfo.getEntityManagerInterface(),_				emfInfo.getBeanClassLoader(), jpaDialect, jta, containerManaged, synchronizedWithTransaction)__	};actually,create,the,entity,manager,proxy,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,emf,info,entity,manager,factory,info,must,not,be,null,jpa,dialect,jpa,dialect,emf,info,get,jpa,dialect,persistence,unit,info,pui,emf,info,get,persistence,unit,info,boolean,jta,pui,null,pui,get,transaction,type,persistence,unit,transaction,type,jta,null,return,create,proxy,raw,entity,manager,emf,info,get,entity,manager,interface,emf,info,get,bean,class,loader,jpa,dialect,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1364559513;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1368482696;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class> ifcs = new LinkedHashSet<Class>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1385412762;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1395060818;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1414678671;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1455808749;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<Class<?>>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,class,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl, 			PersistenceExceptionTranslator exceptionTranslator, Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1467730834;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, Class<? extends EntityManager> emIfc, ClassLoader cl,_			PersistenceExceptionTranslator exceptionTranslator, Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,class,extends,entity,manager,em,ifc,class,loader,cl,persistence,exception,translator,exception,translator,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1328020251;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be <code>null</code>)_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,code,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1356735495;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1357119239;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,true,true
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1364391983;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1364559513;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1368482696;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1385412762;Create an EntityManager that can join transactions with the {@code joinTransaction()}_method, but is not automatically managed by the container._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1395060818;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1414678671;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1455808749;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1467730834;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1495868221;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1496259743;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1496837955;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1498780456;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1519295386;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1530174524;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1530174524;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction);1531144424;Create an application-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically_@since 4.0;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo, boolean synchronizedWithTransaction) {__		return createProxy(rawEntityManager, emfInfo, false, synchronizedWithTransaction)__	};create,an,application,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically,since,4,0;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,boolean,synchronized,with,transaction,return,create,proxy,raw,entity,manager,emf,info,false,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1328020251;Create an EntityManager that can join transactions with the_<code>joinTransaction()</code> method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be <code>null</code>)_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,code,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,code,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1356735495;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1357119239;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,false
ExtendedEntityManagerCreator -> public static EntityManager createApplicationManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations);1364391983;Create an EntityManager that can join transactions with the_{@code joinTransaction()} method, but is not automatically_managed by the container._@param rawEntityManager raw EntityManager_@param plusOperations an implementation of the EntityManagerPlusOperations_interface, if those operations should be exposed (may be {@code null})_@return an application-managed EntityManager that can join transactions_but does not participate in them automatically;public static EntityManager createApplicationManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerPlusOperations plusOperations) {__		return createProxy(rawEntityManager, null, null, plusOperations, null, null, false, false)__	};create,an,entity,manager,that,can,join,transactions,with,the,code,join,transaction,method,but,is,not,automatically,managed,by,the,container,param,raw,entity,manager,raw,entity,manager,param,plus,operations,an,implementation,of,the,entity,manager,plus,operations,interface,if,those,operations,should,be,exposed,may,be,code,null,return,an,application,managed,entity,manager,that,can,join,transactions,but,does,not,participate,in,them,automatically;public,static,entity,manager,create,application,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,plus,operations,plus,operations,return,create,proxy,raw,entity,manager,null,null,plus,operations,null,null,false,false
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1496259743;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1496837955;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1498780456;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ifcs.toArray(new Class<?>[ifcs.size()]),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,ifcs,to,array,new,class,ifcs,size,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1519295386;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ClassUtils.toClassArray(ifcs),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,class,utils,to,class,array,ifcs,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1530174524;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ClassUtils.toClassArray(ifcs),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,class,utils,to,class,array,ifcs,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1530174524;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ClassUtils.toClassArray(ifcs),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,class,utils,to,class,array,ifcs,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> private static EntityManager createProxy( 			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl, 			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta, 			boolean containerManaged, boolean synchronizedWithTransaction);1531144424;Actually create the EntityManager proxy._@param rawEm raw EntityManager_@param emIfc the (potentially vendor-specific) EntityManager_interface to proxy, or {@code null} for default detection of all interfaces_@param cl the ClassLoader to use for proxy creation (maybe {@code null})_@param exceptionTranslator the PersistenceException translator to use_@param jta whether to create a JTA-aware EntityManager_(or {@code null} if not known in advance)_@param containerManaged whether to follow container-managed EntityManager_or application-managed EntityManager semantics_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return the EntityManager proxy;private static EntityManager createProxy(_			EntityManager rawEm, @Nullable Class<? extends EntityManager> emIfc, @Nullable ClassLoader cl,_			@Nullable PersistenceExceptionTranslator exceptionTranslator, @Nullable Boolean jta,_			boolean containerManaged, boolean synchronizedWithTransaction) {__		Assert.notNull(rawEm, "EntityManager must not be null")__		Set<Class<?>> ifcs = new LinkedHashSet<>()__		if (emIfc != null) {_			ifcs.add(emIfc)__		}_		else {_			ifcs.addAll(ClassUtils.getAllInterfacesForClassAsSet(rawEm.getClass(), cl))__		}_		ifcs.add(EntityManagerProxy.class)__		return (EntityManager) Proxy.newProxyInstance(_				(cl != null ? cl : ExtendedEntityManagerCreator.class.getClassLoader()),_				ClassUtils.toClassArray(ifcs),_				new ExtendedEntityManagerInvocationHandler(_						rawEm, exceptionTranslator, jta, containerManaged, synchronizedWithTransaction))__	};actually,create,the,entity,manager,proxy,param,raw,em,raw,entity,manager,param,em,ifc,the,potentially,vendor,specific,entity,manager,interface,to,proxy,or,code,null,for,default,detection,of,all,interfaces,param,cl,the,class,loader,to,use,for,proxy,creation,maybe,code,null,param,exception,translator,the,persistence,exception,translator,to,use,param,jta,whether,to,create,a,jta,aware,entity,manager,or,code,null,if,not,known,in,advance,param,container,managed,whether,to,follow,container,managed,entity,manager,or,application,managed,entity,manager,semantics,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,the,entity,manager,proxy;private,static,entity,manager,create,proxy,entity,manager,raw,em,nullable,class,extends,entity,manager,em,ifc,nullable,class,loader,cl,nullable,persistence,exception,translator,exception,translator,nullable,boolean,jta,boolean,container,managed,boolean,synchronized,with,transaction,assert,not,null,raw,em,entity,manager,must,not,be,null,set,class,ifcs,new,linked,hash,set,if,em,ifc,null,ifcs,add,em,ifc,else,ifcs,add,all,class,utils,get,all,interfaces,for,class,as,set,raw,em,get,class,cl,ifcs,add,entity,manager,proxy,class,return,entity,manager,proxy,new,proxy,instance,cl,null,cl,extended,entity,manager,creator,class,get,class,loader,class,utils,to,class,array,ifcs,new,extended,entity,manager,invocation,handler,raw,em,exception,translator,jta,container,managed,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1495868221;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1496259743;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1496837955;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1498780456;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1519295386;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties);1531144424;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, @Nullable Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,nullable,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1328020251;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1356735495;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1357119239;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, appropriate handling_of the native EntityManagerFactory and available EntityManagerPlusOperations_will automatically apply._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,appropriate,handling,of,the,native,entity,manager,factory,and,available,entity,manager,plus,operations,will,automatically,apply,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1364559513;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1368482696;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1385412762;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1395060818;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1414678671;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1455808749;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1467730834;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1495868221;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1496259743;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1496837955;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1498780456;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1519295386;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1530174524;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf);1531144424;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager();public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf) {_		return createContainerManagedEntityManager(emf, null, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,return,create,container,managed,entity,manager,emf,null,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1328020251;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1356735495;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1357119239;Create an EntityManager that automatically joins transactions on each_operation in a transaction._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true)__	};create,an,entity,manager,that,automatically,joins,transactions,on,each,operation,in,a,transaction,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1364391983;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the_EntityManagerPlusOperations and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,entity,manager,plus,operations,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1364559513;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1368482696;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1385412762;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param rawEntityManager raw EntityManager_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,raw,entity,manager,raw,entity,manager,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1395060818;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1414678671;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1455808749;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1467730834;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1495868221;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1496259743;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1496837955;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1498780456;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1519295386;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1530174524;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1530174524;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo);1531144424;Create a container-managed extended EntityManager proxy._@param rawEntityManager the raw EntityManager to decorate_@param emfInfo the EntityManagerFactoryInfo to obtain the JpaDialect_and PersistenceUnitInfo from_@return a container-managed EntityManager that will automatically participate_in any managed transaction;public static EntityManager createContainerManagedEntityManager(_			EntityManager rawEntityManager, EntityManagerFactoryInfo emfInfo) {__		return createProxy(rawEntityManager, emfInfo, true, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,raw,entity,manager,the,raw,entity,manager,to,decorate,param,emf,info,the,entity,manager,factory,info,to,obtain,the,jpa,dialect,and,persistence,unit,info,from,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,raw,entity,manager,entity,manager,factory,info,emf,info,return,create,proxy,raw,entity,manager,emf,info,true,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction);1385412762;Create an EntityManager whose lifecycle is managed by the container and which_may automatically join a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,may,automatically,join,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction);1395060818;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction);1414678671;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction);1455808749;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager( 			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction);1467730834;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@param synchronizedWithTransaction whether to automatically join ongoing_transactions (according to the JPA 2.1 SynchronizationType rules)_@return a container-managed EntityManager that expects container-driven lifecycle_management but may opt out of automatic transaction synchronization_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)_@since 4.0;public static EntityManager createContainerManagedEntityManager(_			EntityManagerFactory emf, Map<?, ?> properties, boolean synchronizedWithTransaction) {__		Assert.notNull(emf, "EntityManagerFactory must not be null")__		if (emf instanceof EntityManagerFactoryInfo) {_			EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf__			EntityManagerFactory nativeEmf = emfInfo.getNativeEntityManagerFactory()__			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					nativeEmf.createEntityManager(properties) : nativeEmf.createEntityManager())__			return createProxy(rawEntityManager, emfInfo, true, synchronizedWithTransaction)__		}_		else {_			EntityManager rawEntityManager = (!CollectionUtils.isEmpty(properties) ?_					emf.createEntityManager(properties) : emf.createEntityManager())__			return createProxy(rawEntityManager, null, null, null, null, true, synchronizedWithTransaction)__		}_	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,param,synchronized,with,transaction,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,return,a,container,managed,entity,manager,that,expects,container,driven,lifecycle,management,but,may,opt,out,of,automatic,transaction,synchronization,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map,since,4,0;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,boolean,synchronized,with,transaction,assert,not,null,emf,entity,manager,factory,must,not,be,null,if,emf,instanceof,entity,manager,factory,info,entity,manager,factory,info,emf,info,entity,manager,factory,info,emf,entity,manager,factory,native,emf,emf,info,get,native,entity,manager,factory,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,native,emf,create,entity,manager,properties,native,emf,create,entity,manager,return,create,proxy,raw,entity,manager,emf,info,true,synchronized,with,transaction,else,entity,manager,raw,entity,manager,collection,utils,is,empty,properties,emf,create,entity,manager,properties,emf,create,entity,manager,return,create,proxy,raw,entity,manager,null,null,null,null,true,synchronized,with,transaction
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties);1385412762;Create an EntityManager whose lifecycle is managed by the container and which_automatically joins a transaction when being invoked within its scope._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,an,entity,manager,whose,lifecycle,is,managed,by,the,container,and,which,automatically,joins,a,transaction,when,being,invoked,within,its,scope,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties);1395060818;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties);1414678671;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties);1455808749;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
ExtendedEntityManagerCreator -> public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties);1467730834;Create a container-managed extended EntityManager proxy._@param emf the EntityManagerFactory to create the EntityManager with._If this implements the EntityManagerFactoryInfo interface, the corresponding_JpaDialect and PersistenceUnitInfo will be detected accordingly._@param properties the properties to be passed into the {@code createEntityManager}_call (may be {@code null})_@return a container-managed EntityManager that will automatically participate_in any managed transaction_@see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map);public static EntityManager createContainerManagedEntityManager(EntityManagerFactory emf, Map<?, ?> properties) {_		return createContainerManagedEntityManager(emf, properties, true)__	};create,a,container,managed,extended,entity,manager,proxy,param,emf,the,entity,manager,factory,to,create,the,entity,manager,with,if,this,implements,the,entity,manager,factory,info,interface,the,corresponding,jpa,dialect,and,persistence,unit,info,will,be,detected,accordingly,param,properties,the,properties,to,be,passed,into,the,code,create,entity,manager,call,may,be,code,null,return,a,container,managed,entity,manager,that,will,automatically,participate,in,any,managed,transaction,see,javax,persistence,entity,manager,factory,create,entity,manager,java,util,map;public,static,entity,manager,create,container,managed,entity,manager,entity,manager,factory,emf,map,properties,return,create,container,managed,entity,manager,emf,properties,true
