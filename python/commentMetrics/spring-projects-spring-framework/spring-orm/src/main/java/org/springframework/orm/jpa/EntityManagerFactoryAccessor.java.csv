commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JPA EntityManagerFactory that should be used to create  * EntityManagers.  * @see javax.persistence.EntityManagerFactory#createEntityManager()  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ ;/**  * Set the JPA EntityManagerFactory that should be used to create  * EntityManagers.  * @see javax.persistence.EntityManagerFactory#createEntityManager()  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ public void setEntityManagerFactory(@Nullable EntityManagerFactory emf) {     this.entityManagerFactory = emf. }
true;public;0;4;/**  * Return the JPA EntityManagerFactory that should be used to create  * EntityManagers.  */ ;/**  * Return the JPA EntityManagerFactory that should be used to create  * EntityManagers.  */ @Nullable public EntityManagerFactory getEntityManagerFactory() {     return this.entityManagerFactory. }
true;protected,final;0;5;/**  * Obtain the EntityManagerFactory for actual use.  * @return the EntityManagerFactory (never {@code null})  * @throws IllegalStateException in case of no EntityManagerFactory set  * @since 5.0  */ ;/**  * Obtain the EntityManagerFactory for actual use.  * @return the EntityManagerFactory (never {@code null})  * @throws IllegalStateException in case of no EntityManagerFactory set  * @since 5.0  */ protected final EntityManagerFactory obtainEntityManagerFactory() {     EntityManagerFactory emf = getEntityManagerFactory().     Assert.state(emf != null, "No EntityManagerFactory set").     return emf. }
true;public;1;3;/**  * Set the name of the persistence unit to access the EntityManagerFactory for.  * <p>This is an alternative to specifying the EntityManagerFactory by direct reference,  * resolving it by its persistence unit name instead. If no EntityManagerFactory and  * no persistence unit name have been specified, a default EntityManagerFactory will  * be retrieved through finding a single unique bean of type EntityManagerFactory.  * @see #setEntityManagerFactory  */ ;/**  * Set the name of the persistence unit to access the EntityManagerFactory for.  * <p>This is an alternative to specifying the EntityManagerFactory by direct reference,  * resolving it by its persistence unit name instead. If no EntityManagerFactory and  * no persistence unit name have been specified, a default EntityManagerFactory will  * be retrieved through finding a single unique bean of type EntityManagerFactory.  * @see #setEntityManagerFactory  */ public void setPersistenceUnitName(@Nullable String persistenceUnitName) {     this.persistenceUnitName = persistenceUnitName. }
true;public;0;4;/**  * Return the name of the persistence unit to access the EntityManagerFactory for, if any.  */ ;/**  * Return the name of the persistence unit to access the EntityManagerFactory for, if any.  */ @Nullable public String getPersistenceUnitName() {     return this.persistenceUnitName. }
true;public;1;3;/**  * Specify JPA properties, to be passed into  * {@code EntityManagerFactory.createEntityManager(Map)} (if any).  * <p>Can be populated with a String "value" (parsed via PropertiesEditor)  * or a "props" element in XML bean definitions.  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ ;/**  * Specify JPA properties, to be passed into  * {@code EntityManagerFactory.createEntityManager(Map)} (if any).  * <p>Can be populated with a String "value" (parsed via PropertiesEditor)  * or a "props" element in XML bean definitions.  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ public void setJpaProperties(Properties jpaProperties) {     CollectionUtils.mergePropertiesIntoMap(jpaProperties, this.jpaPropertyMap). }
true;public;1;5;/**  * Specify JPA properties as a Map, to be passed into  * {@code EntityManagerFactory.createEntityManager(Map)} (if any).  * <p>Can be populated with a "map" or "props" element in XML bean definitions.  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ ;/**  * Specify JPA properties as a Map, to be passed into  * {@code EntityManagerFactory.createEntityManager(Map)} (if any).  * <p>Can be populated with a "map" or "props" element in XML bean definitions.  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ public void setJpaPropertyMap(@Nullable Map<String, Object> jpaProperties) {     if (jpaProperties != null) {         this.jpaPropertyMap.putAll(jpaProperties).     } }
true;public;0;3;/**  * Allow Map access to the JPA properties to be passed to the persistence  * provider, with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".  */ ;/**  * Allow Map access to the JPA properties to be passed to the persistence  * provider, with the option to add or override specific entries.  * <p>Useful for specifying entries directly, for example via "jpaPropertyMap[myKey]".  */ public Map<String, Object> getJpaPropertyMap() {     return this.jpaPropertyMap. }
true;public;1;11;/**  * Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly.  * Falls back to a default EntityManagerFactory bean if no persistence unit specified.  * @see #setPersistenceUnitName  */ ;/**  * Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly.  * Falls back to a default EntityManagerFactory bean if no persistence unit specified.  * @see #setPersistenceUnitName  */ @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     if (getEntityManagerFactory() == null) {         if (!(beanFactory instanceof ListableBeanFactory)) {             throw new IllegalStateException("Cannot retrieve EntityManagerFactory by persistence unit name " + "in a non-listable BeanFactory: " + beanFactory).         }         ListableBeanFactory lbf = (ListableBeanFactory) beanFactory.         setEntityManagerFactory(EntityManagerFactoryUtils.findEntityManagerFactory(lbf, getPersistenceUnitName())).     } }
true;protected;0;5;/**  * Obtain a new EntityManager from this accessor's EntityManagerFactory.  * <p>Can be overridden in subclasses to create specific EntityManager variants.  * @return a new EntityManager  * @throws IllegalStateException if this accessor is not configured with an EntityManagerFactory  * @see javax.persistence.EntityManagerFactory#createEntityManager()  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ ;/**  * Obtain a new EntityManager from this accessor's EntityManagerFactory.  * <p>Can be overridden in subclasses to create specific EntityManager variants.  * @return a new EntityManager  * @throws IllegalStateException if this accessor is not configured with an EntityManagerFactory  * @see javax.persistence.EntityManagerFactory#createEntityManager()  * @see javax.persistence.EntityManagerFactory#createEntityManager(java.util.Map)  */ protected EntityManager createEntityManager() throws IllegalStateException {     EntityManagerFactory emf = obtainEntityManagerFactory().     Map<String, Object> properties = getJpaPropertyMap().     return (!CollectionUtils.isEmpty(properties) ? emf.createEntityManager(properties) : emf.createEntityManager()). }
true;protected;0;5;/**  * Obtain the transactional EntityManager for this accessor's EntityManagerFactory, if any.  * @return the transactional EntityManager, or {@code null} if none  * @throws IllegalStateException if this accessor is not configured with an EntityManagerFactory  * @see EntityManagerFactoryUtils#getTransactionalEntityManager(javax.persistence.EntityManagerFactory)  * @see EntityManagerFactoryUtils#getTransactionalEntityManager(javax.persistence.EntityManagerFactory, java.util.Map)  */ ;/**  * Obtain the transactional EntityManager for this accessor's EntityManagerFactory, if any.  * @return the transactional EntityManager, or {@code null} if none  * @throws IllegalStateException if this accessor is not configured with an EntityManagerFactory  * @see EntityManagerFactoryUtils#getTransactionalEntityManager(javax.persistence.EntityManagerFactory)  * @see EntityManagerFactoryUtils#getTransactionalEntityManager(javax.persistence.EntityManagerFactory, java.util.Map)  */ @Nullable protected EntityManager getTransactionalEntityManager() throws IllegalStateException {     EntityManagerFactory emf = obtainEntityManagerFactory().     return EntityManagerFactoryUtils.getTransactionalEntityManager(emf, getJpaPropertyMap()). }
