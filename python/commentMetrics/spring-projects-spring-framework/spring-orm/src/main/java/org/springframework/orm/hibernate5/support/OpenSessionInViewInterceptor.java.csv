# id;timestamp;commentText;codeText;commentWords;codeWords
OpenSessionInViewInterceptor -> @Nullable 	public SessionFactory getSessionFactory();1500495740;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;nullable,public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> @Nullable 	public SessionFactory getSessionFactory();1520529117;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;@Nullable_	public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;nullable,public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException;1496242568;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(getSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())__		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,nullable,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,get,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException;1496837955;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(getSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())__		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,nullable,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,get,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException;1500495740;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(obtainSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())__		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,nullable,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,obtain,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException;1520529117;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, @Nullable Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(obtainSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())__		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,nullable,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,obtain,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1467668243;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String participateAttributeName = getParticipateAttributeName()___		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult()) {_			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {_				return__			}_		}__		if (TransactionSynchronizationManager.hasResource(getSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(getSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(participateAttributeName, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(participateAttributeName, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,participate,attribute,name,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,if,apply,session,binding,interceptor,async,manager,participate,attribute,name,return,if,transaction,synchronization,manager,has,resource,get,session,factory,integer,count,integer,request,get,attribute,participate,attribute,name,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,get,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,get,session,factory,session,holder,async,manager,register,callable,interceptor,participate,attribute,name,async,request,interceptor,async,manager,register,deferred,result,interceptor,participate,attribute,name,async,request,interceptor
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1486062666;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String participateAttributeName = getParticipateAttributeName()___		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult()) {_			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {_				return__			}_		}__		if (TransactionSynchronizationManager.hasResource(getSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(getSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(participateAttributeName, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(participateAttributeName, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,participate,attribute,name,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,if,apply,session,binding,interceptor,async,manager,participate,attribute,name,return,if,transaction,synchronization,manager,has,resource,get,session,factory,integer,count,integer,request,get,attribute,participate,attribute,name,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,get,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,get,session,factory,session,holder,async,manager,register,callable,interceptor,participate,attribute,name,async,request,interceptor,async,manager,register,deferred,result,interceptor,participate,attribute,name,async,request,interceptor
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1496242568;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String participateAttributeName = getParticipateAttributeName()___		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult()) {_			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {_				return__			}_		}__		if (TransactionSynchronizationManager.hasResource(getSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(getSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(participateAttributeName, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(participateAttributeName, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,participate,attribute,name,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,if,apply,session,binding,interceptor,async,manager,participate,attribute,name,return,if,transaction,synchronization,manager,has,resource,get,session,factory,integer,count,integer,request,get,attribute,participate,attribute,name,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,get,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,get,session,factory,session,holder,async,manager,register,callable,interceptor,participate,attribute,name,async,request,interceptor,async,manager,register,deferred,result,interceptor,participate,attribute,name,async,request,interceptor
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1496837955;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String participateAttributeName = getParticipateAttributeName()___		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult()) {_			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {_				return__			}_		}__		if (TransactionSynchronizationManager.hasResource(getSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(getSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(getSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(participateAttributeName, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(participateAttributeName, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,participate,attribute,name,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,if,apply,session,binding,interceptor,async,manager,participate,attribute,name,return,if,transaction,synchronization,manager,has,resource,get,session,factory,integer,count,integer,request,get,attribute,participate,attribute,name,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,get,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,get,session,factory,session,holder,async,manager,register,callable,interceptor,participate,attribute,name,async,request,interceptor,async,manager,register,deferred,result,interceptor,participate,attribute,name,async,request,interceptor
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1500495740;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String participateAttributeName = getParticipateAttributeName()___		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult()) {_			if (applySessionBindingInterceptor(asyncManager, participateAttributeName)) {_				return__			}_		}__		if (TransactionSynchronizationManager.hasResource(obtainSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(participateAttributeName, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(obtainSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(obtainSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(participateAttributeName, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(participateAttributeName, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,participate,attribute,name,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,if,apply,session,binding,interceptor,async,manager,participate,attribute,name,return,if,transaction,synchronization,manager,has,resource,obtain,session,factory,integer,count,integer,request,get,attribute,participate,attribute,name,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,obtain,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,obtain,session,factory,session,holder,async,manager,register,callable,interceptor,participate,attribute,name,async,request,interceptor,async,manager,register,deferred,result,interceptor,participate,attribute,name,async,request,interceptor
OpenSessionInViewInterceptor -> @Override 	public void preHandle(WebRequest request) throws DataAccessException;1520529117;Open a new Hibernate {@code Session} according and bind it to the thread via the_{@link TransactionSynchronizationManager}.;@Override_	public void preHandle(WebRequest request) throws DataAccessException {_		String key = getParticipateAttributeName()__		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request)__		if (asyncManager.hasConcurrentResult() && applySessionBindingInterceptor(asyncManager, key)) {_			return__		}__		if (TransactionSynchronizationManager.hasResource(obtainSessionFactory())) {_			_			Integer count = (Integer) request.getAttribute(key, WebRequest.SCOPE_REQUEST)__			int newCount = (count != null ? count + 1 : 1)__			request.setAttribute(getParticipateAttributeName(), newCount, WebRequest.SCOPE_REQUEST)__		}_		else {_			logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor")__			Session session = openSession()__			SessionHolder sessionHolder = new SessionHolder(session)__			TransactionSynchronizationManager.bindResource(obtainSessionFactory(), sessionHolder)___			AsyncRequestInterceptor asyncRequestInterceptor =_					new AsyncRequestInterceptor(obtainSessionFactory(), sessionHolder)__			asyncManager.registerCallableInterceptor(key, asyncRequestInterceptor)__			asyncManager.registerDeferredResultInterceptor(key, asyncRequestInterceptor)__		}_	};open,a,new,hibernate,code,session,according,and,bind,it,to,the,thread,via,the,link,transaction,synchronization,manager;override,public,void,pre,handle,web,request,request,throws,data,access,exception,string,key,get,participate,attribute,name,web,async,manager,async,manager,web,async,utils,get,async,manager,request,if,async,manager,has,concurrent,result,apply,session,binding,interceptor,async,manager,key,return,if,transaction,synchronization,manager,has,resource,obtain,session,factory,integer,count,integer,request,get,attribute,key,web,request,int,new,count,count,null,count,1,1,request,set,attribute,get,participate,attribute,name,new,count,web,request,else,logger,debug,opening,hibernate,session,in,open,session,in,view,interceptor,session,session,open,session,session,holder,session,holder,new,session,holder,session,transaction,synchronization,manager,bind,resource,obtain,session,factory,session,holder,async,request,interceptor,async,request,interceptor,new,async,request,interceptor,obtain,session,factory,session,holder,async,manager,register,callable,interceptor,key,async,request,interceptor,async,manager,register,deferred,result,interceptor,key,async,request,interceptor
OpenSessionInViewInterceptor -> public SessionFactory getSessionFactory();1467668243;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> public SessionFactory getSessionFactory();1486062666;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> public SessionFactory getSessionFactory();1496242568;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> public SessionFactory getSessionFactory();1496837955;Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public SessionFactory getSessionFactory() {_		return this.sessionFactory__	};return,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,session,factory,get,session,factory,return,this,session,factory
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1467668243;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = getSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,get,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1486062666;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = getSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,get,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1496242568;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = getSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,get,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1496837955;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = getSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,get,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1500495740;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = obtainSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,obtain,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> @SuppressWarnings("deprecation") 	protected Session openSession() throws DataAccessResourceFailureException;1520529117;Open a Session for the SessionFactory that this interceptor uses._<p>The default implementation delegates to the {@link SessionFactory#openSession}_method and sets the {@link Session}'s flush mode to "MANUAL"._@return the Session to use_@throws DataAccessResourceFailureException if the Session could not be created_@see FlushMode#MANUAL;@SuppressWarnings("deprecation")_	protected Session openSession() throws DataAccessResourceFailureException {_		try {_			Session session = obtainSessionFactory().openSession()__			session.setFlushMode(FlushMode.MANUAL)__			return session__		}_		catch (HibernateException ex) {_			throw new DataAccessResourceFailureException("Could not open Hibernate Session", ex)__		}_	};open,a,session,for,the,session,factory,that,this,interceptor,uses,p,the,default,implementation,delegates,to,the,link,session,factory,open,session,method,and,sets,the,link,session,s,flush,mode,to,manual,return,the,session,to,use,throws,data,access,resource,failure,exception,if,the,session,could,not,be,created,see,flush,mode,manual;suppress,warnings,deprecation,protected,session,open,session,throws,data,access,resource,failure,exception,try,session,session,obtain,session,factory,open,session,session,set,flush,mode,flush,mode,manual,return,session,catch,hibernate,exception,ex,throw,new,data,access,resource,failure,exception,could,not,open,hibernate,session,ex
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1467668243;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return getSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,get,session,factory,to,string
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1486062666;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return getSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,get,session,factory,to,string
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1496242568;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return getSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,get,session,factory,to,string
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1496837955;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return getSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,get,session,factory,to,string
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1500495740;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return obtainSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,obtain,session,factory,to,string
OpenSessionInViewInterceptor -> protected String getParticipateAttributeName();1520529117;Return the name of the request attribute that identifies that a request is_already intercepted._<p>The default implementation takes the {@code toString()} representation_of the {@code SessionFactory} instance and appends {@link #PARTICIPATE_SUFFIX}.;protected String getParticipateAttributeName() {_		return obtainSessionFactory().toString() + PARTICIPATE_SUFFIX__	};return,the,name,of,the,request,attribute,that,identifies,that,a,request,is,already,intercepted,p,the,default,implementation,takes,the,code,to,string,representation,of,the,code,session,factory,instance,and,appends,link;protected,string,get,participate,attribute,name,return,obtain,session,factory,to,string
OpenSessionInViewInterceptor -> public void setSessionFactory(SessionFactory sessionFactory);1467668243;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> public void setSessionFactory(SessionFactory sessionFactory);1486062666;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> public void setSessionFactory(SessionFactory sessionFactory);1496242568;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> public void setSessionFactory(SessionFactory sessionFactory);1496837955;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1500495740;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> public void setSessionFactory(@Nullable SessionFactory sessionFactory);1520529117;Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.;public void setSessionFactory(@Nullable SessionFactory sessionFactory) {_		this.sessionFactory = sessionFactory__	};set,the,hibernate,session,factory,that,should,be,used,to,create,hibernate,sessions;public,void,set,session,factory,nullable,session,factory,session,factory,this,session,factory,session,factory
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, Exception ex) throws DataAccessException;1467668243;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(getSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())___		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,get,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
OpenSessionInViewInterceptor -> @Override 	public void afterCompletion(WebRequest request, Exception ex) throws DataAccessException;1486062666;Unbind the Hibernate {@code Session} from the thread and close it)._@see TransactionSynchronizationManager;@Override_	public void afterCompletion(WebRequest request, Exception ex) throws DataAccessException {_		if (!decrementParticipateCount(request)) {_			SessionHolder sessionHolder =_					(SessionHolder) TransactionSynchronizationManager.unbindResource(getSessionFactory())__			logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor")__			SessionFactoryUtils.closeSession(sessionHolder.getSession())__		}_	};unbind,the,hibernate,code,session,from,the,thread,and,close,it,see,transaction,synchronization,manager;override,public,void,after,completion,web,request,request,exception,ex,throws,data,access,exception,if,decrement,participate,count,request,session,holder,session,holder,session,holder,transaction,synchronization,manager,unbind,resource,get,session,factory,logger,debug,closing,hibernate,session,in,open,session,in,view,interceptor,session,factory,utils,close,session,session,holder,get,session
