# id;timestamp;commentText;codeText;commentWords;codeWords
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1466764651;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1467668243;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1467677340;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1467730834;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1470272834;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1470660485;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1481217852;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: Per the explanation above, you may have to turn this flag off_when using Hibernate in a JTA environment, e.g. on WebLogic.</b> Alternatively,_set Hibernate 5.2's "hibernate.connection.handling_mode" property to_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,per,the,explanation,above,you,may,have,to,turn,this,flag,off,when,using,hibernate,in,a,jta,environment,e,g,on,web,logic,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1495868221;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: Per the explanation above, you may have to turn this flag off_when using Hibernate in a JTA environment, e.g. on WebLogic.</b> Alternatively,_set Hibernate 5.2's "hibernate.connection.handling_mode" property to_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,per,the,explanation,above,you,may,have,to,turn,this,flag,off,when,using,hibernate,in,a,jta,environment,e,g,on,web,logic,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1500457438;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: Per the explanation above, you may have to turn this flag off_when using Hibernate in a JTA environment, e.g. on WebLogic.</b> Alternatively,_set Hibernate 5.2's "hibernate.connection.handling_mode" property to_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see #getJpaPropertyMap()_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,per,the,explanation,above,you,may,have,to,turn,this,flag,off,when,using,hibernate,in,a,jta,environment,e,g,on,web,logic,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,get,jpa,property,map,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1510341663;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,_the connection release mode will never be altered from its provider default,_i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>_Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"_property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see PersistenceUnitInfo#getTransactionType()_@see #getJpaPropertyMap(PersistenceUnitInfo)_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,for,a,persistence,unit,with,transaction,type,jta,e,g,on,web,logic,the,connection,release,mode,will,never,be,altered,from,its,provider,default,i,e,not,be,forced,to,code,by,this,flag,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,persistence,unit,info,get,transaction,type,see,get,jpa,property,map,persistence,unit,info,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1510422223;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,_the connection release mode will never be altered from its provider default,_i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>_Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"_property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see PersistenceUnitInfo#getTransactionType()_@see #getJpaPropertyMap(PersistenceUnitInfo)_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,for,a,persistence,unit,with,transaction,type,jta,e,g,on,web,logic,the,connection,release,mode,will,never,be,altered,from,its,provider,default,i,e,not,be,forced,to,code,by,this,flag,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,persistence,unit,info,get,transaction,type,see,get,jpa,property,map,persistence,unit,info,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1517247618;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,_the connection release mode will never be altered from its provider default,_i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>_Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"_property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see PersistenceUnitInfo#getTransactionType()_@see #getJpaPropertyMap(PersistenceUnitInfo)_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,for,a,persistence,unit,with,transaction,type,jta,e,g,on,web,logic,the,connection,release,mode,will,never,be,altered,from,its,provider,default,i,e,not,be,forced,to,code,by,this,flag,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,persistence,unit,info,get,transaction,type,see,get,jpa,property,map,persistence,unit,info,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1525545490;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,_the connection release mode will never be altered from its provider default,_i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>_Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"_property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see PersistenceUnitInfo#getTransactionType()_@see #getJpaPropertyMap(PersistenceUnitInfo)_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,for,a,persistence,unit,with,transaction,type,jta,e,g,on,web,logic,the,connection,release,mode,will,never,be,altered,from,its,provider,default,i,e,not,be,forced,to,code,by,this,flag,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,persistence,unit,info,get,transaction,type,see,get,jpa,property,map,persistence,unit,info,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> public void setPrepareConnection(boolean prepareConnection);1535712004;Set whether to prepare the underlying JDBC Connection of a transactional_Hibernate Session, that is, whether to apply a transaction-specific_isolation level and/or the transaction's read-only flag to the underlying_JDBC Connection._<p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details._This is just a convenience flag passed through to {@code HibernateJpaDialect}._<p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against_previous Hibernate versions. The vendor adapter manually enforces Hibernate's_new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case_unless a user-specified connection handling mode property indicates otherwise__switch this flag to {@code false} to avoid that interference._<p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,_the connection release mode will never be altered from its provider default,_i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>_Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"_property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even_"DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario._@since 4.3.1_@see PersistenceUnitInfo#getTransactionType()_@see #getJpaPropertyMap(PersistenceUnitInfo)_@see HibernateJpaDialect#beginTransaction;public void setPrepareConnection(boolean prepareConnection) {_		this.jpaDialect.setPrepareConnection(prepareConnection)__	};set,whether,to,prepare,the,underlying,jdbc,connection,of,a,transactional,hibernate,session,that,is,whether,to,apply,a,transaction,specific,isolation,level,and,or,the,transaction,s,read,only,flag,to,the,underlying,jdbc,connection,p,see,link,hibernate,jpa,dialect,set,prepare,connection,boolean,for,details,this,is,just,a,convenience,flag,passed,through,to,code,hibernate,jpa,dialect,p,on,hibernate,5,1,5,2,this,flag,remains,code,true,by,default,like,against,previous,hibernate,versions,the,vendor,adapter,manually,enforces,hibernate,s,new,connection,handling,mode,code,in,that,case,unless,a,user,specified,connection,handling,mode,property,indicates,otherwise,switch,this,flag,to,code,false,to,avoid,that,interference,p,b,note,for,a,persistence,unit,with,transaction,type,jta,e,g,on,web,logic,the,connection,release,mode,will,never,be,altered,from,its,provider,default,i,e,not,be,forced,to,code,by,this,flag,b,alternatively,set,hibernate,5,2,s,hibernate,connection,property,to,or,even,in,such,a,scenario,since,4,3,1,see,persistence,unit,info,get,transaction,type,see,get,jpa,property,map,persistence,unit,info,see,hibernate,jpa,dialect,begin,transaction;public,void,set,prepare,connection,boolean,prepare,connection,this,jpa,dialect,set,prepare,connection,prepare,connection
HibernateJpaVendorAdapter -> protected Class determineDatabaseDialectClass(Database database);1328020251;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or <code>null<code> if none found;protected Class determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,code,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class determineDatabaseDialectClass(Database database);1356735495;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class determineDatabaseDialectClass(Database database);1357119239;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class determineDatabaseDialectClass(Database database);1363714444;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class determineDatabaseDialectClass(Database database);1368482696;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class<?> determineDatabaseDialectClass(Database database);1470272834;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class<?> determineDatabaseDialectClass(Database database);1470660485;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> protected Class<?> determineDatabaseDialectClass(Database database);1481217852;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1385412762;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1387295218;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1390507193;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1403774750;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1404056186;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1407596982;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1431186918;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1437514747;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1464903331;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1466764651;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class_  _			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class_  _			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class_  _			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1467668243;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1467677340;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return org.hibernate.dialect.DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return org.hibernate.dialect.PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,org,hibernate,dialect,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,org,hibernate,dialect,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @SuppressWarnings("deprecation") 	protected Class<?> determineDatabaseDialectClass(Database database);1467730834;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@SuppressWarnings("deprecation")_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return org.hibernate.dialect.DerbyDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQLDialect.class__			case ORACLE: return Oracle9iDialect.class__			case POSTGRESQL: return org.hibernate.dialect.PostgreSQLDialect.class__			case SQL_SERVER: return SQLServerDialect.class__			case SYBASE: return org.hibernate.dialect.SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;suppress,warnings,deprecation,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,org,hibernate,dialect,derby,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sqldialect,class,case,oracle,return,oracle9i,dialect,class,case,postgresql,return,org,hibernate,dialect,postgre,sqldialect,class,case,return,sqlserver,dialect,class,case,sybase,return,org,hibernate,dialect,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1495868221;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1500457438;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1510341663;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1510422223;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1517247618;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1525545490;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HANA: return HANAColumnStoreDialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hana,return,hanacolumn,store,dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
HibernateJpaVendorAdapter -> @Nullable 	protected Class<?> determineDatabaseDialectClass(Database database);1535712004;Determine the Hibernate database dialect class for the given target database._@param database the target database_@return the Hibernate database dialect class, or {@code null} if none found;@Nullable_	protected Class<?> determineDatabaseDialectClass(Database database) {_		switch (database) {_			case DB2: return DB2Dialect.class__			case DERBY: return DerbyTenSevenDialect.class__			case H2: return H2Dialect.class__			case HANA: return HANAColumnStoreDialect.class__			case HSQL: return HSQLDialect.class__			case INFORMIX: return InformixDialect.class__			case MYSQL: return MySQL5Dialect.class__			case ORACLE: return Oracle12cDialect.class__			case POSTGRESQL: return PostgreSQL95Dialect.class__			case SQL_SERVER: return SQLServer2012Dialect.class__			case SYBASE: return SybaseDialect.class__			default: return null__		}_	};determine,the,hibernate,database,dialect,class,for,the,given,target,database,param,database,the,target,database,return,the,hibernate,database,dialect,class,or,code,null,if,none,found;nullable,protected,class,determine,database,dialect,class,database,database,switch,database,case,db2,return,db2dialect,class,case,derby,return,derby,ten,seven,dialect,class,case,h2,return,h2dialect,class,case,hana,return,hanacolumn,store,dialect,class,case,hsql,return,hsqldialect,class,case,informix,return,informix,dialect,class,case,mysql,return,my,sql5dialect,class,case,oracle,return,oracle12c,dialect,class,case,postgresql,return,postgre,sql95dialect,class,case,return,sqlserver2012dialect,class,case,sybase,return,sybase,dialect,class,default,return,null
