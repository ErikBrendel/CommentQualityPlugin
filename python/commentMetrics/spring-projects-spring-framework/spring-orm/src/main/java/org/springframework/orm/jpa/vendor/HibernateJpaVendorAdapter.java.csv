commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to prepare the underlying JDBC Connection of a transactional  * Hibernate Session, that is, whether to apply a transaction-specific  * isolation level and/or the transaction's read-only flag to the underlying  * JDBC Connection.  * <p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details.  * This is just a convenience flag passed through to {@code HibernateJpaDialect}.  * <p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against  * previous Hibernate versions. The vendor adapter manually enforces Hibernate's  * new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case  * unless a user-specified connection handling mode property indicates otherwise.  * switch this flag to {@code false} to avoid that interference.  * <p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,  * the connection release mode will never be altered from its provider default,  * i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>  * Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"  * property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even  * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario.  * @since 4.3.1  * @see PersistenceUnitInfo#getTransactionType()  * @see #getJpaPropertyMap(PersistenceUnitInfo)  * @see HibernateJpaDialect#beginTransaction  */ ;/**  * Set whether to prepare the underlying JDBC Connection of a transactional  * Hibernate Session, that is, whether to apply a transaction-specific  * isolation level and/or the transaction's read-only flag to the underlying  * JDBC Connection.  * <p>See {@link HibernateJpaDialect#setPrepareConnection(boolean)} for details.  * This is just a convenience flag passed through to {@code HibernateJpaDialect}.  * <p>On Hibernate 5.1/5.2, this flag remains {@code true} by default like against  * previous Hibernate versions. The vendor adapter manually enforces Hibernate's  * new connection handling mode {@code DELAYED_ACQUISITION_AND_HOLD} in that case  * unless a user-specified connection handling mode property indicates otherwise.  * switch this flag to {@code false} to avoid that interference.  * <p><b>NOTE: For a persistence unit with transaction type JTA e.g. on WebLogic,  * the connection release mode will never be altered from its provider default,  * i.e. not be forced to {@code DELAYED_ACQUISITION_AND_HOLD} by this flag.</b>  * Alternatively, set Hibernate 5.2's "hibernate.connection.handling_mode"  * property to "DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION" or even  * "DELAYED_ACQUISITION_AND_RELEASE_AFTER_STATEMENT" in such a scenario.  * @since 4.3.1  * @see PersistenceUnitInfo#getTransactionType()  * @see #getJpaPropertyMap(PersistenceUnitInfo)  * @see HibernateJpaDialect#beginTransaction  */ public void setPrepareConnection(boolean prepareConnection) {     this.jpaDialect.setPrepareConnection(prepareConnection). }
false;public;0;4;;@Override public PersistenceProvider getPersistenceProvider() {     return this.persistenceProvider. }
false;public;0;4;;@Override public String getPersistenceProviderRootPackage() {     return "org.hibernate". }
false;public;1;5;;@Override public Map<String, Object> getJpaPropertyMap(PersistenceUnitInfo pui) {     return buildJpaPropertyMap(this.jpaDialect.prepareConnection && pui.getTransactionType() != PersistenceUnitTransactionType.JTA). }
false;public;0;4;;@Override public Map<String, Object> getJpaPropertyMap() {     return buildJpaPropertyMap(this.jpaDialect.prepareConnection). }
false;private;1;41;;private Map<String, Object> buildJpaPropertyMap(boolean connectionReleaseOnClose) {     Map<String, Object> jpaProperties = new HashMap<>().     if (getDatabasePlatform() != null) {         jpaProperties.put(AvailableSettings.DIALECT, getDatabasePlatform()).     } else {         Class<?> databaseDialectClass = determineDatabaseDialectClass(getDatabase()).         if (databaseDialectClass != null) {             jpaProperties.put(AvailableSettings.DIALECT, databaseDialectClass.getName()).         }     }     if (isGenerateDdl()) {         jpaProperties.put(AvailableSettings.HBM2DDL_AUTO, "update").     }     if (isShowSql()) {         jpaProperties.put(AvailableSettings.SHOW_SQL, "true").     }     if (connectionReleaseOnClose) {         // Hibernate 5.1/5.2: manually enforce connection release mode ON_CLOSE (the former default)         try {             // Try Hibernate 5.2             AvailableSettings.class.getField("CONNECTION_HANDLING").             jpaProperties.put("hibernate.connection.handling_mode", "DELAYED_ACQUISITION_AND_HOLD").         } catch (NoSuchFieldException ex) {             // Try Hibernate 5.1             try {                 AvailableSettings.class.getField("ACQUIRE_CONNECTIONS").                 jpaProperties.put("hibernate.connection.release_mode", "ON_CLOSE").             } catch (NoSuchFieldException ex2) {             // on Hibernate 5.0.x or lower - no need to change the default there             }         }     }     return jpaProperties. }
true;protected;1;17;/**  * Determine the Hibernate database dialect class for the given target database.  * @param database the target database  * @return the Hibernate database dialect class, or {@code null} if none found  */ ;/**  * Determine the Hibernate database dialect class for the given target database.  * @param database the target database  * @return the Hibernate database dialect class, or {@code null} if none found  */ @Nullable protected Class<?> determineDatabaseDialectClass(Database database) {     switch(database) {         case DB2:             return DB2Dialect.class.         case DERBY:             return DerbyTenSevenDialect.class.         case H2:             return H2Dialect.class.         case HANA:             return HANAColumnStoreDialect.class.         case HSQL:             return HSQLDialect.class.         case INFORMIX:             return InformixDialect.class.         case MYSQL:             return MySQL5Dialect.class.         case ORACLE:             return Oracle12cDialect.class.         case POSTGRESQL:             return PostgreSQL95Dialect.class.         case SQL_SERVER:             return SQLServer2012Dialect.class.         case SYBASE:             return SybaseDialect.class.         default:             return null.     } }
false;public;0;4;;@Override public HibernateJpaDialect getJpaDialect() {     return this.jpaDialect. }
false;public;0;4;;@Override public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {     return this.entityManagerFactoryInterface. }
false;public;0;4;;@Override public Class<? extends EntityManager> getEntityManagerInterface() {     return this.entityManagerInterface. }
