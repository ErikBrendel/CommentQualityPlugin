commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to lazily start a database resource transaction within a  * Spring-managed EclipseLink transaction.  * <p>By default, read-only transactions are started lazily but regular  * non-read-only transactions are started early. This allows for reusing the  * same JDBC Connection throughout an entire EclipseLink transaction, for  * enforced isolation and consistent visibility with JDBC access code working  * on the same DataSource.  * <p>Switch this flag to "true" to enforce a lazy database transaction begin  * even for non-read-only transactions, allowing access to EclipseLink's  * shared cache and following EclipseLink's connection mode configuration,  * assuming that isolation and visibility at the JDBC level are less important.  * @see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction()  */ ;/**  * Set whether to lazily start a database resource transaction within a  * Spring-managed EclipseLink transaction.  * <p>By default, read-only transactions are started lazily but regular  * non-read-only transactions are started early. This allows for reusing the  * same JDBC Connection throughout an entire EclipseLink transaction, for  * enforced isolation and consistent visibility with JDBC access code working  * on the same DataSource.  * <p>Switch this flag to "true" to enforce a lazy database transaction begin  * even for non-read-only transactions, allowing access to EclipseLink's  * shared cache and following EclipseLink's connection mode configuration,  * assuming that isolation and visibility at the JDBC level are less important.  * @see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction()  */ public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {     this.lazyDatabaseTransaction = lazyDatabaseTransaction. }
false;public;2;22;;@Override @Nullable public Object beginTransaction(EntityManager entityManager, TransactionDefinition definition) throws PersistenceException, SQLException, TransactionException {     if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {         // Pass custom isolation level on to EclipseLink's DatabaseLogin configuration         // (since Spring 4.1.2)         UnitOfWork uow = entityManager.unwrap(UnitOfWork.class).         uow.getLogin().setTransactionIsolation(definition.getIsolationLevel()).     }     entityManager.getTransaction().begin().     if (!definition.isReadOnly() && !this.lazyDatabaseTransaction) {         // Begin an early transaction to force EclipseLink to get a JDBC Connection         // so that Spring can manage transactions with JDBC as well as EclipseLink.         entityManager.unwrap(UnitOfWork.class).beginEarlyTransaction().     }     return null. }
false;public;2;9;;@Override public ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly) throws PersistenceException, SQLException {     // within the EclipseLink EntityManager)     return new EclipseLinkConnectionHandle(entityManager). }
false;public;0;7;;@Override public Connection getConnection() {     if (this.connection == null) {         this.connection = this.entityManager.unwrap(Connection.class).     }     return this.connection. }
