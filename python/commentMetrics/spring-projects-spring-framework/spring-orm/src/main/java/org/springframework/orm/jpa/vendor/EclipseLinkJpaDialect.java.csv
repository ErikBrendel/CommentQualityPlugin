# id;timestamp;commentText;codeText;commentWords;codeWords
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1328020251;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see oracle.toplink.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,oracle,toplink,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1335774711;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1356735495;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1363714444;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1364603789;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1413289989;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1413910132;Set whether to lazily start a database transaction within an_EclipseLink transaction._<p>By default, database transactions are started early. This allows_for reusing the same JDBC Connection throughout an entire transaction,_including read operations, and also for exposing EclipseLink transactions_to JDBC access code (working on the same DataSource)._<p>It is only recommended to switch this flag to "true" when no JDBC access_code is involved in any of the transactions, and when it is acceptable to_perform read operations outside of the transactional JDBC Connection._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,transaction,within,an,eclipse,link,transaction,p,by,default,database,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,transaction,including,read,operations,and,also,for,exposing,eclipse,link,transactions,to,jdbc,access,code,working,on,the,same,data,source,p,it,is,only,recommended,to,switch,this,flag,to,true,when,no,jdbc,access,code,is,involved,in,any,of,the,transactions,and,when,it,is,acceptable,to,perform,read,operations,outside,of,the,transactional,jdbc,connection,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1414510759;Set whether to lazily start a database resource transaction within a_Spring-managed EclipseLink transaction._<p>By default, read-only transactions are started lazily but regular_non-read-only transactions are started early. This allows for reusing the_same JDBC Connection throughout an entire EclipseLink transaction, for_enforced isolation and consistent visibility with JDBC access code working_on the same DataSource._<p>Switch this flag to "true" to enforce a lazy database transaction begin_even for non-read-only transactions, allowing access to EclipseLink's_shared cache and following EclipseLink's connection mode configuration,_assuming that isolation and visibility at the JDBC level are less important._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,resource,transaction,within,a,spring,managed,eclipse,link,transaction,p,by,default,read,only,transactions,are,started,lazily,but,regular,non,read,only,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,eclipse,link,transaction,for,enforced,isolation,and,consistent,visibility,with,jdbc,access,code,working,on,the,same,data,source,p,switch,this,flag,to,true,to,enforce,a,lazy,database,transaction,begin,even,for,non,read,only,transactions,allowing,access,to,eclipse,link,s,shared,cache,and,following,eclipse,link,s,connection,mode,configuration,assuming,that,isolation,and,visibility,at,the,jdbc,level,are,less,important,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1498780456;Set whether to lazily start a database resource transaction within a_Spring-managed EclipseLink transaction._<p>By default, read-only transactions are started lazily but regular_non-read-only transactions are started early. This allows for reusing the_same JDBC Connection throughout an entire EclipseLink transaction, for_enforced isolation and consistent visibility with JDBC access code working_on the same DataSource._<p>Switch this flag to "true" to enforce a lazy database transaction begin_even for non-read-only transactions, allowing access to EclipseLink's_shared cache and following EclipseLink's connection mode configuration,_assuming that isolation and visibility at the JDBC level are less important._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,resource,transaction,within,a,spring,managed,eclipse,link,transaction,p,by,default,read,only,transactions,are,started,lazily,but,regular,non,read,only,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,eclipse,link,transaction,for,enforced,isolation,and,consistent,visibility,with,jdbc,access,code,working,on,the,same,data,source,p,switch,this,flag,to,true,to,enforce,a,lazy,database,transaction,begin,even,for,non,read,only,transactions,allowing,access,to,eclipse,link,s,shared,cache,and,following,eclipse,link,s,connection,mode,configuration,assuming,that,isolation,and,visibility,at,the,jdbc,level,are,less,important,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1502974979;Set whether to lazily start a database resource transaction within a_Spring-managed EclipseLink transaction._<p>By default, read-only transactions are started lazily but regular_non-read-only transactions are started early. This allows for reusing the_same JDBC Connection throughout an entire EclipseLink transaction, for_enforced isolation and consistent visibility with JDBC access code working_on the same DataSource._<p>Switch this flag to "true" to enforce a lazy database transaction begin_even for non-read-only transactions, allowing access to EclipseLink's_shared cache and following EclipseLink's connection mode configuration,_assuming that isolation and visibility at the JDBC level are less important._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,resource,transaction,within,a,spring,managed,eclipse,link,transaction,p,by,default,read,only,transactions,are,started,lazily,but,regular,non,read,only,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,eclipse,link,transaction,for,enforced,isolation,and,consistent,visibility,with,jdbc,access,code,working,on,the,same,data,source,p,switch,this,flag,to,true,to,enforce,a,lazy,database,transaction,begin,even,for,non,read,only,transactions,allowing,access,to,eclipse,link,s,shared,cache,and,following,eclipse,link,s,connection,mode,configuration,assuming,that,isolation,and,visibility,at,the,jdbc,level,are,less,important,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1516109954;Set whether to lazily start a database resource transaction within a_Spring-managed EclipseLink transaction._<p>By default, read-only transactions are started lazily but regular_non-read-only transactions are started early. This allows for reusing the_same JDBC Connection throughout an entire EclipseLink transaction, for_enforced isolation and consistent visibility with JDBC access code working_on the same DataSource._<p>Switch this flag to "true" to enforce a lazy database transaction begin_even for non-read-only transactions, allowing access to EclipseLink's_shared cache and following EclipseLink's connection mode configuration,_assuming that isolation and visibility at the JDBC level are less important._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,resource,transaction,within,a,spring,managed,eclipse,link,transaction,p,by,default,read,only,transactions,are,started,lazily,but,regular,non,read,only,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,eclipse,link,transaction,for,enforced,isolation,and,consistent,visibility,with,jdbc,access,code,working,on,the,same,data,source,p,switch,this,flag,to,true,to,enforce,a,lazy,database,transaction,begin,even,for,non,read,only,transactions,allowing,access,to,eclipse,link,s,shared,cache,and,following,eclipse,link,s,connection,mode,configuration,assuming,that,isolation,and,visibility,at,the,jdbc,level,are,less,important,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction);1535712004;Set whether to lazily start a database resource transaction within a_Spring-managed EclipseLink transaction._<p>By default, read-only transactions are started lazily but regular_non-read-only transactions are started early. This allows for reusing the_same JDBC Connection throughout an entire EclipseLink transaction, for_enforced isolation and consistent visibility with JDBC access code working_on the same DataSource._<p>Switch this flag to "true" to enforce a lazy database transaction begin_even for non-read-only transactions, allowing access to EclipseLink's_shared cache and following EclipseLink's connection mode configuration,_assuming that isolation and visibility at the JDBC level are less important._@see org.eclipse.persistence.sessions.UnitOfWork#beginEarlyTransaction();public void setLazyDatabaseTransaction(boolean lazyDatabaseTransaction) {_		this.lazyDatabaseTransaction = lazyDatabaseTransaction__	};set,whether,to,lazily,start,a,database,resource,transaction,within,a,spring,managed,eclipse,link,transaction,p,by,default,read,only,transactions,are,started,lazily,but,regular,non,read,only,transactions,are,started,early,this,allows,for,reusing,the,same,jdbc,connection,throughout,an,entire,eclipse,link,transaction,for,enforced,isolation,and,consistent,visibility,with,jdbc,access,code,working,on,the,same,data,source,p,switch,this,flag,to,true,to,enforce,a,lazy,database,transaction,begin,even,for,non,read,only,transactions,allowing,access,to,eclipse,link,s,shared,cache,and,following,eclipse,link,s,connection,mode,configuration,assuming,that,isolation,and,visibility,at,the,jdbc,level,are,less,important,see,org,eclipse,persistence,sessions,unit,of,work,begin,early,transaction;public,void,set,lazy,database,transaction,boolean,lazy,database,transaction,this,lazy,database,transaction,lazy,database,transaction
EclipseLinkJpaDialect -> protected Session getSession(EntityManager em);1328020251;Get a traditional EclipseLink Session from the given EntityManager.;protected Session getSession(EntityManager em) {_		JpaEntityManager emi = (JpaEntityManager) em__		return emi.getActiveSession()__	};get,a,traditional,eclipse,link,session,from,the,given,entity,manager;protected,session,get,session,entity,manager,em,jpa,entity,manager,emi,jpa,entity,manager,em,return,emi,get,active,session
EclipseLinkJpaDialect -> protected Session getSession(EntityManager em);1335774711;Get a traditional EclipseLink Session from the given EntityManager.;protected Session getSession(EntityManager em) {_		JpaEntityManager emi = (JpaEntityManager) em__		return emi.getActiveSession()__	};get,a,traditional,eclipse,link,session,from,the,given,entity,manager;protected,session,get,session,entity,manager,em,jpa,entity,manager,emi,jpa,entity,manager,em,return,emi,get,active,session
EclipseLinkJpaDialect -> protected Session getSession(EntityManager em);1356735495;Get a traditional EclipseLink Session from the given EntityManager.;protected Session getSession(EntityManager em) {_		JpaEntityManager emi = (JpaEntityManager) em__		return emi.getActiveSession()__	};get,a,traditional,eclipse,link,session,from,the,given,entity,manager;protected,session,get,session,entity,manager,em,jpa,entity,manager,emi,jpa,entity,manager,em,return,emi,get,active,session
EclipseLinkJpaDialect -> protected Session getSession(EntityManager em);1363714444;Get a traditional EclipseLink Session from the given EntityManager.;protected Session getSession(EntityManager em) {_		JpaEntityManager emi = (JpaEntityManager) em__		return emi.getActiveSession()__	};get,a,traditional,eclipse,link,session,from,the,given,entity,manager;protected,session,get,session,entity,manager,em,jpa,entity,manager,emi,jpa,entity,manager,em,return,emi,get,active,session
