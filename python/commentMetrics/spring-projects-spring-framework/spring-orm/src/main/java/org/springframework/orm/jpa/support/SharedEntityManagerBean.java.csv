commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Specify the EntityManager interface to expose.  * <p>Default is the EntityManager interface as defined by the  * EntityManagerFactoryInfo, if available. Else, the standard  * {@code javax.persistence.EntityManager} interface will be used.  * @see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()  * @see javax.persistence.EntityManager  */ ;/**  * Specify the EntityManager interface to expose.  * <p>Default is the EntityManager interface as defined by the  * EntityManagerFactoryInfo, if available. Else, the standard  * {@code javax.persistence.EntityManager} interface will be used.  * @see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()  * @see javax.persistence.EntityManager  */ public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {     Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null").     this.entityManagerInterface = entityManagerInterface. }
true;public;1;3;/**  * Set whether to automatically join ongoing transactions (according  * to the JPA 2.1 SynchronizationType rules). Default is "true".  */ ;/**  * Set whether to automatically join ongoing transactions (according  * to the JPA 2.1 SynchronizationType rules). Default is "true".  */ public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {     this.synchronizedWithTransaction = synchronizedWithTransaction. }
false;public,final;0;23;;@Override public final void afterPropertiesSet() {     EntityManagerFactory emf = getEntityManagerFactory().     if (emf == null) {         throw new IllegalArgumentException("'entityManagerFactory' or 'persistenceUnitName' is required").     }     if (emf instanceof EntityManagerFactoryInfo) {         EntityManagerFactoryInfo emfInfo = (EntityManagerFactoryInfo) emf.         if (this.entityManagerInterface == null) {             this.entityManagerInterface = emfInfo.getEntityManagerInterface().             if (this.entityManagerInterface == null) {                 this.entityManagerInterface = EntityManager.class.             }         }     } else {         if (this.entityManagerInterface == null) {             this.entityManagerInterface = EntityManager.class.         }     }     this.shared = SharedEntityManagerCreator.createSharedEntityManager(emf, getJpaPropertyMap(), this.synchronizedWithTransaction, this.entityManagerInterface). }
false;public;0;5;;@Override @Nullable public EntityManager getObject() {     return this.shared. }
false;public;0;4;;@Override public Class<? extends EntityManager> getObjectType() {     return (this.entityManagerInterface != null ? this.entityManagerInterface : EntityManager.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
