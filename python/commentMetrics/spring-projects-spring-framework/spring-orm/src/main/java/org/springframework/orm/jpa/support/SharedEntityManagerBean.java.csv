# id;timestamp;commentText;codeText;commentWords;codeWords
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1364391983;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1364559513;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1368482696;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1414678671;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1485810955;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1498780456;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction);1502974979;Set whether to automatically join ongoing transactions (according_to the JPA 2.1 SynchronizationType rules). Default is "true".;public void setSynchronizedWithTransaction(boolean synchronizedWithTransaction) {_		this.synchronizedWithTransaction = synchronizedWithTransaction__	};set,whether,to,automatically,join,ongoing,transactions,according,to,the,jpa,2,1,synchronization,type,rules,default,is,true;public,void,set,synchronized,with,transaction,boolean,synchronized,with,transaction,this,synchronized,with,transaction,synchronized,with,transaction
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1328020251;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_<code>javax.persistence.EntityManager</code> interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,code,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1356735495;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1357119239;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1364391983;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1364559513;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1368482696;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1414678671;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		Assert.isAssignable(EntityManager.class, entityManagerInterface)__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,assert,is,assignable,entity,manager,class,entity,manager,interface,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1485810955;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1498780456;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,this,entity,manager,interface,entity,manager,interface
SharedEntityManagerBean -> public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface);1502974979;Specify the EntityManager interface to expose._<p>Default is the EntityManager interface as defined by the_EntityManagerFactoryInfo, if available. Else, the standard_{@code javax.persistence.EntityManager} interface will be used._@see org.springframework.orm.jpa.EntityManagerFactoryInfo#getEntityManagerInterface()_@see javax.persistence.EntityManager;public void setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface) {_		Assert.notNull(entityManagerInterface, "'entityManagerInterface' must not be null")__		this.entityManagerInterface = entityManagerInterface__	};specify,the,entity,manager,interface,to,expose,p,default,is,the,entity,manager,interface,as,defined,by,the,entity,manager,factory,info,if,available,else,the,standard,code,javax,persistence,entity,manager,interface,will,be,used,see,org,springframework,orm,jpa,entity,manager,factory,info,get,entity,manager,interface,see,javax,persistence,entity,manager;public,void,set,entity,manager,interface,class,extends,entity,manager,entity,manager,interface,assert,not,null,entity,manager,interface,entity,manager,interface,must,not,be,null,this,entity,manager,interface,entity,manager,interface
