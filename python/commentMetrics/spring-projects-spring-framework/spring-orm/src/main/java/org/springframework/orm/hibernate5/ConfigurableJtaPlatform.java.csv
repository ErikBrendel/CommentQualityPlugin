commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TransactionManager retrieveTransactionManager() {     return this.transactionManager. }
false;public;0;4;;@Override public UserTransaction retrieveUserTransaction() {     return this.userTransaction. }
false;public;1;4;;@Override public Object getTransactionIdentifier(Transaction transaction) {     return transaction. }
false;public;0;9;;@Override public boolean canRegisterSynchronization() {     try {         return (this.transactionManager.getStatus() == Status.STATUS_ACTIVE).     } catch (SystemException ex) {         throw new TransactionException("Could not determine JTA transaction status", ex).     } }
false;public;1;14;;@Override public void registerSynchronization(Synchronization synchronization) {     if (this.transactionSynchronizationRegistry != null) {         this.transactionSynchronizationRegistry.registerInterposedSynchronization(synchronization).     } else {         try {             this.transactionManager.getTransaction().registerSynchronization(synchronization).         } catch (Exception ex) {             throw new TransactionException("Could not access JTA Transaction to register synchronization", ex).         }     } }
false;public;0;4;;@Override public int getCurrentStatus() throws SystemException {     return this.transactionManager.getStatus(). }
