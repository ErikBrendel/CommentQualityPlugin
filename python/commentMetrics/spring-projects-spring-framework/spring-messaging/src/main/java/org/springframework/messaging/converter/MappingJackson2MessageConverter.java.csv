# id;timestamp;commentText;codeText;commentWords;codeWords
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1437753031;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter methodParam = (MethodParameter) conversionHint__			JsonView annotation = methodParam.getParameterAnnotation(JsonView.class)__			if (annotation == null) {_				annotation = methodParam.getMethodAnnotation(JsonView.class)__				if (annotation == null) {_					return null__				}_			}_			return extractViewClass(annotation, conversionHint)__		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}_		else {_			return null__		}_	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,method,param,method,parameter,conversion,hint,json,view,annotation,method,param,get,parameter,annotation,json,view,class,if,annotation,null,annotation,method,param,get,method,annotation,json,view,class,if,annotation,null,return,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,else,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1438124725;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1445855940;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1450368890;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1450380453;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1460635993;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1460644739;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1467730834;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected Class<?> getSerializationView(Object conversionHint);1468964586;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1386350678;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1388350243;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1388680038;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1391790437;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1395698258;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1404933789;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1413848647;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1417596581;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1424265799;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1424274301;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1432042540;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1432125256;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1437139543;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1437753031;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1438124725;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1445855940;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1450368890;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1450380453;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460635993;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1460644739;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1467730834;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1468964586;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1495868221;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496242568;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496837955;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1496853199;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1498780456;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1499879583;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1502974979;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1508532146;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1513135953;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1518489026;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> public void setPrettyPrint(boolean prettyPrint);1529264540;Whether to use the {@link DefaultPrettyPrinter} when writing JSON._This is a shortcut for setting up an {@code ObjectMapper} as follows:_<pre class="code">_ObjectMapper mapper = new ObjectMapper()__mapper.configure(SerializationFeature.INDENT_OUTPUT, true)__converter.setObjectMapper(mapper)__</pre>;public void setPrettyPrint(boolean prettyPrint) {_		this.prettyPrint = prettyPrint__		configurePrettyPrint()__	};whether,to,use,the,link,default,pretty,printer,when,writing,json,this,is,a,shortcut,for,setting,up,an,code,object,mapper,as,follows,pre,class,code,object,mapper,mapper,new,object,mapper,mapper,configure,serialization,feature,true,converter,set,object,mapper,mapper,pre;public,void,set,pretty,print,boolean,pretty,print,this,pretty,print,pretty,print,configure,pretty,print
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1386350678;Determine the JSON encoding to use for the given content type.__@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1388350243;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1388680038;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1391790437;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1395698258;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1404933789;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1413848647;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1417596581;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1424265799;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1424274301;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1432042540;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1432125256;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1437139543;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1437753031;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1438124725;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1445855940;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1450368890;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1450380453;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1460635993;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharSet() != null)) {_			Charset charset = contentType.getCharSet()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,char,set,null,charset,charset,content,type,get,char,set,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1460644739;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1467730834;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1468964586;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1495868221;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(MimeType contentType);1496242568;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(MimeType contentType) {_		if ((contentType != null) && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1388680038;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1391790437;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1395698258;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1404933789;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1413848647;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1417596581;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1424265799;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1424274301;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1432042540;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1432125256;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1437139543;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1437753031;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1438124725;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1445855940;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1450368890;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1450380453;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1460635993;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1460644739;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1467730834;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1468964586;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1495868221;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1496242568;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1496837955;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1496853199;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1498780456;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1499879583;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1502974979;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1508532146;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1513135953;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1518489026;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public ObjectMapper getObjectMapper();1529264540;Return the underlying {@code ObjectMapper} for this converter.;public ObjectMapper getObjectMapper() {_		return this.objectMapper__	};return,the,underlying,code,object,mapper,for,this,converter;public,object,mapper,get,object,mapper,return,this,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1424274301;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1432042540;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1432125256;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1437139543;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1437753031;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1438124725;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1445855940;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1450368890;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1450380453;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1460635993;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1460644739;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1467730834;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1468964586;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1495868221;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1496242568;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1496837955;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1496853199;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1498780456;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1499879583;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1502974979;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1508532146;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1513135953;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1518489026;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter(MimeType... supportedMimeTypes);1529264540;Construct a {@code MappingJackson2MessageConverter} supporting_one or more custom MIME types._@param supportedMimeTypes the supported MIME types_@since 4.1.5;public MappingJackson2MessageConverter(MimeType... supportedMimeTypes) {_		super(Arrays.asList(supportedMimeTypes))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,one,or,more,custom,mime,types,param,supported,mime,types,the,supported,mime,types,since,4,1,5;public,mapping,jackson2message,converter,mime,type,supported,mime,types,super,arrays,as,list,supported,mime,types,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1424265799;Construct a {@code MappingJackson2MessageConverter} supporting {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		this(new MimeType("application", "json", Charset.forName("UTF-8")))__	};construct,a,code,mapping,jackson2message,converter,supporting,code,application,json,mime,type;public,mapping,jackson2message,converter,this,new,mime,type,application,json,charset,for,name,utf,8
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1424274301;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1432042540;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1432125256;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1437139543;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1437753031;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1438124725;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1445855940;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1450368890;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1450380453;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1460635993;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1460644739;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1467730834;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", Charset.forName("UTF-8")))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,charset,for,name,utf,8,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1468964586;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1495868221;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1496242568;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1496837955;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1496853199;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1498780456;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1499879583;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1502974979;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1508532146;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1513135953;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1518489026;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> public MappingJackson2MessageConverter();1529264540;Construct a {@code MappingJackson2MessageConverter} supporting_the {@code application/json} MIME type with {@code UTF-8} character set.;public MappingJackson2MessageConverter() {_		super(new MimeType("application", "json", StandardCharsets.UTF_8))__		this.objectMapper = initObjectMapper()__	};construct,a,code,mapping,jackson2message,converter,supporting,the,code,application,json,mime,type,with,code,utf,8,character,set;public,mapping,jackson2message,converter,super,new,mime,type,application,json,standard,charsets,this,object,mapper,init,object,mapper
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1460635993;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1460644739;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1467730834;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1468964586;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1495868221;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, Throwable cause);1496242568;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1496837955;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause != null && !(cause instanceof JsonMappingException && cause.getMessage().startsWith("Can not find"))) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1496853199;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1498780456;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1499879583;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1502974979;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1508532146;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1513135953;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1518489026;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		boolean debugLevel = (cause instanceof JsonMappingException &&_				cause.getMessage().startsWith("Can not find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,can,not,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> protected void logWarningIfNecessary(Type type, @Nullable Throwable cause);1529264540;Determine whether to log the given exception coming from a_{@link ObjectMapper#canDeserialize} / {@link ObjectMapper#canSerialize} check._@param type the class that Jackson tested for (de-)serializability_@param cause the Jackson-thrown exception to evaluate_(typically a {@link JsonMappingException})_@since 4.3;protected void logWarningIfNecessary(Type type, @Nullable Throwable cause) {_		if (cause == null) {_			return__		}__		_		boolean debugLevel = (cause instanceof JsonMappingException && cause.getMessage().startsWith("Cannot find"))___		if (debugLevel ? logger.isDebugEnabled() : logger.isWarnEnabled()) {_			String msg = "Failed to evaluate Jackson " + (type instanceof JavaType ? "de" : "") +_					"serialization for type [" + type + "]"__			if (debugLevel) {_				logger.debug(msg, cause)__			}_			else if (logger.isDebugEnabled()) {_				logger.warn(msg, cause)__			}_			else {_				logger.warn(msg + ": " + cause)__			}_		}_	};determine,whether,to,log,the,given,exception,coming,from,a,link,object,mapper,can,deserialize,link,object,mapper,can,serialize,check,param,type,the,class,that,jackson,tested,for,de,serializability,param,cause,the,jackson,thrown,exception,to,evaluate,typically,a,link,json,mapping,exception,since,4,3;protected,void,log,warning,if,necessary,type,type,nullable,throwable,cause,if,cause,null,return,boolean,debug,level,cause,instanceof,json,mapping,exception,cause,get,message,starts,with,cannot,find,if,debug,level,logger,is,debug,enabled,logger,is,warn,enabled,string,msg,failed,to,evaluate,jackson,type,instanceof,java,type,de,serialization,for,type,type,if,debug,level,logger,debug,msg,cause,else,if,logger,is,debug,enabled,logger,warn,msg,cause,else,logger,warn,msg,cause
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1388680038;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1391790437;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1395698258;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1404933789;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1413848647;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1417596581;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1424265799;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1424274301;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1432042540;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1432125256;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1437139543;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1437753031;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1438124725;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1445855940;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1450368890;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1450380453;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460635993;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1460644739;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1467730834;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1468964586;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1495868221;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496242568;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496837955;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1496853199;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1498780456;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1499879583;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1502974979;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1508532146;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1513135953;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1518489026;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> public void setObjectMapper(ObjectMapper objectMapper);1529264540;Set the {@code ObjectMapper} for this converter._If not set, a default {@link ObjectMapper#ObjectMapper() ObjectMapper} is used._<p>Setting a custom-configured {@code ObjectMapper} is one way to take further_control of the JSON serialization process. For example, an extended_{@link com.fasterxml.jackson.databind.ser.SerializerFactory} can be_configured that provides custom serializers for specific types. The other_option for refining the serialization process is to use Jackson's provided_annotations on the types to be serialized, in which case a custom-configured_ObjectMapper is unnecessary.;public void setObjectMapper(ObjectMapper objectMapper) {_		Assert.notNull(objectMapper, "ObjectMapper must not be null")__		this.objectMapper = objectMapper__		configurePrettyPrint()__	};set,the,code,object,mapper,for,this,converter,if,not,set,a,default,link,object,mapper,object,mapper,object,mapper,is,used,p,setting,a,custom,configured,code,object,mapper,is,one,way,to,take,further,control,of,the,json,serialization,process,for,example,an,extended,link,com,fasterxml,jackson,databind,ser,serializer,factory,can,be,configured,that,provides,custom,serializers,for,specific,types,the,other,option,for,refining,the,serialization,process,is,to,use,jackson,s,provided,annotations,on,the,types,to,be,serialized,in,which,case,a,custom,configured,object,mapper,is,unnecessary;public,void,set,object,mapper,object,mapper,object,mapper,assert,not,null,object,mapper,object,mapper,must,not,be,null,this,object,mapper,object,mapper,configure,pretty,print
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1496837955;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1496853199;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1498780456;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1499879583;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1502974979;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1508532146;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1513135953;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1518489026;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(@Nullable Object conversionHint);1529264540;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(@Nullable Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,nullable,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1496837955;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1496853199;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1498780456;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1499879583;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1502974979;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1508532146;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1513135953;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1518489026;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType);1529264540;Determine the JSON encoding to use for the given content type._@param contentType the MIME type from the MessageHeaders, if any_@return the JSON encoding to use (never {@code null});protected JsonEncoding getJsonEncoding(@Nullable MimeType contentType) {_		if (contentType != null && (contentType.getCharset() != null)) {_			Charset charset = contentType.getCharset()__			for (JsonEncoding encoding : JsonEncoding.values()) {_				if (charset.name().equals(encoding.getJavaName())) {_					return encoding__				}_			}_		}_		return JsonEncoding.UTF8__	};determine,the,json,encoding,to,use,for,the,given,content,type,param,content,type,the,mime,type,from,the,message,headers,if,any,return,the,json,encoding,to,use,never,code,null;protected,json,encoding,get,json,encoding,nullable,mime,type,content,type,if,content,type,null,content,type,get,charset,null,charset,charset,content,type,get,charset,for,json,encoding,encoding,json,encoding,values,if,charset,name,equals,encoding,get,java,name,return,encoding,return,json,encoding,utf8
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(Object conversionHint);1495868221;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
MappingJackson2MessageConverter -> @Nullable 	protected Class<?> getSerializationView(Object conversionHint);1496242568;Determine a Jackson serialization view based on the given conversion hint._@param conversionHint the conversion hint Object as passed into the_converter for the current conversion attempt_@return the serialization view class, or {@code null} if none_@since 4.2;@Nullable_	protected Class<?> getSerializationView(Object conversionHint) {_		if (conversionHint instanceof MethodParameter) {_			MethodParameter param = (MethodParameter) conversionHint__			JsonView annotation = (param.getParameterIndex() >= 0 ?_					param.getParameterAnnotation(JsonView.class) : param.getMethodAnnotation(JsonView.class))__			if (annotation != null) {_				return extractViewClass(annotation, conversionHint)__			}_		}_		else if (conversionHint instanceof JsonView) {_			return extractViewClass((JsonView) conversionHint, conversionHint)__		}_		else if (conversionHint instanceof Class) {_			return (Class<?>) conversionHint__		}__		_		return null__	};determine,a,jackson,serialization,view,based,on,the,given,conversion,hint,param,conversion,hint,the,conversion,hint,object,as,passed,into,the,converter,for,the,current,conversion,attempt,return,the,serialization,view,class,or,code,null,if,none,since,4,2;nullable,protected,class,get,serialization,view,object,conversion,hint,if,conversion,hint,instanceof,method,parameter,method,parameter,param,method,parameter,conversion,hint,json,view,annotation,param,get,parameter,index,0,param,get,parameter,annotation,json,view,class,param,get,method,annotation,json,view,class,if,annotation,null,return,extract,view,class,annotation,conversion,hint,else,if,conversion,hint,instanceof,json,view,return,extract,view,class,json,view,conversion,hint,conversion,hint,else,if,conversion,hint,instanceof,class,return,class,conversion,hint,return,null
