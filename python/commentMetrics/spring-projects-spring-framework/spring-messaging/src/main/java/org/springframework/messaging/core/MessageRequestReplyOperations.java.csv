# id;timestamp;commentText;codeText;commentWords;codeWords
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, 			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass,_			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,nullable,map,string,object,headers,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, 			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass,_			@Nullable MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,nullable,map,string,object,headers,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1495868221;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1496259743;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1497559506;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1530174524;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor) 			throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to a_default destination, receive the reply and convert its body of the given_target class.__@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor) 			throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to a_default destination, receive the reply and convert its body of the given_target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor) 			throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to a_default destination, receive the reply and convert its body of the given_target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1495868221;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1496259743;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1497559506;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1530174524;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;@Nullable_	Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1386297052;Send a request message and receive the reply from the given destination.__@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1386350678;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;1427240641;Send a request message and receive the reply from the given destination._@param destination the target destination_@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(D destination, Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,the,given,destination,param,destination,the,target,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,d,destination,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class.__@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class.__@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, 			MessagePostProcessor requestPostProcessor) throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to the_given destination, receive the reply and convert its body of the given_target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass,_			MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class.__@param destination the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) 			throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} with the given headers, to the specified destination,_receive the reply and convert its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param headers headers for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,with,the,given,headers,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,headers,headers,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,nullable,map,string,object,headers,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) 			throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to a_default destination, receive the reply and convert its body of the given_target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive( 			Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor) 			throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_apply the given post processor and send the resulting {@link Message} to a_default destination, receive the reply and convert its body of the given_target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(_			Object request, Class<T> targetClass, @Nullable MessagePostProcessor requestPostProcessor)_			throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,apply,the,given,post,processor,and,send,the,resulting,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,object,request,class,t,target,class,nullable,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1495868221;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1496259743;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1497559506;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> @Nullable 	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;1530174524;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to the given destination, receive the reply and convert_its body of the specified target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;@Nullable_	<T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,the,given,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;nullable,t,t,convert,send,and,receive,d,destination,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class.__@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter}, send_it as a {@link Message} to a default destination, receive the reply and convert_its body of the specified target class._@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(Object request, Class<T> targetClass) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,send,it,as,a,link,message,to,a,default,destination,receive,the,reply,and,convert,its,body,of,the,specified,target,class,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,object,request,class,t,target,class,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386297052;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.support.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class.__@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,support,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1386350678;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> <T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers, 			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;1427240641;Convert the given request Object to serialized form, possibly using a_{@link org.springframework.messaging.converter.MessageConverter},_wrap it as a message with the given headers, apply the given post processor_and send the resulting {@link Message} to the specified destination, receive_the reply and convert its body of the given target class._@param destination the target destination_@param request payload for the request message to send_@param targetClass the target type to convert the payload of the reply to_@param requestPostProcessor post process to apply to the request message_@return the payload of the reply message, possibly {@code null} if the message_could not be received, for example due to a timeout;<T> T convertSendAndReceive(D destination, Object request, Map<String, Object> headers,_			Class<T> targetClass, MessagePostProcessor requestPostProcessor) throws MessagingException_;convert,the,given,request,object,to,serialized,form,possibly,using,a,link,org,springframework,messaging,converter,message,converter,wrap,it,as,a,message,with,the,given,headers,apply,the,given,post,processor,and,send,the,resulting,link,message,to,the,specified,destination,receive,the,reply,and,convert,its,body,of,the,given,target,class,param,destination,the,target,destination,param,request,payload,for,the,request,message,to,send,param,target,class,the,target,type,to,convert,the,payload,of,the,reply,to,param,request,post,processor,post,process,to,apply,to,the,request,message,return,the,payload,of,the,reply,message,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;t,t,convert,send,and,receive,d,destination,object,request,map,string,object,headers,class,t,target,class,message,post,processor,request,post,processor,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1386297052;Send a request message and receive the reply from a default destination.__@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1386350678;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,message,request,message,throws,messaging,exception
MessageRequestReplyOperations -> Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;1427240641;Send a request message and receive the reply from a default destination._@param requestMessage the message to send_@return the reply, possibly {@code null} if the message could not be received,_for example due to a timeout;Message<?> sendAndReceive(Message<?> requestMessage) throws MessagingException_;send,a,request,message,and,receive,the,reply,from,a,default,destination,param,request,message,the,message,to,send,return,the,reply,possibly,code,null,if,the,message,could,not,be,received,for,example,due,to,a,timeout;message,send,and,receive,message,request,message,throws,messaging,exception
