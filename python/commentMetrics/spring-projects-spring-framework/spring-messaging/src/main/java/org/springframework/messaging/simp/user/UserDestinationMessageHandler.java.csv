# id;timestamp;commentText;codeText;commentWords;codeWords
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1496837955;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1498780456;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1500448076;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1521123475;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1531942400;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> @Nullable 	public String getBroadcastDestination();1534414082;Return the configured destination for unresolved messages.;@Nullable_	public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;nullable,public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397523793;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1398443164;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1399601217;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403856366;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404062102;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404880799;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1413848647;Configure a {@link MessageHeaderInitializer} to pass on to_{@link org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler}s_that send messages from controller return values.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,pass,on,to,link,org,springframework,messaging,handler,invocation,handler,method,return,value,handler,s,that,send,messages,from,controller,return,values,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1429286144;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1429286144;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1431458952;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1432018141;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1462186904;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1495868221;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496837955;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1498780456;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public String getBroadcastDestination();1431458952;Return the configured destination for unresolved messages.;public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> public String getBroadcastDestination();1432018141;Return the configured destination for unresolved messages.;public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> public String getBroadcastDestination();1462186904;Return the configured destination for unresolved messages.;public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> public String getBroadcastDestination();1495868221;Return the configured destination for unresolved messages.;public String getBroadcastDestination() {_		return (this.broadcastHandler != null ? this.broadcastHandler.getBroadcastDestination() : null)__	};return,the,configured,destination,for,unresolved,messages;public,string,get,broadcast,destination,return,this,broadcast,handler,null,this,broadcast,handler,get,broadcast,destination,null
UserDestinationMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500448076;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1521123475;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1531942400;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1534414082;Configure a custom {@link MessageHeaderInitializer} to initialize the_headers of resolved target messages._<p>By default this is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,custom,link,message,header,initializer,to,initialize,the,headers,of,resolved,target,messages,p,by,default,this,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1386367529;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1390409744;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1392327536;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1392410380;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1396636309;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1397429525;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1397523793;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1398443164;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1399601217;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1403856366;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1404062102;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1404880799;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1413848647;Return the configured messaging template for sending messages with_translated destinations.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.brokerMessagingTemplate__	};return,the,configured,messaging,template,for,sending,messages,with,translated,destinations;public,message,sending,operations,string,get,broker,messaging,template,return,this,broker,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1429286144;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1429286144;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1431458952;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1432018141;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1462186904;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1495868221;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1496837955;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1498780456;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1500448076;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1521123475;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1531942400;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public MessageSendingOperations<String> getBrokerMessagingTemplate();1534414082;Return the messaging template used to send resolved messages to the_broker channel.;public MessageSendingOperations<String> getBrokerMessagingTemplate() {_		return this.messagingTemplate__	};return,the,messaging,template,used,to,send,resolved,messages,to,the,broker,channel;public,message,sending,operations,string,get,broker,messaging,template,return,this,messaging,template
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1390409744;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1392327536;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1392410380;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1396636309;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1397429525;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1397523793;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1398443164;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1399601217;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1403856366;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1404062102;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1404880799;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver);1413848647;Create an instance of the handler with the given messaging template and a_user destination resolver._@param clientInChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param brokerChannel the channel for sending messages with translated user destinations_@param userDestinationResolver the resolver to use to find queue suffixes for a user;public UserDestinationMessageHandler(SubscribableChannel clientInChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver userDestinationResolver) {__		Assert.notNull(clientInChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(userDestinationResolver, "DestinationResolver must not be null")___		this.clientInboundChannel = clientInChannel__		this.brokerChannel = brokerChannel__		this.brokerMessagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.userDestinationResolver = userDestinationResolver__	};create,an,instance,of,the,handler,with,the,given,messaging,template,and,a,user,destination,resolver,param,client,in,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,sending,messages,with,translated,user,destinations,param,user,destination,resolver,the,resolver,to,use,to,find,queue,suffixes,for,a,user;public,user,destination,message,handler,subscribable,channel,client,in,channel,subscribable,channel,broker,channel,user,destination,resolver,user,destination,resolver,assert,not,null,client,in,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,user,destination,resolver,destination,resolver,must,not,be,null,this,client,inbound,channel,client,in,channel,this,broker,channel,broker,channel,this,broker,messaging,template,new,simp,messaging,template,broker,channel,this,user,destination,resolver,user,destination,resolver
UserDestinationMessageHandler -> public void setBroadcastDestination(@Nullable String destination);1500448076;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(@Nullable String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,nullable,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(@Nullable String destination);1521123475;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(@Nullable String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,nullable,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(@Nullable String destination);1531942400;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(@Nullable String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,nullable,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(@Nullable String destination);1534414082;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(@Nullable String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,nullable,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1431458952;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1432018141;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1462186904;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1495868221;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1496837955;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> public void setBroadcastDestination(String destination);1498780456;Set a destination to broadcast messages to that remain unresolved because_the user is not connected. In a multi-application server scenario this_gives other application servers a chance to try._<p>By default this is not set._@param destination the target destination.;public void setBroadcastDestination(String destination) {_		this.broadcastHandler = (StringUtils.hasText(destination) ?_				new BroadcastHandler(this.messagingTemplate, destination) : null)__	};set,a,destination,to,broadcast,messages,to,that,remain,unresolved,because,the,user,is,not,connected,in,a,multi,application,server,scenario,this,gives,other,application,servers,a,chance,to,try,p,by,default,this,is,not,set,param,destination,the,target,destination;public,void,set,broadcast,destination,string,destination,this,broadcast,handler,string,utils,has,text,destination,new,broadcast,handler,this,messaging,template,destination,null
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496837955;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1498780456;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500448076;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1521123475;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1531942400;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1534414082;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1386367529;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1390409744;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1392327536;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1392410380;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1396636309;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1397429525;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1397523793;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1398443164;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1399601217;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1403856366;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1404062102;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1404880799;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1413848647;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.userDestinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,user,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1429286144;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1429286144;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1431458952;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1432018141;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1462186904;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1495868221;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1496837955;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1498780456;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1500448076;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1521123475;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1531942400;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public UserDestinationResolver getUserDestinationResolver();1534414082;Return the configured {@link UserDestinationResolver}.;public UserDestinationResolver getUserDestinationResolver() {_		return this.destinationResolver__	};return,the,configured,link,user,destination,resolver;public,user,destination,resolver,get,user,destination,resolver,return,this,destination,resolver
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1397523793;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1398443164;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1399601217;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1403856366;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404062102;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404880799;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1413848647;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1429286144;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1429286144;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1431458952;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1432018141;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1462186904;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1495868221;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1429286144;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1429286144;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1431458952;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1432018141;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1462186904;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1495868221;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1496837955;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1498780456;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1500448076;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1521123475;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1531942400;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
UserDestinationMessageHandler -> public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel, 			SubscribableChannel brokerChannel, UserDestinationResolver resolver);1534414082;Create an instance with the given client and broker channels subscribing_to handle messages from each and then sending any resolved messages to the_broker channel._@param clientInboundChannel messages received from clients._@param brokerChannel messages sent to the broker._@param resolver the resolver for "user" destinations.;public UserDestinationMessageHandler(SubscribableChannel clientInboundChannel,_			SubscribableChannel brokerChannel, UserDestinationResolver resolver) {__		Assert.notNull(clientInboundChannel, "'clientInChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		Assert.notNull(resolver, "resolver must not be null")___		this.clientInboundChannel = clientInboundChannel__		this.brokerChannel = brokerChannel__		this.messagingTemplate = new SimpMessagingTemplate(brokerChannel)__		this.destinationResolver = resolver__	};create,an,instance,with,the,given,client,and,broker,channels,subscribing,to,handle,messages,from,each,and,then,sending,any,resolved,messages,to,the,broker,channel,param,client,inbound,channel,messages,received,from,clients,param,broker,channel,messages,sent,to,the,broker,param,resolver,the,resolver,for,user,destinations;public,user,destination,message,handler,subscribable,channel,client,inbound,channel,subscribable,channel,broker,channel,user,destination,resolver,resolver,assert,not,null,client,inbound,channel,client,in,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,assert,not,null,resolver,resolver,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,broker,channel,broker,channel,this,messaging,template,new,simp,messaging,template,broker,channel,this,destination,resolver,resolver
