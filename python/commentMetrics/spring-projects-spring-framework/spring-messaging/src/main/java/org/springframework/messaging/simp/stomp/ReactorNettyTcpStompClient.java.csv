commented;modifiers;parameterAmount;loc;comment;code
false;private,static;2;5;;private static ReactorNettyTcpClient<byte[]> initTcpClient(String host, int port) {     ReactorNettyTcpClient<byte[]> client = new ReactorNettyTcpClient<>(host, port, new StompReactorNettyCodec()).     client.setLogger(SimpLogging.forLog(client.getLogger())).     return client. }
true;public;1;3;/**  * Connect and notify the given {@link StompSessionHandler} when connected  * on the STOMP level.  * @param handler the handler for the STOMP session  * @return a ListenableFuture for access to the session when ready for use  */ ;/**  * Connect and notify the given {@link StompSessionHandler} when connected  * on the STOMP level.  * @param handler the handler for the STOMP session  * @return a ListenableFuture for access to the session when ready for use  */ public ListenableFuture<StompSession> connect(StompSessionHandler handler) {     return connect(null, handler). }
true;public;2;5;/**  * An overloaded version of {@link #connect(StompSessionHandler)} that  * accepts headers to use for the STOMP CONNECT frame.  * @param connectHeaders headers to add to the CONNECT frame  * @param handler the handler for the STOMP session  * @return a ListenableFuture for access to the session when ready for use  */ ;/**  * An overloaded version of {@link #connect(StompSessionHandler)} that  * accepts headers to use for the STOMP CONNECT frame.  * @param connectHeaders headers to add to the CONNECT frame  * @param handler the handler for the STOMP session  * @return a ListenableFuture for access to the session when ready for use  */ public ListenableFuture<StompSession> connect(@Nullable StompHeaders connectHeaders, StompSessionHandler handler) {     ConnectionHandlingStompSession session = createSession(connectHeaders, handler).     this.tcpClient.connect(session).     return session.getSessionFuture(). }
true;public;0;3;/**  * Shut down the client and release resources.  */ ;/**  * Shut down the client and release resources.  */ public void shutdown() {     this.tcpClient.shutdown(). }
false;public;0;4;;@Override public String toString() {     return "ReactorNettyTcpStompClient[" + this.tcpClient + "]". }
