# id;timestamp;commentText;codeText;commentWords;codeWords
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1373651081;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1374026866;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1374070195;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1374083925;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1374099399;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1381152424;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1381440318;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1384292065;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1385507478;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1386350678;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1386367529;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1390334271;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1391653535;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1397429525;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1397523793;Specify the timeout value to use for send operations.__@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1397762377;Specify the timeout value to use for send operations._@param sendTimeout the send timeout in milliseconds;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,param,send,timeout,the,send,timeout,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1397767187;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1403887432;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1403887432;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1411389021;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1413848647;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1485810955;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1494926542;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1496242568;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1496837955;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1500448076;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1500457438;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1508532146;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1516413763;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public void setSendTimeout(long sendTimeout);1522103912;Specify the timeout value to use for send operations (in milliseconds).;public void setSendTimeout(long sendTimeout) {_		this.sendTimeout = sendTimeout__	};specify,the,timeout,value,to,use,for,send,operations,in,milliseconds;public,void,set,send,timeout,long,send,timeout,this,send,timeout,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1374070195;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1374083925;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1374099399;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1381152424;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1381440318;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1384292065;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1385507478;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1386350678;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1386367529;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1390334271;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1391653535;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1397429525;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1397523793;@return the sendTimeout;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1397762377;Return the configured send timeout.;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1397767187;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1403887432;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1403887432;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1411389021;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1413848647;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1485810955;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1494926542;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1496242568;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1496837955;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1500448076;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1500457438;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1508532146;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1516413763;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> public long getSendTimeout();1522103912;Return the configured send timeout (in milliseconds).;public long getSendTimeout() {_		return this.sendTimeout__	};return,the,configured,send,timeout,in,milliseconds;public,long,get,send,timeout,return,this,send,timeout
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496837955;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500448076;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500457438;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1508532146;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1516413763;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1522103912;Return the configured header initializer.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1374070195;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1374083925;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1374099399;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1381152424;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1381440318;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1384292065;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1385507478;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1386350678;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1386367529;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1390334271;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1391653535;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1397429525;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1397523793;@return the messageChannel;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1397762377;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1397767187;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1403887432;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1403887432;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1411389021;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1413848647;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1485810955;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1494926542;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1496242568;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1496837955;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1500448076;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1500457438;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1508532146;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1516413763;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public MessageChannel getMessageChannel();1522103912;Return the configured message channel.;public MessageChannel getMessageChannel() {_		return this.messageChannel__	};return,the,configured,message,channel;public,message,channel,get,message,channel,return,this,message,channel
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1374070195;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1374083925;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "userDestinationPrefix is required")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,is,required,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1374099399;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "userDestinationPrefix is required")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,is,required,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1381152424;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "userDestinationPrefix is required")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,is,required,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1381440318;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "userDestinationPrefix is required")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,is,required,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1384292065;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "userDestinationPrefix is required")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,is,required,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1385507478;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1386350678;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.handler.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,handler,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1386367529;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1390334271;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1391653535;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1397429525;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1397523793;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1397762377;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1397767187;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.notNull(prefix, "UserDestinationPrefix must not be null")__		this.userDestinationPrefix = prefix__	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,not,null,prefix,user,destination,prefix,must,not,be,null,this,user,destination,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1403887432;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "'userDestinationPrefix' must not be empty")__		this.userDestinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,user,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1403887432;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "'destinationPrefix' must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1411389021;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "'destinationPrefix' must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1413848647;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "'destinationPrefix' must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1485810955;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1494926542;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1496242568;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1496837955;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1500448076;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1500457438;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1508532146;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1516413763;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public void setUserDestinationPrefix(String prefix);1522103912;Configure the prefix to use for destinations targeting a specific user._<p>The default value is "/user/"._@see org.springframework.messaging.simp.user.UserDestinationMessageHandler;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "User destination prefix must not be empty")__		this.destinationPrefix = (prefix.endsWith("/") ? prefix : prefix + "/")___	};configure,the,prefix,to,use,for,destinations,targeting,a,specific,user,p,the,default,value,is,user,see,org,springframework,messaging,simp,user,user,destination,message,handler;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,user,destination,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1397523793;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1397762377;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1397767187;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1403887432;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1403887432;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1411389021;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1413848647;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1485810955;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1494926542;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public MessageHeaderInitializer getHeaderInitializer();1496242568;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1385507478;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1386350678;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1386367529;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1390334271;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1391653535;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1397429525;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1397523793;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1397762377;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1397767187;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1403887432;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1403887432;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "'messageChannel' must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1411389021;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "'messageChannel' must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1413848647;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (must not be {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "'messageChannel' must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,must,not,be,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1485810955;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1494926542;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1496242568;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1496837955;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1500448076;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1500457438;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1508532146;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1516413763;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public SimpMessagingTemplate(MessageChannel messageChannel);1522103912;Create a new {@link SimpMessagingTemplate} instance._@param messageChannel the message channel (never {@code null});public SimpMessagingTemplate(MessageChannel messageChannel) {_		Assert.notNull(messageChannel, "MessageChannel must not be null")__		this.messageChannel = messageChannel__	};create,a,new,link,simp,messaging,template,instance,param,message,channel,the,message,channel,never,code,null;public,simp,messaging,template,message,channel,message,channel,assert,not,null,message,channel,message,channel,must,not,be,null,this,message,channel,message,channel
SimpMessagingTemplate -> public String getUserDestinationPrefix();1374070195;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1374083925;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1374099399;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1381152424;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1381440318;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1384292065;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1385507478;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1386350678;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1386367529;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1390334271;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1391653535;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1397429525;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1397523793;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1397762377;@return the userDestinationPrefix;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1397767187;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1403887432;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.userDestinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,user,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1403887432;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1411389021;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1413848647;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1485810955;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1494926542;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1496242568;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1496837955;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1500448076;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1500457438;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1508532146;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1516413763;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> public String getUserDestinationPrefix();1522103912;Return the configured user destination prefix.;public String getUserDestinationPrefix() {_		return this.destinationPrefix__	};return,the,configured,user,destination,prefix;public,string,get,user,destination,prefix,return,this,destination,prefix
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1397429525;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes.__<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured.__@param message the message to send, never {@code null};@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1397523793;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes.__<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured.__@param message the message to send, never {@code null};@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1397762377;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1397767187;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1403887432;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1403887432;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1411389021;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1413848647;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "'message' is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1485810955;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1494926542;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1496242568;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1496837955;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1500448076;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1500457438;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1508532146;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1516413763;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> @Override 	public void send(Message<?> message);1522103912;If the headers of the given message already contain a_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor#DESTINATION_HEADER_SimpMessageHeaderAccessor#DESTINATION_HEADER} then the message is sent without_further changes._<p>If a destination header is not already present ,the message is sent_to the configured {@link #setDefaultDestination(Object) defaultDestination}_or an exception an {@code IllegalStateException} is raised if that isn't_configured._@param message the message to send (never {@code null});@Override_	public void send(Message<?> message) {_		Assert.notNull(message, "Message is required")__		String destination = SimpMessageHeaderAccessor.getDestination(message.getHeaders())__		if (destination != null) {_			sendInternal(message)__			return__		}_		doSend(getRequiredDefaultDestination(), message)__	};if,the,headers,of,the,given,message,already,contain,a,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,message,is,sent,without,further,changes,p,if,a,destination,header,is,not,already,present,the,message,is,sent,to,the,configured,link,set,default,destination,object,default,destination,or,an,exception,an,code,illegal,state,exception,is,raised,if,that,isn,t,configured,param,message,the,message,to,send,never,code,null;override,public,void,send,message,message,assert,not,null,message,message,is,required,string,destination,simp,message,header,accessor,get,destination,message,get,headers,if,destination,null,send,internal,message,return,do,send,get,required,default,destination,message
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397523793;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397762377;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397767187;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403887432;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403887432;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1411389021;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1413848647;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1485810955;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1494926542;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496242568;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496837955;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1496242568;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1496837955;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1500448076;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1500457438;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1508532146;Creates a new map and puts the given headers under the key_{@link NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1516413763;Creates a new map and puts the given headers under the key_{@link NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1522103912;Creates a new map and puts the given headers under the key_{@link NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		headers.forEach((key, value) -> headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null)))__		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,headers,for,each,key,value,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1391653535;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}._Effectively this treats all given headers as headers to be sent out to the_external source._<p>_If the given headers already contain the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS}_then the same header map is returned (i.e. without any changes).;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {__		if (headers == null) {_			return null__		}_		else if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		else {_			MultiValueMap<String, String> nativeHeaders = new LinkedMultiValueMap<String, String>(headers.size())__			for (String key : headers.keySet()) {_				Object value = headers.get(key)__				nativeHeaders.set(key, (value != null ? value.toString() : null))__			}__			headers = new HashMap<String, Object>(1)__			headers.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, nativeHeaders)__			return headers__		}_	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,this,treats,all,given,headers,as,headers,to,be,sent,out,to,the,external,source,p,if,the,given,headers,already,contain,the,key,link,org,springframework,messaging,support,native,message,header,accessor,then,the,same,header,map,is,returned,i,e,without,any,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,return,null,else,if,headers,contains,key,native,message,header,accessor,return,headers,else,multi,value,map,string,string,native,headers,new,linked,multi,value,map,string,string,headers,size,for,string,key,headers,key,set,object,value,headers,get,key,native,headers,set,key,value,null,value,to,string,null,headers,new,hash,map,string,object,1,headers,put,native,message,header,accessor,native,headers,return,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397429525;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination.__<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes.__<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {__		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}__		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}__		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397523793;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination.__<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes.__<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {__		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}__		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}__		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397762377;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {__		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}__		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}__		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397767187;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1403887432;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1403887432;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1411389021;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1413848647;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1485810955;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (String key : headers.keySet()) {_			Object value = headers.get(key)__			headerAccessor.setNativeHeader(key, (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,string,key,headers,key,set,object,value,headers,get,key,header,accessor,set,native,header,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> @Override 	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1494926542;Creates a new map and puts the given headers under the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS}._effectively treats the input header map as headers to be sent out to the_destination._<p>However if the given headers already contain the key_{@code NATIVE_HEADERS NATIVE_HEADERS} then the same headers instance is_returned without changes._<p>Also if the given headers were prepared and obtained with_{@link SimpMessageHeaderAccessor#getMessageHeaders()} then the same headers_instance is also returned without changes.;@Override_	protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		if (headers == null) {_			SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			return headerAccessor.getMessageHeaders()__		}_		if (headers.containsKey(NativeMessageHeaderAccessor.NATIVE_HEADERS)) {_			return headers__		}_		if (headers instanceof MessageHeaders) {_			SimpMessageHeaderAccessor accessor =_					MessageHeaderAccessor.getAccessor((MessageHeaders) headers, SimpMessageHeaderAccessor.class)__			if (accessor != null) {_				return headers__			}_		}__		SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE)__		initHeaders(headerAccessor)__		for (Map.Entry<String, Object> headerEntry : headers.entrySet()) {_			Object value = headerEntry.getValue()__			headerAccessor.setNativeHeader(headerEntry.getKey(), (value != null ? value.toString() : null))__		}_		return headerAccessor.getMessageHeaders()__	};creates,a,new,map,and,puts,the,given,headers,under,the,key,link,org,springframework,messaging,support,native,message,header,accessor,effectively,treats,the,input,header,map,as,headers,to,be,sent,out,to,the,destination,p,however,if,the,given,headers,already,contain,the,key,code,then,the,same,headers,instance,is,returned,without,changes,p,also,if,the,given,headers,were,prepared,and,obtained,with,link,simp,message,header,accessor,get,message,headers,then,the,same,headers,instance,is,also,returned,without,changes;override,protected,map,string,object,process,headers,to,send,map,string,object,headers,if,headers,null,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,header,accessor,set,leave,mutable,true,return,header,accessor,get,message,headers,if,headers,contains,key,native,message,header,accessor,return,headers,if,headers,instanceof,message,headers,simp,message,header,accessor,accessor,message,header,accessor,get,accessor,message,headers,headers,simp,message,header,accessor,class,if,accessor,null,return,headers,simp,message,header,accessor,header,accessor,simp,message,header,accessor,create,simp,message,type,message,init,headers,header,accessor,for,map,entry,string,object,header,entry,headers,entry,set,object,value,header,entry,get,value,header,accessor,set,native,header,header,entry,get,key,value,null,value,to,string,null,return,header,accessor,get,message,headers
SimpMessagingTemplate -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500448076;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500457438;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1508532146;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1516413763;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpMessagingTemplate -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1522103912;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages created through the {@code SimpMessagingTemplate}._<p>By default, this property is not set.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,created,through,the,code,simp,messaging,template,p,by,default,this,property,is,not,set;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
