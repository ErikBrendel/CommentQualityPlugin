commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The "user" destination from the source message. This may look like  * "/user/queue/position-updates" when subscribing or  * "/user/{username}/queue/position-updates" when sending a message.  * @return the "user" destination, never {@code null}.  */ ;/**  * The "user" destination from the source message. This may look like  * "/user/queue/position-updates" when subscribing or  * "/user/{username}/queue/position-updates" when sending a message.  * @return the "user" destination, never {@code null}.  */ public String getSourceDestination() {     return this.sourceDestination. }
true;public;0;3;/**  * The target destinations that the source destination was translated to,  * one per active user session, e.g. "/queue/position-updates-useri9oqdfzo".  * @return the target destinations, never {@code null} but possibly an empty  * set if there are no active sessions for the user.  */ ;/**  * The target destinations that the source destination was translated to,  * one per active user session, e.g. "/queue/position-updates-useri9oqdfzo".  * @return the target destinations, never {@code null} but possibly an empty  * set if there are no active sessions for the user.  */ public Set<String> getTargetDestinations() {     return this.targetDestinations. }
true;public;0;3;/**  * The user destination in the form expected when a client subscribes, e.g.  * "/user/queue/position-updates".  * @return the subscribe form of the "user" destination, never {@code null}.  */ ;/**  * The user destination in the form expected when a client subscribes, e.g.  * "/user/queue/position-updates".  * @return the subscribe form of the "user" destination, never {@code null}.  */ public String getSubscribeDestination() {     return this.subscribeDestination. }
true;public;0;4;/**  * The user for this user destination.  * @return the user name or {@code null} if we have a session id only such as  * when the user is not authenticated. in such cases it is possible to use  * sessionId in place of a user name thus removing the need for a user-to-session  * lookup via {@link SimpUserRegistry}.  */ ;/**  * The user for this user destination.  * @return the user name or {@code null} if we have a session id only such as  * when the user is not authenticated. in such cases it is possible to use  * sessionId in place of a user name thus removing the need for a user-to-session  * lookup via {@link SimpUserRegistry}.  */ @Nullable public String getUser() {     return this.user. }
false;public;0;5;;@Override public String toString() {     return "UserDestinationResult [source=" + this.sourceDestination + ", target=" + this.targetDestinations + ", subscribeDestination=" + this.subscribeDestination + ", user=" + this.user + "]". }
