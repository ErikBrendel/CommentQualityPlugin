commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return Message.class.isAssignableFrom(parameter.getParameterType()). }
false;public;2;25;;@Override public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception {     Class<?> targetMessageType = parameter.getParameterType().     Class<?> targetPayloadType = getPayloadType(parameter).     if (!targetMessageType.isAssignableFrom(message.getClass())) {         throw new MethodArgumentTypeMismatchException(message, parameter, "Actual message type '" + ClassUtils.getDescriptiveType(message) + "' does not match expected type '" + ClassUtils.getQualifiedName(targetMessageType) + "'").     }     Object payload = message.getPayload().     if (targetPayloadType.isInstance(payload)) {         return message.     }     if (isEmptyPayload(payload)) {         throw new MessageConversionException(message, "Cannot convert from actual payload type '" + ClassUtils.getDescriptiveType(payload) + "' to expected payload type '" + ClassUtils.getQualifiedName(targetPayloadType) + "' when payload is empty").     }     payload = convertPayload(message, parameter, targetPayloadType).     return MessageBuilder.createMessage(payload, message.getHeaders()). }
false;private;1;5;;private Class<?> getPayloadType(MethodParameter parameter) {     Type genericParamType = parameter.getGenericParameterType().     ResolvableType resolvableType = ResolvableType.forType(genericParamType).as(Message.class).     return resolvableType.getGeneric().toClass(). }
true;protected;1;14;/**  * Check if the given {@code payload} is empty.  * @param payload the payload to check (can be {@code null})  */ ;/**  * Check if the given {@code payload} is empty.  * @param payload the payload to check (can be {@code null})  */ protected boolean isEmptyPayload(@Nullable Object payload) {     if (payload == null) {         return true.     } else if (payload instanceof byte[]) {         return ((byte[]) payload).length == 0.     } else if (payload instanceof String) {         return !StringUtils.hasText((String) payload).     } else {         return false.     } }
false;private;3;17;;private Object convertPayload(Message<?> message, MethodParameter parameter, Class<?> targetPayloadType) {     Object result = null.     if (this.converter instanceof SmartMessageConverter) {         SmartMessageConverter smartConverter = (SmartMessageConverter) this.converter.         result = smartConverter.fromMessage(message, targetPayloadType, parameter).     } else if (this.converter != null) {         result = this.converter.fromMessage(message, targetPayloadType).     }     if (result == null) {         throw new MessageConversionException(message, "No converter found from actual payload type '" + ClassUtils.getDescriptiveType(message.getPayload()) + "' to expected payload type '" + ClassUtils.getQualifiedName(targetPayloadType) + "'").     }     return result. }
