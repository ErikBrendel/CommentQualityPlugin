# id;timestamp;commentText;codeText;commentWords;codeWords
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1397429525;Set the message headers to use by providing a {@code MessageHeaderAccessor}.__@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "HeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1404937535;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "HeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1405010287;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1408740948;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1467730834;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1495868221;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1496837955;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1498780456;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor);1530174524;Set the message headers to use by providing a {@code MessageHeaderAccessor}._@param accessor the headers to use;public MessageBuilder<T> setHeaders(MessageHeaderAccessor accessor) {_		Assert.notNull(accessor, "MessageHeaderAccessor must not be null")__		this.headerAccessor = accessor__		return this__	};set,the,message,headers,to,use,by,providing,a,code,message,header,accessor,param,accessor,the,headers,to,use;public,message,builder,t,set,headers,message,header,accessor,accessor,assert,not,null,accessor,message,header,accessor,must,not,be,null,this,header,accessor,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1373651081;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1374083925;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1381152424;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1385507478;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1386297052;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1397429525;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1404937535;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1405010287;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1408740948;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1467730834;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1495868221;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1496837955;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1498780456;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue);1530174524;Set the value for the given header name only if the header name is not already_associated with a value.;public MessageBuilder<T> setHeaderIfAbsent(String headerName, Object headerValue) {_		this.headerAccessor.setHeaderIfAbsent(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,message,builder,t,set,header,if,absent,string,header,name,object,header,value,this,header,accessor,set,header,if,absent,header,name,header,value,return,this
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders);1397429525;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}.__<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied.__@param payload the payload to use, never {@code null}_@param messageHeaders the headers to use, never {@code null}_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "'payload' must not be null")__		Assert.notNull(messageHeaders, "'messageHeaders' must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<T>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,t,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders);1404937535;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use, never {@code null}_@param messageHeaders the headers to use, never {@code null}_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "'payload' must not be null")__		Assert.notNull(messageHeaders, "'messageHeaders' must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<T>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,t,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders);1405010287;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<T>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,t,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders);1408740948;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<T>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,t,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders);1467730834;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,payload,message,headers
MessageBuilder -> private MessageBuilder(T payload, Message<T> originalMessage);1373651081;Private constructor to be invoked from the static factory methods only.;private MessageBuilder(T payload, Message<T> originalMessage) {_		Assert.notNull(payload, "payload must not be null")__		this.payload = payload__		this.originalMessage = originalMessage__		this.headerAccessor = new MessageHeaderAccessor(originalMessage)__	};private,constructor,to,be,invoked,from,the,static,factory,methods,only;private,message,builder,t,payload,message,t,original,message,assert,not,null,payload,payload,must,not,be,null,this,payload,payload,this,original,message,original,message,this,header,accessor,new,message,header,accessor,original,message
MessageBuilder -> private MessageBuilder(T payload, Message<T> originalMessage);1381152424;Private constructor to be invoked from the static factory methods only.;private MessageBuilder(T payload, Message<T> originalMessage) {_		Assert.notNull(payload, "payload must not be null")__		this.payload = payload__		this.originalMessage = originalMessage__		this.headerAccessor = new MessageHeaderAccessor(originalMessage)__	};private,constructor,to,be,invoked,from,the,static,factory,methods,only;private,message,builder,t,payload,message,t,original,message,assert,not,null,payload,payload,must,not,be,null,this,payload,payload,this,original,message,original,message,this,header,accessor,new,message,header,accessor,original,message
MessageBuilder -> private MessageBuilder(T payload, Message<T> originalMessage);1385507478;Private constructor to be invoked from the static factory methods only.;private MessageBuilder(T payload, Message<T> originalMessage) {_		Assert.notNull(payload, "payload must not be null")__		this.payload = payload__		this.originalMessage = originalMessage__		this.headerAccessor = new MessageHeaderAccessor(originalMessage)__	};private,constructor,to,be,invoked,from,the,static,factory,methods,only;private,message,builder,t,payload,message,t,original,message,assert,not,null,payload,payload,must,not,be,null,this,payload,payload,this,original,message,original,message,this,header,accessor,new,message,header,accessor,original,message
MessageBuilder -> private MessageBuilder(T payload, Message<T> originalMessage);1386297052;Private constructor to be invoked from the static factory methods only.;private MessageBuilder(T payload, Message<T> originalMessage) {_		Assert.notNull(payload, "payload must not be null")__		this.payload = payload__		this.originalMessage = originalMessage__		this.headerAccessor = new MessageHeaderAccessor(originalMessage)__	};private,constructor,to,be,invoked,from,the,static,factory,methods,only;private,message,builder,t,payload,message,t,original,message,assert,not,null,payload,payload,must,not,be,null,this,payload,payload,this,original,message,original,message,this,header,accessor,new,message,header,accessor,original,message
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue);1495868221;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,nullable,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue);1496837955;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,nullable,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue);1498780456;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,nullable,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue);1530174524;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, @Nullable Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,nullable,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor);1381152424;Set the message headers._@param headerAccessor the headers for the message;public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor) {_		Assert.notNull(headerAccessor, "headerAccessor is required")__		this.headerAccessor = headerAccessor__		return this__	};set,the,message,headers,param,header,accessor,the,headers,for,the,message;public,message,builder,t,set,headers,message,header,accessor,header,accessor,assert,not,null,header,accessor,header,accessor,is,required,this,header,accessor,header,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor);1385507478;Set the message headers._@param headerAccessor the headers for the message;public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor) {_		Assert.notNull(headerAccessor, "HeaderAccessor must not be null")__		this.headerAccessor = headerAccessor__		return this__	};set,the,message,headers,param,header,accessor,the,headers,for,the,message;public,message,builder,t,set,headers,message,header,accessor,header,accessor,assert,not,null,header,accessor,header,accessor,must,not,be,null,this,header,accessor,header,accessor,return,this
MessageBuilder -> public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor);1386297052;Set the message headers._@param headerAccessor the headers for the message;public MessageBuilder<T> setHeaders(MessageHeaderAccessor headerAccessor) {_		Assert.notNull(headerAccessor, "HeaderAccessor must not be null")__		this.headerAccessor = headerAccessor__		return this__	};set,the,message,headers,param,header,accessor,the,headers,for,the,message;public,message,builder,t,set,headers,message,header,accessor,header,accessor,assert,not,null,header,accessor,header,accessor,must,not,be,null,this,header,accessor,header,accessor,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy);1496837955;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy);1498780456;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1373651081;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1374083925;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1381152424;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1385507478;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1386297052;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1397429525;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1404937535;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1405010287;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1408740948;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1467730834;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy);1495868221;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1373651081;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1374083925;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1381152424;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1385507478;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1386297052;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1397429525;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1404937535;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1405010287;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1408740948;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1467730834;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1495868221;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1496837955;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1498780456;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public MessageBuilder<T> removeHeaders(String... headerPatterns);1530174524;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public MessageBuilder<T> removeHeaders(String... headerPatterns) {_		this.headerAccessor.removeHeaders(headerPatterns)__		return this__	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,message,builder,t,remove,headers,string,header,patterns,this,header,accessor,remove,headers,header,patterns,return,this
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1373651081;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message.__@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		Assert.notNull(message, "message must not be null")__		MessageBuilder<T> builder = new MessageBuilder<T>(message.getPayload(), message)__		return builder__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,assert,not,null,message,message,must,not,be,null,message,builder,t,builder,new,message,builder,t,message,get,payload,message,return,builder
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1374083925;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message.__@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		Assert.notNull(message, "message must not be null")__		MessageBuilder<T> builder = new MessageBuilder<T>(message.getPayload(), message, null)__		return builder__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,assert,not,null,message,message,must,not,be,null,message,builder,t,builder,new,message,builder,t,message,get,payload,message,null,return,builder
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1381152424;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message.__@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		Assert.notNull(message, "message must not be null")__		return new MessageBuilder<T>(message.getPayload(), message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,assert,not,null,message,message,must,not,be,null,return,new,message,builder,t,message,get,payload,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1385507478;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		Assert.notNull(message, "message must not be null")__		return new MessageBuilder<T>(message.getPayload(), message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,assert,not,null,message,message,must,not,be,null,return,new,message,builder,t,message,get,payload,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1386297052;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message.__@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		Assert.notNull(message, "message must not be null")__		return new MessageBuilder<T>(message.getPayload(), message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,assert,not,null,message,message,must,not,be,null,return,new,message,builder,t,message,get,payload,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1397429525;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message.__@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<T>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,t,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1404937535;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<T>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,t,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1405010287;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<T>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,t,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1408740948;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<T>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,t,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1467730834;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1495868221;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1496837955;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1498780456;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,message
MessageBuilder -> public static <T> MessageBuilder<T> fromMessage(Message<T> message);1530174524;Create a builder for a new {@link Message} instance pre-populated with all of the_headers copied from the provided message. The payload of the provided Message will_also be used as the payload for the new message._@param message the Message from which the payload and all headers will be copied;public static <T> MessageBuilder<T> fromMessage(Message<T> message) {_		return new MessageBuilder<>(message)__	};create,a,builder,for,a,new,link,message,instance,pre,populated,with,all,of,the,headers,copied,from,the,provided,message,the,payload,of,the,provided,message,will,also,be,used,as,the,payload,for,the,new,message,param,message,the,message,from,which,the,payload,and,all,headers,will,be,copied;public,static,t,message,builder,t,from,message,message,t,message,return,new,message,builder,message
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1373651081;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1374083925;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1381152424;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1385507478;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1386297052;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1397429525;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1404937535;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1405010287;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1408740948;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1467730834;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1495868221;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1496837955;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1498780456;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> removeHeader(String headerName);1530174524;Remove the value for the given header name.;public MessageBuilder<T> removeHeader(String headerName) {_		this.headerAccessor.removeHeader(headerName)__		return this__	};remove,the,value,for,the,given,header,name;public,message,builder,t,remove,header,string,header,name,this,header,accessor,remove,header,header,name,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1373651081;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1374083925;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1381152424;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1385507478;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1386297052;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1397429525;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1404937535;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1405010287;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1408740948;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> setHeader(String headerName, Object headerValue);1467730834;Set the value for the given header name. If the provided value is {@code null},_the header will be removed.;public MessageBuilder<T> setHeader(String headerName, Object headerValue) {_		this.headerAccessor.setHeader(headerName, headerValue)__		return this__	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,message,builder,t,set,header,string,header,name,object,header,value,this,header,accessor,set,header,header,name,header,value,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1373651081;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1374083925;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1381152424;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1385507478;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1386297052;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1397429525;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1404937535;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1405010287;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1408740948;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1467730834;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy);1495868221;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values. Note that the 'id' and 'timestamp' header values will never be overwritten.;public MessageBuilder<T> copyHeaders(Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeaders(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values,note,that,the,id,and,timestamp,header,values,will,never,be,overwritten;public,message,builder,t,copy,headers,map,string,headers,to,copy,this,header,accessor,copy,headers,headers,to,copy,return,this
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders);1495868221;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,nullable,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders);1496837955;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,nullable,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders);1498780456;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,nullable,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,payload,message,headers
MessageBuilder -> @SuppressWarnings("unchecked") 	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders);1530174524;A shortcut factory method for creating a message with the given payload_and {@code MessageHeaders}._<p><strong>Note:</strong> the given {@code MessageHeaders} instance is used_directly in the new message, i.e. it is not copied._@param payload the payload to use (never {@code null})_@param messageHeaders the headers to use (never {@code null})_@return the created message_@since 4.1;@SuppressWarnings("unchecked")_	public static <T> Message<T> createMessage(@Nullable T payload, MessageHeaders messageHeaders) {_		Assert.notNull(payload, "Payload must not be null")__		Assert.notNull(messageHeaders, "MessageHeaders must not be null")__		if (payload instanceof Throwable) {_			return (Message<T>) new ErrorMessage((Throwable) payload, messageHeaders)__		}_		else {_			return new GenericMessage<>(payload, messageHeaders)__		}_	};a,shortcut,factory,method,for,creating,a,message,with,the,given,payload,and,code,message,headers,p,strong,note,strong,the,given,code,message,headers,instance,is,used,directly,in,the,new,message,i,e,it,is,not,copied,param,payload,the,payload,to,use,never,code,null,param,message,headers,the,headers,to,use,never,code,null,return,the,created,message,since,4,1;suppress,warnings,unchecked,public,static,t,message,t,create,message,nullable,t,payload,message,headers,message,headers,assert,not,null,payload,payload,must,not,be,null,assert,not,null,message,headers,message,headers,must,not,be,null,if,payload,instanceof,throwable,return,message,t,new,error,message,throwable,payload,message,headers,else,return,new,generic,message,payload,message,headers
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1373651081;Create a builder for a new {@link Message} instance with the provided payload.__@param payload the payload for the new message;public static <T> MessageBuilder<T> withPayload(T payload) {_		MessageBuilder<T> builder = new MessageBuilder<T>(payload, null)__		return builder__	};create,a,builder,for,a,new,link,message,instance,with,the,provided,payload,param,payload,the,payload,for,the,new,message;public,static,t,message,builder,t,with,payload,t,payload,message,builder,t,builder,new,message,builder,t,payload,null,return,builder
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1374083925;Create a builder for a new {@link Message} instance with the provided payload.__@param payload the payload for the new message;public static <T> MessageBuilder<T> withPayload(T payload) {_		MessageBuilder<T> builder = new MessageBuilder<T>(payload, null, null)__		return builder__	};create,a,builder,for,a,new,link,message,instance,with,the,provided,payload,param,payload,the,payload,for,the,new,message;public,static,t,message,builder,t,with,payload,t,payload,message,builder,t,builder,new,message,builder,t,payload,null,null,return,builder
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1381152424;Create a builder for a new {@link Message} instance with the provided payload.__@param payload the payload for the new message;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, null)__	};create,a,builder,for,a,new,link,message,instance,with,the,provided,payload,param,payload,the,payload,for,the,new,message;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,null
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1385507478;Create a builder for a new {@link Message} instance with the provided payload._@param payload the payload for the new message;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, null)__	};create,a,builder,for,a,new,link,message,instance,with,the,provided,payload,param,payload,the,payload,for,the,new,message;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,null
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1386297052;Create a builder for a new {@link Message} instance with the provided payload._@param payload the payload for the new message;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, null)__	};create,a,builder,for,a,new,link,message,instance,with,the,provided,payload,param,payload,the,payload,for,the,new,message;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,null
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1397429525;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1404937535;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1405010287;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1408740948;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<T>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,t,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1467730834;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1495868221;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1496837955;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1498780456;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,payload,new,message,header,accessor
MessageBuilder -> public static <T> MessageBuilder<T> withPayload(T payload);1530174524;Create a new builder for a message with the given payload._@param payload the payload;public static <T> MessageBuilder<T> withPayload(T payload) {_		return new MessageBuilder<>(payload, new MessageHeaderAccessor())__	};create,a,new,builder,for,a,message,with,the,given,payload,param,payload,the,payload;public,static,t,message,builder,t,with,payload,t,payload,return,new,message,builder,payload,new,message,header,accessor
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1496837955;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1498780456;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
MessageBuilder -> public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public MessageBuilder<T> copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		this.headerAccessor.copyHeadersIfAbsent(headersToCopy)__		return this__	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,message,builder,t,copy,headers,if,absent,nullable,map,string,headers,to,copy,this,header,accessor,copy,headers,if,absent,headers,to,copy,return,this
