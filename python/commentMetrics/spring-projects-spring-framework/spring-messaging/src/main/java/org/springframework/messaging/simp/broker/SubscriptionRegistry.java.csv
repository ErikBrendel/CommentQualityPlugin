commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Register a subscription represented by the given message.  * @param subscribeMessage the subscription request  */ ;/**  * Register a subscription represented by the given message.  * @param subscribeMessage the subscription request  */ void registerSubscription(Message<?> subscribeMessage).
true;;1;1;/**  * Unregister a subscription.  * @param unsubscribeMessage the request to unsubscribe  */ ;/**  * Unregister a subscription.  * @param unsubscribeMessage the request to unsubscribe  */ void unregisterSubscription(Message<?> unsubscribeMessage).
true;;1;1;/**  * Remove all subscriptions associated with the given sessionId.  */ ;/**  * Remove all subscriptions associated with the given sessionId.  */ void unregisterAllSubscriptions(String sessionId).
true;;1;1;/**  * Find all subscriptions that should receive the given message.  * The map returned is safe to iterate and will never be modified.  * @param message the message  * @return a {@code MultiValueMap} with sessionId-subscriptionId pairs  * (possibly empty)  */ ;/**  * Find all subscriptions that should receive the given message.  * The map returned is safe to iterate and will never be modified.  * @param message the message  * @return a {@code MultiValueMap} with sessionId-subscriptionId pairs  * (possibly empty)  */ MultiValueMap<String, String> findSubscriptions(Message<?> message).
