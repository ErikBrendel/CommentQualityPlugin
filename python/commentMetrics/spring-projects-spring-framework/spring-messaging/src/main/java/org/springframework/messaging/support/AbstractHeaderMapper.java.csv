commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify a prefix to be appended to the message header name for any  * user-defined property that is being mapped into the MessageHeaders.  * The default is an empty String (no prefix).  */ ;/**  * Specify a prefix to be appended to the message header name for any  * user-defined property that is being mapped into the MessageHeaders.  * The default is an empty String (no prefix).  */ public void setInboundPrefix(@Nullable String inboundPrefix) {     this.inboundPrefix = (inboundPrefix != null ? inboundPrefix : ""). }
true;public;1;3;/**  * Specify a prefix to be appended to the protocol property name for any  * user-defined message header that is being mapped into the protocol-specific  * Message. The default is an empty String (no prefix).  */ ;/**  * Specify a prefix to be appended to the protocol property name for any  * user-defined message header that is being mapped into the protocol-specific  * Message. The default is an empty String (no prefix).  */ public void setOutboundPrefix(@Nullable String outboundPrefix) {     this.outboundPrefix = (outboundPrefix != null ? outboundPrefix : ""). }
true;protected;1;7;/**  * Generate the name to use to set the header defined by the specified  * {@code headerName} to the protocol specific message.  * @see #setOutboundPrefix  */ ;/**  * Generate the name to use to set the header defined by the specified  * {@code headerName} to the protocol specific message.  * @see #setOutboundPrefix  */ protected String fromHeaderName(String headerName) {     String propertyName = headerName.     if (StringUtils.hasText(this.outboundPrefix) && !propertyName.startsWith(this.outboundPrefix)) {         propertyName = this.outboundPrefix + headerName.     }     return propertyName. }
true;protected;1;7;/**  * Generate the name to use to set the header defined by the specified  * {@code propertyName} to the {@link MessageHeaders} instance.  * @see #setInboundPrefix(String)  */ ;/**  * Generate the name to use to set the header defined by the specified  * {@code propertyName} to the {@link MessageHeaders} instance.  * @see #setInboundPrefix(String)  */ protected String toHeaderName(String propertyName) {     String headerName = propertyName.     if (StringUtils.hasText(this.inboundPrefix) && !headerName.startsWith(this.inboundPrefix)) {         headerName = this.inboundPrefix + propertyName.     }     return headerName. }
true;protected;3;17;/**  * Return the header value, or {@code null} if it does not exist  * or does not match the requested {@code type}.  */ ;/**  * Return the header value, or {@code null} if it does not exist  * or does not match the requested {@code type}.  */ @Nullable protected <V> V getHeaderIfAvailable(Map<String, Object> headers, String name, Class<V> type) {     Object value = headers.get(name).     if (value == null) {         return null.     }     if (!type.isAssignableFrom(value.getClass())) {         if (logger.isDebugEnabled()) {             logger.debug("Skipping header '" + name + "': expected type [" + type + "], but got [" + value.getClass() + "]").         }         return null.     } else {         return type.cast(value).     } }
