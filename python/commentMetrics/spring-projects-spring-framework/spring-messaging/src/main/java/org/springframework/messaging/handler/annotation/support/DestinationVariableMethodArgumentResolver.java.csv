commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return parameter.hasParameterAnnotation(DestinationVariable.class). }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     DestinationVariable annotation = parameter.getParameterAnnotation(DestinationVariable.class).     Assert.state(annotation != null, "No DestinationVariable annotation").     return new DestinationVariableNamedValueInfo(annotation). }
false;protected;3;10;;@Override @Nullable protected Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name) throws Exception {     @SuppressWarnings("unchecked")     Map<String, String> vars = (Map<String, String>) message.getHeaders().get(DESTINATION_TEMPLATE_VARIABLES_HEADER).     return (vars != null ? vars.get(name) : null). }
false;protected;3;5;;@Override protected void handleMissingValue(String name, MethodParameter parameter, Message<?> message) {     throw new MessageHandlingException(message, "Missing path template variable '" + name + "' for method parameter type [" + parameter.getParameterType() + "]"). }
