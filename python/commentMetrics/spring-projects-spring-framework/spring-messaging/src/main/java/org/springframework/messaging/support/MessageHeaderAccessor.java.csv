# id;timestamp;commentText;codeText;commentWords;codeWords
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1495868221;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1496259743;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1397429525;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1397497975;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1397523793;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1403856366;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1404880799;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1404945414;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type.__<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1405010287;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1408740948;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1408748821;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1373651081;A constructor for accessing and modifying existing message headers.;public MessageHeaderAccessor(Message<?> message) {_		this.originalHeaders = (message != null) ? message.getHeaders() : null__	};a,constructor,for,accessing,and,modifying,existing,message,headers;public,message,header,accessor,message,message,this,original,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1373756732;A constructor for accessing and modifying existing message headers.;public MessageHeaderAccessor(Message<?> message) {_		this.originalHeaders = (message != null) ? message.getHeaders() : null__	};a,constructor,for,accessing,and,modifying,existing,message,headers;public,message,header,accessor,message,message,this,original,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1381440318;A constructor for accessing and modifying existing message headers.;public MessageHeaderAccessor(Message<?> message) {_		this.originalHeaders = (message != null) ? message.getHeaders() : null__	};a,constructor,for,accessing,and,modifying,existing,message,headers;public,message,header,accessor,message,message,this,original,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1382110439;A constructor for accessing and modifying existing message headers.;public MessageHeaderAccessor(Message<?> message) {_		this.originalHeaders = (message != null) ? message.getHeaders() : null__	};a,constructor,for,accessing,and,modifying,existing,message,headers;public,message,header,accessor,message,message,this,original,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1397429525;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__			MessageHeaderAccessor accessor = getAccessor(message, MessageHeaderAccessor.class)__			if (accessor != null) {_				this.idGenerator = accessor.idGenerator__				this.enableTimestamp = accessor.enableTimestamp__			}_		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,message,header,accessor,accessor,get,accessor,message,message,header,accessor,class,if,accessor,null,this,id,generator,accessor,id,generator,this,enable,timestamp,accessor,enable,timestamp,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1397497975;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1397523793;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1403856366;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1404880799;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1404945414;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1405010287;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1408740948;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1408748821;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1411389021;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1413848647;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1416910930;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1424294907;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1448383032;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1460644739;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1467730834;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1468534546;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1468951740;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1468964586;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1476285064;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1482446059;A constructor accepting the headers of an existing message to copy.;public MessageHeaderAccessor(Message<?> message) {_		if (message != null) {_			this.headers = new MutableMessageHeaders(message.getHeaders())__		}_		else {_			this.headers = new MutableMessageHeaders()__		}_	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy;public,message,header,accessor,message,message,if,message,null,this,headers,new,mutable,message,headers,message,get,headers,else,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor(Message<?> message);1487361557;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1404880799;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1404945414;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1405010287;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1408740948;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1408748821;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1411389021;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1413848647;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1416910930;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1424294907;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1448383032;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1460644739;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1467730834;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1468534546;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1468951740;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1468964586;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1476285064;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1482446059;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1487361557;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1495868221;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1496259743;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1496837955;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1497362807;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1498780456;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1509997270;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1530174524;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1530174524;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public String getShortLogMessage(Object payload);1550237113;Return a concise message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getShortLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getShortPayloadLogMessage(payload)__	};return,a,concise,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,short,log,message,object,payload,return,headers,this,headers,to,string,get,short,payload,log,message,payload
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1411389021;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1413848647;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1416910930;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1424294907;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1448383032;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1460644739;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1467730834;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1468534546;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1468951740;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1468964586;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(to be followed up with an assertion) or will created if not provided._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,to,be,followed,up,with,an,assertion,or,will,created,if,not,provided,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1476285064;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1482446059;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType);1487361557;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;public,static,t,extends,message,header,accessor,t,get,accessor,message,message,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1496837955;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1497362807;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1498780456;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1509997270;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1530174524;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1530174524;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, @Nullable Class<T> requiredType);1550237113;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@param messageHeaders the message headers to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, @Nullable Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType == null || requiredType.isInstance(headerAccessor))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,param,message,headers,the,message,headers,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,nullable,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,null,required,type,is,instance,header,accessor,return,t,header,accessor,return,null
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1397429525;A private mechanism to enable having a timestamp added to every message.__<p>By default this property is set to false.__@see org.springframework.messaging.support.MessageHeaderAccessorFactorySupport;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,private,mechanism,to,enable,having,a,timestamp,added,to,every,message,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,message,header,accessor,factory,support;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1397497975;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header.__<p>By default this property is set to false.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1397523793;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header.__<p>By default this property is set to false.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1403856366;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header.__<p>By default this property is set to false.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1404880799;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header.__<p>By default this property is set to false.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1404945414;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header.__<p>By default this property is set to false.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1405010287;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default this property is set to false._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1408740948;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1408748821;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1411389021;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1413848647;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1416910930;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1424294907;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1448383032;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1460644739;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1467730834;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1468534546;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1468951740;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1468964586;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1476285064;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1482446059;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1487361557;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1495868221;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1496259743;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1496837955;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1497362807;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1498780456;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1509997270;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1530174524;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1530174524;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> void setEnableTimestamp(boolean enableTimestamp);1550237113;A package private mechanism to enables the automatic addition of the_{@link org.springframework.messaging.MessageHeaders#TIMESTAMP} header._<p>By default, this property is set to {@code false}._@see IdTimestampMessageHeaderInitializer;void setEnableTimestamp(boolean enableTimestamp) {_		this.enableTimestamp = enableTimestamp__	};a,package,private,mechanism,to,enables,the,automatic,addition,of,the,link,org,springframework,messaging,message,headers,timestamp,header,p,by,default,this,property,is,set,to,code,false,see,id,timestamp,message,header,initializer;void,set,enable,timestamp,boolean,enable,timestamp,this,enable,timestamp,enable,timestamp
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1408740948;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1408748821;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1411389021;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1413848647;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1416910930;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1424294907;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1448383032;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1460644739;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1467730834;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1468534546;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1468951740;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1468964586;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1476285064;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1482446059;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1487361557;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1495868221;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1496259743;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1496837955;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1497362807;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1498780456;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1509997270;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1530174524;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1530174524;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public MessageHeaders toMessageHeaders();1550237113;Return a copy of the underlying header values as a {@link MessageHeaders} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values._@since 4.1;public MessageHeaders toMessageHeaders() {_		return new MessageHeaders(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,link,message,headers,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values,since,4,1;public,message,headers,to,message,headers,return,new,message,headers,this,headers
MessageHeaderAccessor -> public boolean isMutable();1397429525;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1397497975;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1397523793;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1403856366;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1404880799;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1404945414;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1405010287;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1408740948;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1408748821;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1411389021;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1413848647;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1416910930;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1424294907;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1448383032;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1460644739;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1467730834;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1468534546;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1468951740;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1468964586;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1476285064;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1482446059;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1487361557;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1495868221;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1496259743;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1496837955;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1497362807;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1498780456;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1509997270;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1530174524;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1530174524;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> public boolean isMutable();1550237113;Whether the underlying headers can still be modified._@since 4.1;public boolean isMutable() {_		return this.headers.isMutable()__	};whether,the,underlying,headers,can,still,be,modified,since,4,1;public,boolean,is,mutable,return,this,headers,is,mutable
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1496837955;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1497362807;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1498780456;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1509997270;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1530174524;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1530174524;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> @Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType);1550237113;Return the original {@code MessageHeaderAccessor} used to create the headers_of the given {@code Message}, or {@code null} if that's not available or if_its type does not match the required type._<p>This is for cases where the existence of an accessor is strongly expected_(followed up with an assertion) or where an accessor will be created otherwise._@param message the message to get an accessor for_@param requiredType the required accessor type (or {@code null} for any)_@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(Message<?> message, @Nullable Class<T> requiredType) {_		return getAccessor(message.getHeaders(), requiredType)__	};return,the,original,code,message,header,accessor,used,to,create,the,headers,of,the,given,code,message,or,code,null,if,that,s,not,available,or,if,its,type,does,not,match,the,required,type,p,this,is,for,cases,where,the,existence,of,an,accessor,is,strongly,expected,followed,up,with,an,assertion,or,where,an,accessor,will,be,created,otherwise,param,message,the,message,to,get,an,accessor,for,param,required,type,the,required,accessor,type,or,code,null,for,any,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,message,nullable,class,t,required,type,return,get,accessor,message,get,headers,required,type
MessageHeaderAccessor -> public MessageHeaderAccessor();1373651081;A constructor for creating new message headers.;public MessageHeaderAccessor() {_		this.originalHeaders = null__	};a,constructor,for,creating,new,message,headers;public,message,header,accessor,this,original,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1373756732;A constructor for creating new message headers.;public MessageHeaderAccessor() {_		this.originalHeaders = null__	};a,constructor,for,creating,new,message,headers;public,message,header,accessor,this,original,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1381440318;A constructor for creating new message headers.;public MessageHeaderAccessor() {_		this.originalHeaders = null__	};a,constructor,for,creating,new,message,headers;public,message,header,accessor,this,original,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1382110439;A constructor for creating new message headers.;public MessageHeaderAccessor() {_		this.originalHeaders = null__	};a,constructor,for,creating,new,message,headers;public,message,header,accessor,this,original,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1397429525;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1397497975;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1397523793;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1403856366;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1404880799;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1404945414;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1405010287;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1408740948;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1408748821;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1411389021;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1413848647;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1416910930;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1424294907;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1448383032;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1460644739;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1467730834;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1468534546;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1468951740;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1468964586;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1476285064;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1482446059;A constructor to create new headers.;public MessageHeaderAccessor() {_		this.headers = new MutableMessageHeaders()__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,headers,new,mutable,message,headers
MessageHeaderAccessor -> public MessageHeaderAccessor();1487361557;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1495868221;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1496259743;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1496837955;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1497362807;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1498780456;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1509997270;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1530174524;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1530174524;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public MessageHeaderAccessor();1550237113;A constructor to create new headers.;public MessageHeaderAccessor() {_		this(null)__	};a,constructor,to,create,new,headers;public,message,header,accessor,this,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1373651081;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1373756732;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1381440318;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1382110439;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1397429525;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1397497975;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1397523793;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1403856366;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1404880799;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1404945414;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1405010287;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1408740948;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1408748821;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1411389021;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1413848647;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1416910930;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1424294907;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1448383032;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1460644739;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1467730834;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1468534546;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1468951740;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1468964586;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1476285064;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1482446059;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1487361557;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1495868221;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1496259743;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1496837955;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1497362807;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1498780456;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1509997270;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1530174524;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1530174524;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void removeHeader(String headerName);1550237113;Remove the value for the given header name.;public void removeHeader(String headerName) {_		if (StringUtils.hasLength(headerName) && !isReadOnly(headerName)) {_			setHeader(headerName, null)__		}_	};remove,the,value,for,the,given,header,name;public,void,remove,header,string,header,name,if,string,utils,has,length,header,name,is,read,only,header,name,set,header,header,name,null
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1373651081;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!this.isReadOnly(key)) {_				setHeaderIfAbsent(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1373756732;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!this.isReadOnly(key)) {_				setHeaderIfAbsent(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1381440318;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!this.isReadOnly(key)) {_				setHeaderIfAbsent(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1382110439;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1397429525;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1397497975;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1397523793;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1403856366;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1404880799;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1404945414;Copy the name-value pairs from the provided Map. This operation will <em>not</em>_overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1405010287;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!this.isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,this,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1408740948;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1408748821;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1411389021;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1413848647;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,if,absent,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1416910930;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1424294907;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1448383032;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1460644739;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1467730834;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1468534546;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1468951740;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1468964586;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1476285064;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1482446059;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1487361557;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1495868221;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(Map<String, ?> headersToCopy);1496259743;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1495868221;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	@Nullable 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1496259743;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	@Nullable_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,nullable,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1495868221;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1496259743;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1496837955;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1497362807;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1498780456;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1509997270;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1530174524;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1530174524;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public MessageHeaderAccessor(@Nullable Message<?> message);1550237113;A constructor accepting the headers of an existing message to copy._@param message a message to copy the headers from, or {@code null} if none;public MessageHeaderAccessor(@Nullable Message<?> message) {_		this.headers = new MutableMessageHeaders(message != null ? message.getHeaders() : null)__	};a,constructor,accepting,the,headers,of,an,existing,message,to,copy,param,message,a,message,to,copy,the,headers,from,or,code,null,if,none;public,message,header,accessor,nullable,message,message,this,headers,new,mutable,message,headers,message,null,message,get,headers,null
MessageHeaderAccessor -> public boolean isModified();1408740948;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1408748821;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1411389021;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1413848647;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1416910930;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1424294907;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1448383032;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1460644739;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1467730834;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1468534546;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1468951740;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1468964586;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1476285064;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1482446059;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1487361557;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1495868221;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1496259743;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1496837955;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1497362807;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1498780456;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1509997270;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1530174524;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1530174524;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public boolean isModified();1550237113;Check whether the underlying message headers have been marked as modified._@return {@code true} if the flag has been set, {@code false} otherwise;public boolean isModified() {_		return this.modified__	};check,whether,the,underlying,message,headers,have,been,marked,as,modified,return,code,true,if,the,flag,has,been,set,code,false,otherwise;public,boolean,is,modified,return,this,modified
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1373651081;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1373756732;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1381440318;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1382110439;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1397429525;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1397497975;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1397523793;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1403856366;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1404880799;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1404945414;Set the value for the given header name only if the header name is not already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1405010287;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1408740948;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1408748821;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1411389021;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1413848647;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1416910930;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1424294907;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1448383032;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1460644739;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1467730834;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1468534546;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1468951740;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1468964586;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1476285064;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1482446059;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1487361557;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1495868221;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1496259743;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1496837955;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1497362807;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1498780456;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1509997270;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1530174524;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1530174524;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public void setHeaderIfAbsent(String name, Object value);1550237113;Set the value for the given header name only if the header name is not_already associated with a value.;public void setHeaderIfAbsent(String name, Object value) {_		if (getHeader(name) == null) {_			setHeader(name, value)__		}_	};set,the,value,for,the,given,header,name,only,if,the,header,name,is,not,already,associated,with,a,value;public,void,set,header,if,absent,string,name,object,value,if,get,header,name,null,set,header,name,value
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1404880799;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1404945414;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1405010287;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1408740948;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1408748821;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1411389021;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1413848647;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1416910930;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1424294907;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1448383032;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1460644739;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1467730834;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1468534546;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1468951740;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1468964586;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1476285064;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1482446059;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1487361557;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(Object payload);1495868221;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1373651081;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.originalHeaders))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,headers,to,remove,add,all,get,matching,header,names,pattern,this,original,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1373756732;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.originalHeaders))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,headers,to,remove,add,all,get,matching,header,names,pattern,this,original,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1381440318;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.originalHeaders))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,headers,to,remove,add,all,get,matching,header,names,pattern,this,original,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1382110439;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.originalHeaders))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,headers,to,remove,add,all,get,matching,header,names,pattern,this,original,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1397429525;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1397497975;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1397523793;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1403856366;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1404880799;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1404945414;Removes all headers provided via array of 'headerPatterns'. As the name suggests_the array may contain simple matching patterns for header names. Supported pattern_styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,as,the,name,suggests,the,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1405010287;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1408740948;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1408748821;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1411389021;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1413848647;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1416910930;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1424294907;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1448383032;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1460644739;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<String>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,string,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1467730834;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1468534546;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1468951740;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1468964586;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1476285064;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1482446059;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1487361557;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1495868221;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1496259743;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1496837955;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1497362807;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1498780456;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1509997270;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1530174524;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1530174524;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public void removeHeaders(String... headerPatterns);1550237113;Removes all headers provided via array of 'headerPatterns'._<p>As the name suggests, array may contain simple matching patterns for header_names. Supported pattern styles are: "xxx*", "*xxx", "*xxx*" and "xxx*yyy".;public void removeHeaders(String... headerPatterns) {_		List<String> headersToRemove = new ArrayList<>()__		for (String pattern : headerPatterns) {_			if (StringUtils.hasLength(pattern)){_				if (pattern.contains("*")){_					headersToRemove.addAll(getMatchingHeaderNames(pattern, this.headers))__				}_				else {_					headersToRemove.add(pattern)__				}_			}_		}_		for (String headerToRemove : headersToRemove) {_			removeHeader(headerToRemove)__		}_	};removes,all,headers,provided,via,array,of,header,patterns,p,as,the,name,suggests,array,may,contain,simple,matching,patterns,for,header,names,supported,pattern,styles,are,xxx,xxx,xxx,and,xxx,yyy;public,void,remove,headers,string,header,patterns,list,string,headers,to,remove,new,array,list,for,string,pattern,header,patterns,if,string,utils,has,length,pattern,if,pattern,contains,headers,to,remove,add,all,get,matching,header,names,pattern,this,headers,else,headers,to,remove,add,pattern,for,string,header,to,remove,headers,to,remove,remove,header,header,to,remove
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1397429525;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1397497975;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1397523793;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1403856366;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1404880799;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1404945414;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance.__<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing.__@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1405010287;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1408740948;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1408748821;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1411389021;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1413848647;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1416910930;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1424294907;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type, never {@code null}._@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1448383032;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1460644739;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1467730834;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1468534546;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1468951740;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1468964586;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1476285064;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1482446059;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getMessageHeaderAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,message,header,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1487361557;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1495868221;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1496259743;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			if (accessor != null) {_				return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__			}_		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,if,accessor,null,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1496837955;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1497362807;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1498780456;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1509997270;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1530174524;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1530174524;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public static MessageHeaderAccessor getMutableAccessor(Message<?> message);1550237113;Return a mutable {@code MessageHeaderAccessor} for the given message attempting_to match the type of accessor used to create the message headers, or otherwise_wrapping the message with a {@code MessageHeaderAccessor} instance._<p>This is for cases where a header needs to be updated in generic code_while preserving the accessor type for downstream processing._@return an accessor of the required type (never {@code null})_@since 4.1;public static MessageHeaderAccessor getMutableAccessor(Message<?> message) {_		if (message.getHeaders() instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) message.getHeaders()__			MessageHeaderAccessor accessor = mutableHeaders.getAccessor()__			return (accessor.isMutable() ? accessor : accessor.createAccessor(message))__		}_		return new MessageHeaderAccessor(message)__	};return,a,mutable,code,message,header,accessor,for,the,given,message,attempting,to,match,the,type,of,accessor,used,to,create,the,message,headers,or,otherwise,wrapping,the,message,with,a,code,message,header,accessor,instance,p,this,is,for,cases,where,a,header,needs,to,be,updated,in,generic,code,while,preserving,the,accessor,type,for,downstream,processing,return,an,accessor,of,the,required,type,never,code,null,since,4,1;public,static,message,header,accessor,get,mutable,accessor,message,message,if,message,get,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,get,headers,message,header,accessor,accessor,mutable,headers,get,accessor,return,accessor,is,mutable,accessor,accessor,create,accessor,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1495868221;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1496259743;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1496837955;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1497362807;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1498780456;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1509997270;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1530174524;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1530174524;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @Nullable 	public Object getHeader(String headerName);1550237113;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;@Nullable_	public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;nullable,public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1397429525;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1397497975;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1397523793;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1403856366;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1404880799;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1404945414;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}.__<p>This is for cases when a full message may not have been created yet.__@return an accessor instance of the specified type or {@code null}._@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1405010287;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1408740948;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1408748821;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1411389021;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1413848647;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1416910930;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType);1424294907;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified typem or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(MessageHeaders messageHeaders, Class<T> requiredType) {_		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,typem,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> public Object getHeader(String headerName);1408740948;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1408748821;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1411389021;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1413848647;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1416910930;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1424294907;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1448383032;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1460644739;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1467730834;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1468534546;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1468951740;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1468964586;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1476285064;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1482446059;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> public Object getHeader(String headerName);1487361557;Retrieve the value for the header with the given name._@param headerName the name of the header_@return the associated value, or {@code null} if none found;public Object getHeader(String headerName) {_		return this.headers.get(headerName)__	};retrieve,the,value,for,the,header,with,the,given,name,param,header,name,the,name,of,the,header,return,the,associated,value,or,code,null,if,none,found;public,object,get,header,string,header,name,return,this,headers,get,header,name
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1448383032;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1460644739;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1467730834;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1468534546;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1468951740;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1468964586;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1476285064;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1482446059;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getMessageHeaderAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,message,header,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> @SuppressWarnings("unchecked") 	public static <T extends MessageHeaderAccessor> T getAccessor( 			MessageHeaders messageHeaders, Class<T> requiredType);1487361557;A variation of {@link #getAccessor(org.springframework.messaging.Message, Class)}_with a {@code MessageHeaders} instance instead of a {@code Message}._<p>This is for cases when a full message may not have been created yet._@return an accessor instance of the specified type, or {@code null} if none_@since 4.1;@SuppressWarnings("unchecked")_	public static <T extends MessageHeaderAccessor> T getAccessor(_			MessageHeaders messageHeaders, Class<T> requiredType) {__		if (messageHeaders instanceof MutableMessageHeaders) {_			MutableMessageHeaders mutableHeaders = (MutableMessageHeaders) messageHeaders__			MessageHeaderAccessor headerAccessor = mutableHeaders.getAccessor()__			if (requiredType.isAssignableFrom(headerAccessor.getClass()))  {_				return (T) headerAccessor__			}_		}_		return null__	};a,variation,of,link,get,accessor,org,springframework,messaging,message,class,with,a,code,message,headers,instance,instead,of,a,code,message,p,this,is,for,cases,when,a,full,message,may,not,have,been,created,yet,return,an,accessor,instance,of,the,specified,type,or,code,null,if,none,since,4,1;suppress,warnings,unchecked,public,static,t,extends,message,header,accessor,t,get,accessor,message,headers,message,headers,class,t,required,type,if,message,headers,instanceof,mutable,message,headers,mutable,message,headers,mutable,headers,mutable,message,headers,message,headers,message,header,accessor,header,accessor,mutable,headers,get,accessor,if,required,type,is,assignable,from,header,accessor,get,class,return,t,header,accessor,return,null
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1397429525;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1397497975;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1397523793;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1403856366;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1404880799;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1404945414;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable.__<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link org.springframework.messaging.support.MessageHeaderAccessor#getAccessor(org.springframework.messaging.Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}__<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread.__<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,org,springframework,messaging,support,message,header,accessor,get,accessor,org,springframework,messaging,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1405010287;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1408740948;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1408748821;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1411389021;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1413848647;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1416910930;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1424294907;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1448383032;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1460644739;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1467730834;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1468534546;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1468951740;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1468964586;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1476285064;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1482446059;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1487361557;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1495868221;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1496259743;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1496837955;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1497362807;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1498780456;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1509997270;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1530174524;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1530174524;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setLeaveMutable(boolean leaveMutable);1550237113;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers and the returned {@code MessageHeaders} is immutable._<p>However when this is set to {@code true}, the returned (underlying)_{@code MessageHeaders} instance remains mutable. To make further modifications_continue to use the same accessor instance or re-obtain it via:<br>_{@link MessageHeaderAccessor#getAccessor(Message, Class)_MessageHeaderAccessor.getAccessor(Message, Class)}_<p>When modifications are complete use {@link #setImmutable()} to prevent_further changes. The intended use case for this mechanism is initialization_of a Message within a single thread._<p>By default this is set to {@code false}._@since 4.1;public void setLeaveMutable(boolean leaveMutable) {_		Assert.state(this.headers.isMutable(), "Already immutable")__		this.leaveMutable = leaveMutable__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,and,the,returned,code,message,headers,is,immutable,p,however,when,this,is,set,to,code,true,the,returned,underlying,code,message,headers,instance,remains,mutable,to,make,further,modifications,continue,to,use,the,same,accessor,instance,or,re,obtain,it,via,br,link,message,header,accessor,get,accessor,message,class,message,header,accessor,get,accessor,message,class,p,when,modifications,are,complete,use,link,set,immutable,to,prevent,further,changes,the,intended,use,case,for,this,mechanism,is,initialization,of,a,message,within,a,single,thread,p,by,default,this,is,set,to,code,false,since,4,1;public,void,set,leave,mutable,boolean,leave,mutable,assert,state,this,headers,is,mutable,already,immutable,this,leave,mutable,leave,mutable
MessageHeaderAccessor -> public void setImmutable();1397429525;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1397497975;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1397523793;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1403856366;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1404880799;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1404945414;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1405010287;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1408740948;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1408748821;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1411389021;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1413848647;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1416910930;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1424294907;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1448383032;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1460644739;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1467730834;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1468534546;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1468951740;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1468964586;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1476285064;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1482446059;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setIdAndTimestamp()__		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,id,and,timestamp,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1487361557;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1495868221;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1496259743;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1496837955;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1497362807;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1498780456;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1509997270;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1530174524;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1530174524;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setImmutable();1550237113;By default when {@link #getMessageHeaders()} is called, {@code "this"}_{@code MessageHeaderAccessor} instance can no longer be used to modify the_underlying message headers. However if {@link #setLeaveMutable(boolean)}_is used, this method is necessary to indicate explicitly when the_{@code MessageHeaders} instance should no longer be modified._@since 4.1;public void setImmutable() {_		this.headers.setImmutable()__	};by,default,when,link,get,message,headers,is,called,code,this,code,message,header,accessor,instance,can,no,longer,be,used,to,modify,the,underlying,message,headers,however,if,link,set,leave,mutable,boolean,is,used,this,method,is,necessary,to,indicate,explicitly,when,the,code,message,headers,instance,should,no,longer,be,modified,since,4,1;public,void,set,immutable,this,headers,set,immutable
MessageHeaderAccessor -> public void setHeader(String name, Object value);1373651081;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.headers.put(name, value)__		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,headers,put,name,value
MessageHeaderAccessor -> public void setHeader(String name, Object value);1373756732;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.headers.put(name, value)__		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,headers,put,name,value
MessageHeaderAccessor -> public void setHeader(String name, Object value);1381440318;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.headers.put(name, value)__		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,headers,put,name,value
MessageHeaderAccessor -> public void setHeader(String name, Object value);1382110439;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.headers.put(name, value)__		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,headers,put,name,value
MessageHeaderAccessor -> public void setHeader(String name, Object value);1397429525;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1397497975;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1397523793;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1403856366;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1404880799;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1404945414;Set the value for the given header name. If the provided value is {@code null} the_header will be removed.;public void setHeader(String name, Object value) {_		Assert.isTrue(!isReadOnly(name), "The '" + name + "' header is read-only.")__		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,assert,is,true,is,read,only,name,the,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1405010287;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1408740948;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1408748821;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1411389021;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1413848647;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1416910930;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1424294907;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1448383032;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1460644739;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1467730834;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_			this.modified = true__			if (value != null) {_				this.headers.getRawHeaders().put(name, value)__			}_			else {_				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,if,value,null,this,headers,get,raw,headers,put,name,value,else,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1468534546;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1468951740;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1468964586;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1476285064;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1482446059;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, Object value);1487361557;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1397429525;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		this.headers.setIdAndTimestamp()__		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,this,headers,set,id,and,timestamp,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1397497975;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		this.headers.setIdAndTimestamp()__		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,this,headers,set,id,and,timestamp,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1397523793;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1403856366;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1404880799;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1404945414;Return the underlying {@code MessageHeaders} instance.__<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them.__<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1405010287;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers instead_use {@link #toMap()}.;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,instead,use,link,to,map;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1408740948;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1408748821;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1411389021;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1413848647;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1416910930;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1424294907;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1448383032;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1460644739;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1467730834;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1468534546;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1468951740;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1468964586;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1476285064;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1482446059;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1487361557;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1495868221;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1496259743;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1496837955;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1497362807;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1498780456;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1509997270;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1530174524;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1530174524;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> public MessageHeaders getMessageHeaders();1550237113;Return the underlying {@code MessageHeaders} instance._<p>Unless {@link #setLeaveMutable(boolean)} was set to {@code true}, after_this call, the headers are immutable and this accessor can no longer_modify them._<p>This method always returns the same {@code MessageHeaders} instance if_invoked multiples times. To obtain a copy of the underlying headers, use_{@link #toMessageHeaders()} or {@link #toMap()} instead._@since 4.1;public MessageHeaders getMessageHeaders() {_		if (!this.leaveMutable) {_			setImmutable()__		}_		return this.headers__	};return,the,underlying,code,message,headers,instance,p,unless,link,set,leave,mutable,boolean,was,set,to,code,true,after,this,call,the,headers,are,immutable,and,this,accessor,can,no,longer,modify,them,p,this,method,always,returns,the,same,code,message,headers,instance,if,invoked,multiples,times,to,obtain,a,copy,of,the,underlying,headers,use,link,to,message,headers,or,link,to,map,instead,since,4,1;public,message,headers,get,message,headers,if,this,leave,mutable,set,immutable,return,this,headers
MessageHeaderAccessor -> protected void setModified(boolean modified);1408740948;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1408748821;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1411389021;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1413848647;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1416910930;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1424294907;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1448383032;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1460644739;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1467730834;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1468534546;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1468951740;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1468964586;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1476285064;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1482446059;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1487361557;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1495868221;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1496259743;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1496837955;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1497362807;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1498780456;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1509997270;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1530174524;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1530174524;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> protected void setModified(boolean modified);1550237113;Mark the underlying message headers as modified._@param modified typically {@code true}, or {@code false} to reset the flag_@since 4.1;protected void setModified(boolean modified) {_		this.modified = modified__	};mark,the,underlying,message,headers,as,modified,param,modified,typically,code,true,or,code,false,to,reset,the,flag,since,4,1;protected,void,set,modified,boolean,modified,this,modified,modified
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1373651081;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!isReadOnly(key)) {_				setHeader(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1373756732;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!isReadOnly(key)) {_				setHeader(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1381440318;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		Set<String> keys = headersToCopy.keySet()__		for (String key : keys) {_			if (!isReadOnly(key)) {_				setHeader(key, headersToCopy.get(key))__			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1382110439;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1397429525;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1397497975;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1397523793;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1403856366;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1404880799;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1404945414;Copy the name-value pairs from the provided Map. This operation will overwrite any_existing values. Use { {@link #copyHeadersIfAbsent(Map)} to avoid overwriting_values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1405010287;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1408740948;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1408748821;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1411389021;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1413848647;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			Set<String> keys = headersToCopy.keySet()__			for (String key : keys) {_				if (!isReadOnly(key)) {_					setHeader(key, headersToCopy.get(key))__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,set,string,keys,headers,to,copy,key,set,for,string,key,keys,if,is,read,only,key,set,header,key,headers,to,copy,get,key
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1416910930;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1424294907;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1448383032;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1460644739;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1467730834;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1468534546;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1468951740;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1468964586;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1476285064;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1482446059;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1487361557;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1495868221;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(Map<String, ?> headersToCopy);1496259743;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public Map<String, Object> toMap();1373651081;Return a header map including original, wrapped headers (if any) plus additional_header updates made through accessor methods.;public Map<String, Object> toMap() {_		Map<String, Object> result = new HashMap<String, Object>()__		if (this.originalHeaders != null) {_			result.putAll(this.originalHeaders)__		}_		for (String key : this.headers.keySet()) {_			Object value = this.headers.get(key)__			if (value == null) {_				result.remove(key)__			}_			else {_				result.put(key, value)__			}_		}_		return result__	};return,a,header,map,including,original,wrapped,headers,if,any,plus,additional,header,updates,made,through,accessor,methods;public,map,string,object,to,map,map,string,object,result,new,hash,map,string,object,if,this,original,headers,null,result,put,all,this,original,headers,for,string,key,this,headers,key,set,object,value,this,headers,get,key,if,value,null,result,remove,key,else,result,put,key,value,return,result
MessageHeaderAccessor -> public Map<String, Object> toMap();1373756732;Return a header map including original, wrapped headers (if any) plus additional_header updates made through accessor methods.;public Map<String, Object> toMap() {_		Map<String, Object> result = new HashMap<String, Object>()__		if (this.originalHeaders != null) {_			result.putAll(this.originalHeaders)__		}_		for (String key : this.headers.keySet()) {_			Object value = this.headers.get(key)__			if (value == null) {_				result.remove(key)__			}_			else {_				result.put(key, value)__			}_		}_		return result__	};return,a,header,map,including,original,wrapped,headers,if,any,plus,additional,header,updates,made,through,accessor,methods;public,map,string,object,to,map,map,string,object,result,new,hash,map,string,object,if,this,original,headers,null,result,put,all,this,original,headers,for,string,key,this,headers,key,set,object,value,this,headers,get,key,if,value,null,result,remove,key,else,result,put,key,value,return,result
MessageHeaderAccessor -> public Map<String, Object> toMap();1381440318;Return a header map including original, wrapped headers (if any) plus additional_header updates made through accessor methods.;public Map<String, Object> toMap() {_		Map<String, Object> result = new HashMap<String, Object>()__		if (this.originalHeaders != null) {_			result.putAll(this.originalHeaders)__		}_		for (String key : this.headers.keySet()) {_			Object value = this.headers.get(key)__			if (value == null) {_				result.remove(key)__			}_			else {_				result.put(key, value)__			}_		}_		return result__	};return,a,header,map,including,original,wrapped,headers,if,any,plus,additional,header,updates,made,through,accessor,methods;public,map,string,object,to,map,map,string,object,result,new,hash,map,string,object,if,this,original,headers,null,result,put,all,this,original,headers,for,string,key,this,headers,key,set,object,value,this,headers,get,key,if,value,null,result,remove,key,else,result,put,key,value,return,result
MessageHeaderAccessor -> public Map<String, Object> toMap();1382110439;Return a header map including original, wrapped headers (if any) plus additional_header updates made through accessor methods.;public Map<String, Object> toMap() {_		Map<String, Object> result = new HashMap<String, Object>()__		if (this.originalHeaders != null) {_			result.putAll(this.originalHeaders)__		}_		for (String key : this.headers.keySet()) {_			Object value = this.headers.get(key)__			if (value == null) {_				result.remove(key)__			}_			else {_				result.put(key, value)__			}_		}_		return result__	};return,a,header,map,including,original,wrapped,headers,if,any,plus,additional,header,updates,made,through,accessor,methods;public,map,string,object,to,map,map,string,object,result,new,hash,map,string,object,if,this,original,headers,null,result,put,all,this,original,headers,for,string,key,this,headers,key,set,object,value,this,headers,get,key,if,value,null,result,remove,key,else,result,put,key,value,return,result
MessageHeaderAccessor -> public Map<String, Object> toMap();1397429525;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1397497975;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1397523793;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1403856366;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1404880799;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1404945414;Return a copy of the underlying header values.__<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1405010287;Return a copy of the underlying header values._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1408740948;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1408748821;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1411389021;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1413848647;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1416910930;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1424294907;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1448383032;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1460644739;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<String, Object>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,string,object,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1467730834;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1468534546;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1468951740;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1468964586;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1476285064;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1482446059;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1487361557;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1495868221;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1496259743;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1496837955;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1497362807;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1498780456;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1509997270;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1530174524;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1530174524;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> public Map<String, Object> toMap();1550237113;Return a copy of the underlying header values as a plain {@link Map} object._<p>This method can be invoked many times, with modifications in between_where each new call returns a fresh copy of the current header values.;public Map<String, Object> toMap() {_		return new HashMap<>(this.headers)__	};return,a,copy,of,the,underlying,header,values,as,a,plain,link,map,object,p,this,method,can,be,invoked,many,times,with,modifications,in,between,where,each,new,call,returns,a,fresh,copy,of,the,current,header,values;public,map,string,object,to,map,return,new,hash,map,this,headers
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1397429525;A private mechanism for providing an alternate IdGenerator strategy.__<p>By default this property is not set in which case the default IdGenerator_of {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.MessageHeaderAccessorFactorySupport;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,private,mechanism,for,providing,an,alternate,id,generator,strategy,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,of,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,message,header,accessor,factory,support;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1397497975;A package private mechanism to configure the IdGenerator strategy to use.__<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1397523793;A package private mechanism to configure the IdGenerator strategy to use.__<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1403856366;A package private mechanism to configure the IdGenerator strategy to use.__<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1404880799;A package private mechanism to configure the IdGenerator strategy to use.__<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1404945414;A package private mechanism to configure the IdGenerator strategy to use.__<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used.__@see org.springframework.messaging.support.IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,org,springframework,messaging,support,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1405010287;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1408740948;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1408748821;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1411389021;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1413848647;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1416910930;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1424294907;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1448383032;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1460644739;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1467730834;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1468534546;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1468951740;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1468964586;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1476285064;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1482446059;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1487361557;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1495868221;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1496259743;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1496837955;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1497362807;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1498780456;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1509997270;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1530174524;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1530174524;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> void setIdGenerator(IdGenerator idGenerator);1550237113;A package-private mechanism to configure the IdGenerator strategy to use._<p>By default this property is not set in which case the default IdGenerator_in {@link org.springframework.messaging.MessageHeaders} is used._@see IdTimestampMessageHeaderInitializer;void setIdGenerator(IdGenerator idGenerator) {_		this.idGenerator = idGenerator__	};a,package,private,mechanism,to,configure,the,id,generator,strategy,to,use,p,by,default,this,property,is,not,set,in,which,case,the,default,id,generator,in,link,org,springframework,messaging,message,headers,is,used,see,id,timestamp,message,header,initializer;void,set,id,generator,id,generator,id,generator,this,id,generator,id,generator
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1495868221;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1496259743;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1496837955;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1497362807;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1498780456;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1509997270;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1530174524;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1530174524;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void setHeader(String name, @Nullable Object value);1550237113;Set the value for the given header name._<p>If the provided value is {@code null}, the header will be removed.;public void setHeader(String name, @Nullable Object value) {_		if (isReadOnly(name)) {_			throw new IllegalArgumentException("'" + name + "' header is read-only")__		}_		verifyType(name, value)__		if (value != null) {_			_			if (!ObjectUtils.nullSafeEquals(value, getHeader(name))) {_				this.modified = true__				this.headers.getRawHeaders().put(name, value)__			}_		}_		else {_			_			if (this.headers.containsKey(name)) {_				this.modified = true__				this.headers.getRawHeaders().remove(name)__			}_		}_	};set,the,value,for,the,given,header,name,p,if,the,provided,value,is,code,null,the,header,will,be,removed;public,void,set,header,string,name,nullable,object,value,if,is,read,only,name,throw,new,illegal,argument,exception,name,header,is,read,only,verify,type,name,value,if,value,null,if,object,utils,null,safe,equals,value,get,header,name,this,modified,true,this,headers,get,raw,headers,put,name,value,else,if,this,headers,contains,key,name,this,modified,true,this,headers,get,raw,headers,remove,name
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1496837955;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeaderIfAbsent(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,if,absent,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1497362807;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1498780456;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1509997270;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy);1550237113;Copy the name-value pairs from the provided Map._<p>This operation will <em>not</em> overwrite any existing values.;public void copyHeadersIfAbsent(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeaderIfAbsent(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,em,not,em,overwrite,any,existing,values;public,void,copy,headers,if,absent,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,if,absent,key,value
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1496259743;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1496837955;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1497362807;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1498780456;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1509997270;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1530174524;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1530174524;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> public String getDetailedLogMessage(@Nullable Object payload);1550237113;Return a more detailed message for logging purposes._@param payload the payload that corresponds to the headers._@return the message;public String getDetailedLogMessage(@Nullable Object payload) {_		return "headers=" + this.headers.toString() + getDetailedPayloadLogMessage(payload)__	};return,a,more,detailed,message,for,logging,purposes,param,payload,the,payload,that,corresponds,to,the,headers,return,the,message;public,string,get,detailed,log,message,nullable,object,payload,return,headers,this,headers,to,string,get,detailed,payload,log,message,payload
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1408740948;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1408748821;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1411389021;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1413848647;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1416910930;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1424294907;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1448383032;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1460644739;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1467730834;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1468534546;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1468951740;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1468964586;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1476285064;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1482446059;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1487361557;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1495868221;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1496259743;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1496837955;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1497362807;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1498780456;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1509997270;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1530174524;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1530174524;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> protected MessageHeaderAccessor createAccessor(Message<?> message);1550237113;Build a 'nested' accessor for the given message._@param message the message to build a new accessor for_@return the nested accessor (typically a specific subclass);protected MessageHeaderAccessor createAccessor(Message<?> message) {_		return new MessageHeaderAccessor(message)__	};build,a,nested,accessor,for,the,given,message,param,message,the,message,to,build,a,new,accessor,for,return,the,nested,accessor,typically,a,specific,subclass;protected,message,header,accessor,create,accessor,message,message,return,new,message,header,accessor,message
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1496837955;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			for (Map.Entry<String, ?> entry : headersToCopy.entrySet()) {_				if (!isReadOnly(entry.getKey())) {_					setHeader(entry.getKey(), entry.getValue())__				}_			}_		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,for,map,entry,string,entry,headers,to,copy,entry,set,if,is,read,only,entry,get,key,set,header,entry,get,key,entry,get,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1497362807;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1498780456;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1509997270;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1530174524;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
MessageHeaderAccessor -> public void copyHeaders(@Nullable Map<String, ?> headersToCopy);1550237113;Copy the name-value pairs from the provided Map._<p>This operation will overwrite any existing values. Use_{@link #copyHeadersIfAbsent(Map)} to avoid overwriting values.;public void copyHeaders(@Nullable Map<String, ?> headersToCopy) {_		if (headersToCopy != null) {_			headersToCopy.forEach((key, value) -> {_				if (!isReadOnly(key)) {_					setHeader(key, value)__				}_			})__		}_	};copy,the,name,value,pairs,from,the,provided,map,p,this,operation,will,overwrite,any,existing,values,use,link,copy,headers,if,absent,map,to,avoid,overwriting,values;public,void,copy,headers,nullable,map,string,headers,to,copy,if,headers,to,copy,null,headers,to,copy,for,each,key,value,if,is,read,only,key,set,header,key,value
