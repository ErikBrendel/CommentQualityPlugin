# id;timestamp;commentText;codeText;commentWords;codeWords
HandlerMethod -> public Method getMethod();1386350678;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1392160372;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1404880799;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1413848647;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1426869344;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1432286953;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1435615322;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1453827975;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1458754760;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1467846264;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1485338983;Returns the method for this handler method.;public Method getMethod() {_		return this.method__	};returns,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1491659765;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1496837955;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1498780456;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1530174524;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1531942400;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public Method getMethod();1540934109;Return the method for this handler method.;public Method getMethod() {_		return this.method__	};return,the,method,for,this,handler,method;public,method,get,method,return,this,method
HandlerMethod -> public HandlerMethod getResolvedFromHandlerMethod();1458754760;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> public HandlerMethod getResolvedFromHandlerMethod();1467846264;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> public HandlerMethod getResolvedFromHandlerMethod();1485338983;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> public HandlerMethod getResolvedFromHandlerMethod();1491659765;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> public HandlerMethod getResolvedFromHandlerMethod();1496837955;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> public MethodParameter getReturnType();1386350678;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1392160372;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1404880799;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1413848647;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1426869344;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1432286953;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1435615322;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1453827975;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1458754760;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1467846264;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1485338983;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1491659765;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1496837955;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1498780456;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1530174524;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1531942400;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public MethodParameter getReturnType();1540934109;Return the HandlerMethod return type.;public MethodParameter getReturnType() {_		return new HandlerMethodParameter(-1)__	};return,the,handler,method,return,type;public,method,parameter,get,return,type,return,new,handler,method,parameter,1
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1386350678;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "beanName must not be null")__		Assert.notNull(beanFactory, "beanFactory must not be null")__		Assert.notNull(method, "method must not be null")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"Bean factory [" + beanFactory + "] does not contain bean [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,must,not,be,null,assert,not,null,bean,factory,bean,factory,must,not,be,null,assert,not,null,method,method,must,not,be,null,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1392160372;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1404880799;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1413848647;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		Assert.isTrue(beanFactory.containsBean(beanName),_				"BeanFactory [" + beanFactory + "] does not contain bean [" + beanName + "]")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,assert,is,true,bean,factory,contains,bean,bean,name,bean,factory,bean,factory,does,not,contain,bean,bean,name,this,bean,bean,name,this,bean,factory,bean,factory,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1426869344;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1432286953;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1435615322;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1453827975;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized the bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,the,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1458754760;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1467846264;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1485338983;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1491659765;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		this.beanType = ClassUtils.getUserClass(beanFactory.getType(beanName))__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,this,bean,type,class,utils,get,user,class,bean,factory,get,type,bean,name,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1496837955;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		Class<?> beanType = beanFactory.getType(beanName)__		this.beanType = (beanType != null ? ClassUtils.getUserClass(beanType) : null)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,bean,factory,get,type,bean,name,this,bean,type,bean,type,null,class,utils,get,user,class,bean,type,null,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1498780456;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		Class<?> beanType = beanFactory.getType(beanName)__		if (beanType == null) {_			throw new IllegalStateException("Cannot resolve bean type for bean with name '" + beanName + "'")__		}_		this.beanType = ClassUtils.getUserClass(beanType)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,bean,factory,get,type,bean,name,if,bean,type,null,throw,new,illegal,state,exception,cannot,resolve,bean,type,for,bean,with,name,bean,name,this,bean,type,class,utils,get,user,class,bean,type,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1530174524;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		Class<?> beanType = beanFactory.getType(beanName)__		if (beanType == null) {_			throw new IllegalStateException("Cannot resolve bean type for bean with name '" + beanName + "'")__		}_		this.beanType = ClassUtils.getUserClass(beanType)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,bean,factory,get,type,bean,name,if,bean,type,null,throw,new,illegal,state,exception,cannot,resolve,bean,type,for,bean,with,name,bean,name,this,bean,type,class,utils,get,user,class,bean,type,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1531942400;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		Class<?> beanType = beanFactory.getType(beanName)__		if (beanType == null) {_			throw new IllegalStateException("Cannot resolve bean type for bean with name '" + beanName + "'")__		}_		this.beanType = ClassUtils.getUserClass(beanType)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,bean,factory,get,type,bean,name,if,bean,type,null,throw,new,illegal,state,exception,cannot,resolve,bean,type,for,bean,with,name,bean,name,this,bean,type,class,utils,get,user,class,bean,type,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(String beanName, BeanFactory beanFactory, Method method);1540934109;Create an instance from a bean name, a method, and a {@code BeanFactory}._The method {@link #createWithResolvedBean()} may be used later to_re-create the {@code HandlerMethod} with an initialized bean.;public HandlerMethod(String beanName, BeanFactory beanFactory, Method method) {_		Assert.hasText(beanName, "Bean name is required")__		Assert.notNull(beanFactory, "BeanFactory is required")__		Assert.notNull(method, "Method is required")__		this.bean = beanName__		this.beanFactory = beanFactory__		Class<?> beanType = beanFactory.getType(beanName)__		if (beanType == null) {_			throw new IllegalStateException("Cannot resolve bean type for bean with name '" + beanName + "'")__		}_		this.beanType = ClassUtils.getUserClass(beanType)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,name,a,method,and,a,code,bean,factory,the,method,link,create,with,resolved,bean,may,be,used,later,to,re,create,the,code,handler,method,with,an,initialized,bean;public,handler,method,string,bean,name,bean,factory,bean,factory,method,method,assert,has,text,bean,name,bean,name,is,required,assert,not,null,bean,factory,bean,factory,is,required,assert,not,null,method,method,is,required,this,bean,bean,name,this,bean,factory,bean,factory,class,bean,type,bean,factory,get,type,bean,name,if,bean,type,null,throw,new,illegal,state,exception,cannot,resolve,bean,type,for,bean,with,name,bean,name,this,bean,type,class,utils,get,user,class,bean,type,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1386350678;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "handlerMethod must not be null")__		Assert.notNull(handler, "handler must not be null")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,must,not,be,null,assert,not,null,handler,handler,must,not,be,null,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1392160372;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1404880799;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1413848647;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1426869344;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1432286953;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1435615322;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1453827975;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1458754760;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1467846264;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1485338983;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1491659765;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1496837955;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1498780456;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1530174524;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1531942400;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> private HandlerMethod(HandlerMethod handlerMethod, Object handler);1540934109;Re-create HandlerMethod with the resolved handler.;private HandlerMethod(HandlerMethod handlerMethod, Object handler) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		Assert.notNull(handler, "Handler object is required")__		this.bean = handler__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod__	};re,create,handler,method,with,the,resolved,handler;private,handler,method,handler,method,handler,method,object,handler,assert,not,null,handler,method,handler,method,is,required,assert,not,null,handler,handler,object,is,required,this,bean,handler,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method
HandlerMethod -> public Object getBean();1386350678;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1392160372;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1404880799;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1413848647;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1426869344;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1432286953;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1435615322;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1453827975;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1458754760;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1467846264;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1485338983;Returns the bean for this handler method.;public Object getBean() {_		return this.bean__	};returns,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1491659765;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1496837955;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1498780456;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1530174524;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1531942400;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public Object getBean();1540934109;Return the bean for this handler method.;public Object getBean() {_		return this.bean__	};return,the,bean,for,this,handler,method;public,object,get,bean,return,this,bean
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1386350678;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1392160372;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1404880799;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1413848647;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1426869344;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1432286953;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1435615322;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1453827975;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1458754760;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1467846264;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1485338983;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1491659765;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(Object returnValue);1496837955;Return the actual return value type.;public MethodParameter getReturnValueType(Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1386350678;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "bean must not be null")__		Assert.notNull(methodName, "method must not be null")__		this.bean = bean__		this.beanFactory = null__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,must,not,be,null,assert,not,null,method,name,method,must,not,be,null,this,bean,bean,this,bean,factory,null,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1392160372;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1404880799;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1413848647;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1426869344;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1432286953;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1435615322;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1453827975;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1458754760;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1467846264;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1485338983;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1491659765;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1496837955;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1498780456;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1530174524;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1531942400;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException;1540934109;Create an instance from a bean instance, method name, and parameter types._@throws NoSuchMethodException when the method cannot be found;public HandlerMethod(Object bean, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(methodName, "Method name is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = bean.getClass().getMethod(methodName, parameterTypes)__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(this.method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,method,name,and,parameter,types,throws,no,such,method,exception,when,the,method,cannot,be,found;public,handler,method,object,bean,string,method,name,class,parameter,types,throws,no,such,method,exception,assert,not,null,bean,bean,is,required,assert,not,null,method,name,method,name,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,bean,get,class,get,method,method,name,parameter,types,this,bridged,method,bridge,method,resolver,find,bridged,method,this,method,this,parameters,init,method,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1386350678;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1392160372;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1404880799;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1413848647;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1426869344;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1432286953;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1435615322;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1453827975;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1458754760;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1467846264;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1485338983;Returns the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};returns,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1491659765;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1496837955;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1498780456;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1530174524;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1531942400;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public MethodParameter[] getMethodParameters();1540934109;Return the method parameters for this handler method.;public MethodParameter[] getMethodParameters() {_		return this.parameters__	};return,the,method,parameters,for,this,handler,method;public,method,parameter,get,method,parameters,return,this,parameters
HandlerMethod -> public Log getLogger();1531942400;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
HandlerMethod -> public Log getLogger();1540934109;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1386350678;Returns a single annotation on the underlying method traversing its super methods if no_annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1392160372;Returns a single annotation on the underlying method traversing its super methods if no_annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1404880799;Returns a single annotation on the underlying method traversing its super methods if no_annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1413848647;Returns a single annotation on the underlying method traversing its super methods if no_annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1426869344;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1432286953;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1435615322;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1453827975;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._@param annotationType the type of annotation to introspect the method for._@return the annotation, or {@code null} if none found;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotationUtils.findAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotation,utils,find,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1458754760;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1467846264;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1485338983;Returns a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};returns,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1491659765;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> public HandlerMethod createWithResolvedBean();1386350678;If the provided instance contains a bean name rather than an object instance, the bean name is resolved_before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1392160372;If the provided instance contains a bean name rather than an object instance, the bean name is resolved_before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1404880799;If the provided instance contains a bean name rather than an object instance, the bean name is resolved_before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1413848647;If the provided instance contains a bean name rather than an object instance, the bean name is resolved_before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1426869344;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1432286953;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1435615322;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1453827975;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1458754760;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1467846264;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1485338983;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1491659765;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1496837955;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1498780456;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			Assert.state(this.beanFactory != null, "Cannot resolve bean name without BeanFactory")__			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,assert,state,this,bean,factory,null,cannot,resolve,bean,name,without,bean,factory,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1530174524;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			Assert.state(this.beanFactory != null, "Cannot resolve bean name without BeanFactory")__			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,assert,state,this,bean,factory,null,cannot,resolve,bean,name,without,bean,factory,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1531942400;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			Assert.state(this.beanFactory != null, "Cannot resolve bean name without BeanFactory")__			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,assert,state,this,bean,factory,null,cannot,resolve,bean,name,without,bean,factory,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public HandlerMethod createWithResolvedBean();1540934109;If the provided instance contains a bean name rather than an object instance,_the bean name is resolved before a {@link HandlerMethod} is created and returned.;public HandlerMethod createWithResolvedBean() {_		Object handler = this.bean__		if (this.bean instanceof String) {_			Assert.state(this.beanFactory != null, "Cannot resolve bean name without BeanFactory")__			String beanName = (String) this.bean__			handler = this.beanFactory.getBean(beanName)__		}_		return new HandlerMethod(this, handler)__	};if,the,provided,instance,contains,a,bean,name,rather,than,an,object,instance,the,bean,name,is,resolved,before,a,link,handler,method,is,created,and,returned;public,handler,method,create,with,resolved,bean,object,handler,this,bean,if,this,bean,instanceof,string,assert,state,this,bean,factory,null,cannot,resolve,bean,name,without,bean,factory,string,bean,name,string,this,bean,handler,this,bean,factory,get,bean,bean,name,return,new,handler,method,this,handler
HandlerMethod -> public MethodParameter getReturnValueType(@Nullable Object returnValue);1498780456;Return the actual return value type.;public MethodParameter getReturnValueType(@Nullable Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,nullable,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(@Nullable Object returnValue);1530174524;Return the actual return value type.;public MethodParameter getReturnValueType(@Nullable Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,nullable,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(@Nullable Object returnValue);1531942400;Return the actual return value type.;public MethodParameter getReturnValueType(@Nullable Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,nullable,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public MethodParameter getReturnValueType(@Nullable Object returnValue);1540934109;Return the actual return value type.;public MethodParameter getReturnValueType(@Nullable Object returnValue) {_		return new ReturnValueMethodParameter(returnValue)__	};return,the,actual,return,value,type;public,method,parameter,get,return,value,type,nullable,object,return,value,return,new,return,value,method,parameter,return,value
HandlerMethod -> public void setLogger(Log logger);1531942400;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
HandlerMethod -> public void setLogger(Log logger);1540934109;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
HandlerMethod -> public Class<?> getBeanType();1386350678;Returns the type of the handler for this handler method._Note that if the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,handler,for,this,handler,method,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
HandlerMethod -> public Class<?> getBeanType();1392160372;Returns the type of the handler for this handler method._Note that if the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,handler,for,this,handler,method,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
HandlerMethod -> public Class<?> getBeanType();1404880799;Returns the type of the handler for this handler method._Note that if the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,handler,for,this,handler,method,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
HandlerMethod -> public Class<?> getBeanType();1413848647;Returns the type of the handler for this handler method._Note that if the bean type is a CGLIB-generated class, the original, user-defined class is returned.;public Class<?> getBeanType() {_		Class<?> clazz = (this.bean instanceof String ?_				this.beanFactory.getType((String) this.bean) : this.bean.getClass())__		return ClassUtils.getUserClass(clazz)__	};returns,the,type,of,the,handler,for,this,handler,method,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,class,clazz,this,bean,instanceof,string,this,bean,factory,get,type,string,this,bean,this,bean,get,class,return,class,utils,get,user,class,clazz
HandlerMethod -> public Class<?> getBeanType();1426869344;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1432286953;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1435615322;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1453827975;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1458754760;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1467846264;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1485338983;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1491659765;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1496837955;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1498780456;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1530174524;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1531942400;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public Class<?> getBeanType();1540934109;This method returns the type of the handler for this handler method._<p>Note that if the bean type is a CGLIB-generated class, the original_user-defined class is returned.;public Class<?> getBeanType() {_		return this.beanType__	};this,method,returns,the,type,of,the,handler,for,this,handler,method,p,note,that,if,the,bean,type,is,a,cglib,generated,class,the,original,user,defined,class,is,returned;public,class,get,bean,type,return,this,bean,type
HandlerMethod -> public String getShortLogMessage();1458754760;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterTypes().length__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,types,length,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1467846264;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1485338983;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1491659765;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1496837955;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1498780456;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1530174524;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1531942400;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> public String getShortLogMessage();1540934109;Return a short representation of this handler method for log message purposes.;public String getShortLogMessage() {_		int args = this.method.getParameterCount()__		return getBeanType().getName() + "#" + this.method.getName() + "[" + args + " args]"__	};return,a,short,representation,of,this,handler,method,for,log,message,purposes;public,string,get,short,log,message,int,args,this,method,get,parameter,count,return,get,bean,type,get,name,this,method,get,name,args,args
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1386350678;Copy constructor for use in sub-classes.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod must not be null")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,sub,classes;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,must,not,be,null,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1392160372;Copy constructor for use in sub-classes.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,sub,classes;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1404880799;Copy constructor for use in sub-classes.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,sub,classes;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1413848647;Copy constructor for use in sub-classes.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,sub,classes;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1426869344;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1432286953;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1435615322;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1453827975;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1458754760;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1467846264;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1485338983;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1491659765;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1496837955;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1498780456;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1530174524;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1531942400;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected HandlerMethod(HandlerMethod handlerMethod);1540934109;Copy constructor for use in subclasses.;protected HandlerMethod(HandlerMethod handlerMethod) {_		Assert.notNull(handlerMethod, "HandlerMethod is required")__		this.bean = handlerMethod.bean__		this.beanFactory = handlerMethod.beanFactory__		this.beanType = handlerMethod.beanType__		this.method = handlerMethod.method__		this.bridgedMethod = handlerMethod.bridgedMethod__		this.parameters = handlerMethod.parameters__		this.resolvedFromHandlerMethod = handlerMethod.resolvedFromHandlerMethod__	};copy,constructor,for,use,in,subclasses;protected,handler,method,handler,method,handler,method,assert,not,null,handler,method,handler,method,is,required,this,bean,handler,method,bean,this,bean,factory,handler,method,bean,factory,this,bean,type,handler,method,bean,type,this,method,handler,method,method,this,bridged,method,handler,method,bridged,method,this,parameters,handler,method,parameters,this,resolved,from,handler,method,handler,method,resolved,from,handler,method
HandlerMethod -> protected Method getBridgedMethod();1386350678;If the bean method is a bridge method, this method returns the bridged (user-defined) method._Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1392160372;If the bean method is a bridge method, this method returns the bridged (user-defined) method._Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1404880799;If the bean method is a bridge method, this method returns the bridged (user-defined) method._Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1413848647;If the bean method is a bridge method, this method returns the bridged (user-defined) method._Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1426869344;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1432286953;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1435615322;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1453827975;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1458754760;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1467846264;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1485338983;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1491659765;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1496837955;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1498780456;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1530174524;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1531942400;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> protected Method getBridgedMethod();1540934109;If the bean method is a bridge method, this method returns the bridged_(user-defined) method. Otherwise it returns the same method as {@link #getMethod()}.;protected Method getBridgedMethod() {_		return this.bridgedMethod__	};if,the,bean,method,is,a,bridge,method,this,method,returns,the,bridged,user,defined,method,otherwise,it,returns,the,same,method,as,link,get,method;protected,method,get,bridged,method,return,this,bridged,method
HandlerMethod -> @Nullable 	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1496837955;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;@Nullable_	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;nullable,public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> @Nullable 	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1498780456;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;@Nullable_	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;nullable,public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> @Nullable 	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1530174524;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;@Nullable_	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;nullable,public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> @Nullable 	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1531942400;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;@Nullable_	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;nullable,public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> @Nullable 	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType);1540934109;Return a single annotation on the underlying method traversing its super methods_if no annotation can be found on the given method itself._<p>Also supports <em>merged</em> composed annotations with attribute_overrides as of Spring Framework 4.3._@param annotationType the type of annotation to introspect the method for_@return the annotation, or {@code null} if none found_@see AnnotatedElementUtils#findMergedAnnotation;@Nullable_	public <A extends Annotation> A getMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.findMergedAnnotation(this.method, annotationType)__	};return,a,single,annotation,on,the,underlying,method,traversing,its,super,methods,if,no,annotation,can,be,found,on,the,given,method,itself,p,also,supports,em,merged,em,composed,annotations,with,attribute,overrides,as,of,spring,framework,4,3,param,annotation,type,the,type,of,annotation,to,introspect,the,method,for,return,the,annotation,or,code,null,if,none,found,see,annotated,element,utils,find,merged,annotation;nullable,public,a,extends,annotation,a,get,method,annotation,class,a,annotation,type,return,annotated,element,utils,find,merged,annotation,this,method,annotation,type
HandlerMethod -> public HandlerMethod(Object bean, Method method);1386350678;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "bean must not be null")__		Assert.notNull(method, "method must not be null")__		this.bean = bean__		this.beanFactory = null__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,must,not,be,null,assert,not,null,method,method,must,not,be,null,this,bean,bean,this,bean,factory,null,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1392160372;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1404880799;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1413848647;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1426869344;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1432286953;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1435615322;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1453827975;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1458754760;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, Method method);1467846264;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, Method method);1485338983;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__		this.resolvedFromHandlerMethod = null__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters,this,resolved,from,handler,method,null
HandlerMethod -> public HandlerMethod(Object bean, Method method);1491659765;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1496837955;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1498780456;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1530174524;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1531942400;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public HandlerMethod(Object bean, Method method);1540934109;Create an instance from a bean instance and a method.;public HandlerMethod(Object bean, Method method) {_		Assert.notNull(bean, "Bean is required")__		Assert.notNull(method, "Method is required")__		this.bean = bean__		this.beanFactory = null__		this.beanType = ClassUtils.getUserClass(bean)__		this.method = method__		this.bridgedMethod = BridgeMethodResolver.findBridgedMethod(method)__		this.parameters = initMethodParameters()__	};create,an,instance,from,a,bean,instance,and,a,method;public,handler,method,object,bean,method,method,assert,not,null,bean,bean,is,required,assert,not,null,method,method,is,required,this,bean,bean,this,bean,factory,null,this,bean,type,class,utils,get,user,class,bean,this,method,method,this,bridged,method,bridge,method,resolver,find,bridged,method,method,this,parameters,init,method,parameters
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1458754760;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1467846264;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1485338983;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1491659765;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1496837955;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1498780456;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1530174524;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1531942400;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType);1540934109;Return whether the parameter is declared with the given annotation type._@param annotationType the annotation type to look for_@since 4.3_@see AnnotatedElementUtils#hasAnnotation;public <A extends Annotation> boolean hasMethodAnnotation(Class<A> annotationType) {_		return AnnotatedElementUtils.hasAnnotation(this.method, annotationType)__	};return,whether,the,parameter,is,declared,with,the,given,annotation,type,param,annotation,type,the,annotation,type,to,look,for,since,4,3,see,annotated,element,utils,has,annotation;public,a,extends,annotation,boolean,has,method,annotation,class,a,annotation,type,return,annotated,element,utils,has,annotation,this,method,annotation,type
HandlerMethod -> public boolean isVoid();1386350678;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1392160372;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1404880799;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1413848647;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1426869344;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1432286953;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1435615322;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1453827975;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1458754760;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1467846264;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1485338983;Returns {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};returns,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1491659765;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1496837955;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1498780456;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1530174524;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1531942400;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> public boolean isVoid();1540934109;Return {@code true} if the method return type is void, {@code false} otherwise.;public boolean isVoid() {_		return Void.TYPE.equals(getReturnType().getParameterType())__	};return,code,true,if,the,method,return,type,is,void,code,false,otherwise;public,boolean,is,void,return,void,type,equals,get,return,type,get,parameter,type
HandlerMethod -> @Nullable 	public HandlerMethod getResolvedFromHandlerMethod();1498780456;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;@Nullable_	public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;nullable,public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> @Nullable 	public HandlerMethod getResolvedFromHandlerMethod();1530174524;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;@Nullable_	public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;nullable,public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> @Nullable 	public HandlerMethod getResolvedFromHandlerMethod();1531942400;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;@Nullable_	public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;nullable,public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
HandlerMethod -> @Nullable 	public HandlerMethod getResolvedFromHandlerMethod();1540934109;Return the HandlerMethod from which this HandlerMethod instance was_resolved via {@link #createWithResolvedBean()}._@since 4.3;@Nullable_	public HandlerMethod getResolvedFromHandlerMethod() {_		return this.resolvedFromHandlerMethod__	};return,the,handler,method,from,which,this,handler,method,instance,was,resolved,via,link,create,with,resolved,bean,since,4,3;nullable,public,handler,method,get,resolved,from,handler,method,return,this,resolved,from,handler,method
