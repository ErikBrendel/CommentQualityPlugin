commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a {@link MessageHeaderInitializer} to apply to the headers of all  * messages sent to the client outbound channel.  * <p>By default this property is not set.  */ ;/**  * Configure a {@link MessageHeaderInitializer} to apply to the headers of all  * messages sent to the client outbound channel.  * <p>By default this property is not set.  */ public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {     this.headerInitializer = headerInitializer. }
true;public;0;4;/**  * Return the configured header initializer.  */ ;/**  * Return the configured header initializer.  */ @Nullable public MessageHeaderInitializer getHeaderInitializer() {     return this.headerInitializer. }
false;public;1;6;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return (returnType.hasMethodAnnotation(SubscribeMapping.class) && !returnType.hasMethodAnnotation(SendTo.class) && !returnType.hasMethodAnnotation(SendToUser.class)). }
false;public;3;28;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, Message<?> message) throws Exception {     if (returnValue == null) {         return.     }     MessageHeaders headers = message.getHeaders().     String sessionId = SimpMessageHeaderAccessor.getSessionId(headers).     String subscriptionId = SimpMessageHeaderAccessor.getSubscriptionId(headers).     String destination = SimpMessageHeaderAccessor.getDestination(headers).     if (subscriptionId == null) {         throw new IllegalStateException("No simpSubscriptionId in " + message + " returned by: " + returnType.getMethod()).     }     if (destination == null) {         throw new IllegalStateException("No simpDestination in " + message + " returned by: " + returnType.getMethod()).     }     if (logger.isDebugEnabled()) {         logger.debug("Reply to @SubscribeMapping: " + returnValue).     }     MessageHeaders headersToSend = createHeaders(sessionId, subscriptionId, returnType).     this.messagingTemplate.convertAndSend(destination, returnValue, headersToSend). }
false;private;3;13;;private MessageHeaders createHeaders(@Nullable String sessionId, String subscriptionId, MethodParameter returnType) {     SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE).     if (getHeaderInitializer() != null) {         getHeaderInitializer().initHeaders(accessor).     }     if (sessionId != null) {         accessor.setSessionId(sessionId).     }     accessor.setSubscriptionId(subscriptionId).     accessor.setHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER, returnType).     accessor.setLeaveMutable(true).     return accessor.getMessageHeaders(). }
