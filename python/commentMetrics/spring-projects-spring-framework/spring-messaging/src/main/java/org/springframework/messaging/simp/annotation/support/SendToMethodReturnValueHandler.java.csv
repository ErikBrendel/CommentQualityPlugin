commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure a default prefix to add to message destinations in cases where a method  * is not annotated with {@link SendTo @SendTo} or does not specify any destinations  * through the annotation's value attribute.  * <p>By default, the prefix is set to "/topic".  */ ;/**  * Configure a default prefix to add to message destinations in cases where a method  * is not annotated with {@link SendTo @SendTo} or does not specify any destinations  * through the annotation's value attribute.  * <p>By default, the prefix is set to "/topic".  */ public void setDefaultDestinationPrefix(String defaultDestinationPrefix) {     this.defaultDestinationPrefix = defaultDestinationPrefix. }
true;public;0;3;/**  * Return the configured default destination prefix.  * @see #setDefaultDestinationPrefix(String)  */ ;/**  * Return the configured default destination prefix.  * @see #setDefaultDestinationPrefix(String)  */ public String getDefaultDestinationPrefix() {     return this.defaultDestinationPrefix. }
true;public;1;3;/**  * Configure a default prefix to add to message destinations in cases where a  * method is annotated with {@link SendToUser @SendToUser} but does not specify  * any destinations through the annotation's value attribute.  * <p>By default, the prefix is set to "/queue".  */ ;/**  * Configure a default prefix to add to message destinations in cases where a  * method is annotated with {@link SendToUser @SendToUser} but does not specify  * any destinations through the annotation's value attribute.  * <p>By default, the prefix is set to "/queue".  */ public void setDefaultUserDestinationPrefix(String prefix) {     this.defaultUserDestinationPrefix = prefix. }
true;public;0;3;/**  * Return the configured default user destination prefix.  * @see #setDefaultUserDestinationPrefix(String)  */ ;/**  * Return the configured default user destination prefix.  * @see #setDefaultUserDestinationPrefix(String)  */ public String getDefaultUserDestinationPrefix() {     return this.defaultUserDestinationPrefix. }
true;public;1;3;/**  * Configure a {@link MessageHeaderInitializer} to apply to the headers of all  * messages sent to the client outbound channel.  * <p>By default this property is not set.  */ ;/**  * Configure a {@link MessageHeaderInitializer} to apply to the headers of all  * messages sent to the client outbound channel.  * <p>By default this property is not set.  */ public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {     this.headerInitializer = headerInitializer. }
true;public;0;4;/**  * Return the configured header initializer.  */ ;/**  * Return the configured header initializer.  */ @Nullable public MessageHeaderInitializer getHeaderInitializer() {     return this.headerInitializer. }
false;public;1;8;;@Override public boolean supportsReturnType(MethodParameter returnType) {     return (returnType.hasMethodAnnotation(SendTo.class) || AnnotatedElementUtils.hasAnnotation(returnType.getDeclaringClass(), SendTo.class) || returnType.hasMethodAnnotation(SendToUser.class) || AnnotatedElementUtils.hasAnnotation(returnType.getDeclaringClass(), SendToUser.class) || !this.annotationRequired). }
false;public;3;46;;@Override public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType, Message<?> message) throws Exception {     if (returnValue == null) {         return.     }     MessageHeaders headers = message.getHeaders().     String sessionId = SimpMessageHeaderAccessor.getSessionId(headers).     DestinationHelper destinationHelper = getDestinationHelper(headers, returnType).     SendToUser sendToUser = destinationHelper.getSendToUser().     if (sendToUser != null) {         boolean broadcast = sendToUser.broadcast().         String user = getUserName(message, headers).         if (user == null) {             if (sessionId == null) {                 throw new MissingSessionUserException(message).             }             user = sessionId.             broadcast = false.         }         String[] destinations = getTargetDestinations(sendToUser, message, this.defaultUserDestinationPrefix).         for (String destination : destinations) {             destination = destinationHelper.expandTemplateVars(destination).             if (broadcast) {                 this.messagingTemplate.convertAndSendToUser(user, destination, returnValue, createHeaders(null, returnType)).             } else {                 this.messagingTemplate.convertAndSendToUser(user, destination, returnValue, createHeaders(sessionId, returnType)).             }         }     }     SendTo sendTo = destinationHelper.getSendTo().     if (sendTo != null || sendToUser == null) {         String[] destinations = getTargetDestinations(sendTo, message, this.defaultDestinationPrefix).         for (String destination : destinations) {             destination = destinationHelper.expandTemplateVars(destination).             this.messagingTemplate.convertAndSend(destination, returnValue, createHeaders(sessionId, returnType)).         }     } }
false;private;2;16;;private DestinationHelper getDestinationHelper(MessageHeaders headers, MethodParameter returnType) {     SendToUser m1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendToUser.class).     SendTo m2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getExecutable(), SendTo.class).     if ((m1 != null && !ObjectUtils.isEmpty(m1.value())) || (m2 != null && !ObjectUtils.isEmpty(m2.value()))) {         return new DestinationHelper(headers, m1, m2).     }     SendToUser c1 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendToUser.class).     SendTo c2 = AnnotatedElementUtils.findMergedAnnotation(returnType.getDeclaringClass(), SendTo.class).     if ((c1 != null && !ObjectUtils.isEmpty(c1.value())) || (c2 != null && !ObjectUtils.isEmpty(c2.value()))) {         return new DestinationHelper(headers, c1, c2).     }     return (m1 != null || m2 != null ? new DestinationHelper(headers, m1, m2) : new DestinationHelper(headers, c1, c2)). }
false;protected;2;9;;@Nullable protected String getUserName(Message<?> message, MessageHeaders headers) {     Principal principal = SimpMessageHeaderAccessor.getUser(headers).     if (principal != null) {         return (principal instanceof DestinationUserNameProvider ? ((DestinationUserNameProvider) principal).getDestinationUserName() : principal.getName()).     }     return null. }
false;protected;3;17;;protected String[] getTargetDestinations(@Nullable Annotation annotation, Message<?> message, String defaultPrefix) {     if (annotation != null) {         String[] value = (String[]) AnnotationUtils.getValue(annotation).         if (!ObjectUtils.isEmpty(value)) {             return value.         }     }     String name = DestinationPatternsMessageCondition.LOOKUP_DESTINATION_HEADER.     String destination = (String) message.getHeaders().get(name).     if (!StringUtils.hasText(destination)) {         throw new IllegalStateException("No lookup destination header in " + message).     }     return (destination.startsWith("/") ? new String[] { defaultPrefix + destination } : new String[] { defaultPrefix + '/' + destination }). }
false;private;2;12;;private MessageHeaders createHeaders(@Nullable String sessionId, MethodParameter returnType) {     SimpMessageHeaderAccessor headerAccessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE).     if (getHeaderInitializer() != null) {         getHeaderInitializer().initHeaders(headerAccessor).     }     if (sessionId != null) {         headerAccessor.setSessionId(sessionId).     }     headerAccessor.setHeader(SimpMessagingTemplate.CONVERSION_HINT_HEADER, returnType).     headerAccessor.setLeaveMutable(true).     return headerAccessor.getMessageHeaders(). }
false;public;0;4;;@Override public String toString() {     return "SendToMethodReturnValueHandler [annotationRequired=" + this.annotationRequired + "]". }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, String> getTemplateVariables(MessageHeaders headers) {     String name = DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER.     return (Map<String, String>) headers.getOrDefault(name, Collections.emptyMap()). }
false;public;0;4;;@Nullable public SendTo getSendTo() {     return this.sendTo. }
false;public;0;4;;@Nullable public SendToUser getSendToUser() {     return this.sendToUser. }
false;public;1;3;;public String expandTemplateVars(String destination) {     return placeholderHelper.replacePlaceholders(destination, this.placeholderResolver). }
