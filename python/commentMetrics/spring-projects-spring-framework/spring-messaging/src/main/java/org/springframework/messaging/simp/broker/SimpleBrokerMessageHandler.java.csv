# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1428353843;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1437512314;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1463583474;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1467730834;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1469614318;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1472509879;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		Assert.notNull(heartbeat)__		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,assert,not,null,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1485810955;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		if (heartbeat == null || heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1494926542;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		if (heartbeat == null || heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1496837955;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		if (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,if,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1498780456;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		if (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,if,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(long[] heartbeat);1499872535;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(long[] heartbeat) {_		if (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,long,heartbeat,if,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1500448076;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1504267535;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1512517238;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1522103912;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1523937390;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setHeartbeatValue(@Nullable long[] heartbeat);1532402679;Configure the value for the heart-beat settings. The first number_represents how often the server will write or send a heartbeat._The second is how often the client should write. 0 means no heartbeats._<p>By default this is set to "0, 0" unless the {@link #setTaskScheduler_taskScheduler} in which case the default becomes "10000,10000"_(in milliseconds)._@since 4.2;public void setHeartbeatValue(@Nullable long[] heartbeat) {_		if (heartbeat != null && (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0)) {_			throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat))__		}_		this.heartbeatValue = heartbeat__	};configure,the,value,for,the,heart,beat,settings,the,first,number,represents,how,often,the,server,will,write,or,send,a,heartbeat,the,second,is,how,often,the,client,should,write,0,means,no,heartbeats,p,by,default,this,is,set,to,0,0,unless,the,link,set,task,scheduler,task,scheduler,in,which,case,the,default,becomes,10000,10000,in,milliseconds,since,4,2;public,void,set,heartbeat,value,nullable,long,heartbeat,if,heartbeat,null,heartbeat,length,2,heartbeat,0,0,heartbeat,1,0,throw,new,illegal,argument,exception,invalid,heart,beat,arrays,to,string,heartbeat,this,heartbeat,value,heartbeat
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1500448076;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1504267535;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1512517238;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1522103912;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1523937390;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1532402679;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__		if (taskScheduler != null && this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler,if,task,scheduler,null,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1498780456;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1499872535;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1500448076;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1504267535;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1512517238;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1522103912;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1523937390;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(@Nullable Integer cacheLimit);1532402679;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(@Nullable Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,nullable,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1405378165;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1411699723;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1413848647;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1414158498;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1417548636;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1417552010;Configure a custom SubscriptionRegistry to use for storing subscriptions.__<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1423593059;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1428353843;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1437512314;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1463583474;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1467730834;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1469614318;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1472509879;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1485810955;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1494926542;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1496837955;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1498780456;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1499872535;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1500448076;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1504267535;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1512517238;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1522103912;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1523937390;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__		initSelectorHeaderNameToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use,init,selector,header,name,to,use
SimpleBrokerMessageHandler -> public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry);1532402679;Configure a custom SubscriptionRegistry to use for storing subscriptions._<p><strong>Note</strong> that when a custom PathMatcher is configured via_{@link #setPathMatcher}, if the custom registry is not an instance of_{@link DefaultSubscriptionRegistry}, the provided PathMatcher is not used_and must be configured directly on the custom registry.;public void setSubscriptionRegistry(SubscriptionRegistry subscriptionRegistry) {_		Assert.notNull(subscriptionRegistry, "SubscriptionRegistry must not be null")__		this.subscriptionRegistry = subscriptionRegistry__		initPathMatcherToUse()__		initCacheLimitToUse()__		initSelectorHeaderNameToUse()__	};configure,a,custom,subscription,registry,to,use,for,storing,subscriptions,p,strong,note,strong,that,when,a,custom,path,matcher,is,configured,via,link,set,path,matcher,if,the,custom,registry,is,not,an,instance,of,link,default,subscription,registry,the,provided,path,matcher,is,not,used,and,must,be,configured,directly,on,the,custom,registry;public,void,set,subscription,registry,subscription,registry,subscription,registry,assert,not,null,subscription,registry,subscription,registry,must,not,be,null,this,subscription,registry,subscription,registry,init,path,matcher,to,use,init,cache,limit,to,use,init,selector,header,name,to,use
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1386365044;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1395007965;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1397429525;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1397523793;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)___		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")____		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1403856366;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404062102;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1404880799;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(destinationPrefixes)__		Assert.notNull(clientInboundChannel, "'clientInboundChannel' must not be null")__		Assert.notNull(clientOutboundChannel, "'clientOutboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__		this.brokerChannel = brokerChannel__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,destination,prefixes,assert,not,null,client,inbound,channel,client,inbound,channel,must,not,be,null,assert,not,null,client,outbound,channel,client,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel,this,broker,channel,broker,channel
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1405378164;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes.__@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {_		this(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes, null)__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,this,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,null
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411699723;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1413848647;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1414158498;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1417548636;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1417552010;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1423593059;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1428353843;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1437512314;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1463583474;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1467730834;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1469614318;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1472509879;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1485810955;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1494926542;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1496837955;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1498780456;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1499872535;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1500448076;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1504267535;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1512517238;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1522103912;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1523937390;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1532402679;Create a SimpleBrokerMessageHandler instance with the given message channels_and destination prefixes._@param clientInboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param clientOutboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public SimpleBrokerMessageHandler(SubscribableChannel clientInboundChannel, MessageChannel clientOutboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		super(clientInboundChannel, clientOutboundChannel, brokerChannel, destinationPrefixes)__		this.subscriptionRegistry = new DefaultSubscriptionRegistry()__	};create,a,simple,broker,message,handler,instance,with,the,given,message,channels,and,destination,prefixes,param,client,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,client,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,simple,broker,message,handler,subscribable,channel,client,inbound,channel,message,channel,client,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,super,client,inbound,channel,client,outbound,channel,broker,channel,destination,prefixes,this,subscription,registry,new,default,subscription,registry
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1405378165;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1411699723;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1413848647;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1414158498;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1417548636;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1417552010;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1423593059;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1428353843;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1437512314;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1463583474;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1467730834;When configured, the given PathMatcher is passed down to the_SubscriptionRegistry to use for matching destination to subscriptions.;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,subscription,registry,to,use,for,matching,destination,to,subscriptions;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1469614318;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1472509879;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1485810955;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1494926542;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(PathMatcher pathMatcher);1496837955;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setSelectorHeaderName(@Nullable String selectorHeaderName);1523937390;Configure the name of a header that a subscription message can have for_the purpose of filtering messages matched to the subscription. The header_value is expected to be a Spring EL boolean expression to be applied to_the headers of messages matched to the subscription._<p>For example:_<pre>_headers.foo == 'bar'_</pre>_<p>By default this is set to "selector". You can set it to a different_name, or to {@code null} to turn off support for a selector header._@param selectorHeaderName the name to use for a selector header_@since 4.3.17_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setSelectorHeaderName(String);public void setSelectorHeaderName(@Nullable String selectorHeaderName) {_		this.selectorHeaderName = selectorHeaderName__		initSelectorHeaderNameToUse()__	};configure,the,name,of,a,header,that,a,subscription,message,can,have,for,the,purpose,of,filtering,messages,matched,to,the,subscription,the,header,value,is,expected,to,be,a,spring,el,boolean,expression,to,be,applied,to,the,headers,of,messages,matched,to,the,subscription,p,for,example,pre,headers,foo,bar,pre,p,by,default,this,is,set,to,selector,you,can,set,it,to,a,different,name,or,to,code,null,to,turn,off,support,for,a,selector,header,param,selector,header,name,the,name,to,use,for,a,selector,header,since,4,3,17,see,set,subscription,registry,see,default,subscription,registry,set,selector,header,name,string;public,void,set,selector,header,name,nullable,string,selector,header,name,this,selector,header,name,selector,header,name,init,selector,header,name,to,use
SimpleBrokerMessageHandler -> public void setSelectorHeaderName(@Nullable String selectorHeaderName);1532402679;Configure the name of a header that a subscription message can have for_the purpose of filtering messages matched to the subscription. The header_value is expected to be a Spring EL boolean expression to be applied to_the headers of messages matched to the subscription._<p>For example:_<pre>_headers.foo == 'bar'_</pre>_<p>By default this is set to "selector". You can set it to a different_name, or to {@code null} to turn off support for a selector header._@param selectorHeaderName the name to use for a selector header_@since 4.3.17_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setSelectorHeaderName(String);public void setSelectorHeaderName(@Nullable String selectorHeaderName) {_		this.selectorHeaderName = selectorHeaderName__		initSelectorHeaderNameToUse()__	};configure,the,name,of,a,header,that,a,subscription,message,can,have,for,the,purpose,of,filtering,messages,matched,to,the,subscription,the,header,value,is,expected,to,be,a,spring,el,boolean,expression,to,be,applied,to,the,headers,of,messages,matched,to,the,subscription,p,for,example,pre,headers,foo,bar,pre,p,by,default,this,is,set,to,selector,you,can,set,it,to,a,different,name,or,to,code,null,to,turn,off,support,for,a,selector,header,param,selector,header,name,the,name,to,use,for,a,selector,header,since,4,3,17,see,set,subscription,registry,see,default,subscription,registry,set,selector,header,name,string;public,void,set,selector,header,name,nullable,string,selector,header,name,this,selector,header,name,selector,header,name,init,selector,header,name,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(Integer cacheLimit);1469614318;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(Integer cacheLimit);1472509879;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(Integer cacheLimit);1485810955;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(Integer cacheLimit);1494926542;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> public void setCacheLimit(Integer cacheLimit);1496837955;When configured, the specified cache limit is passed down to the_underlying SubscriptionRegistry, overriding any default there._<p>With a standard {@link DefaultSubscriptionRegistry}, the default_cache limit is 1024._@since 4.3.2_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setCacheLimit_@see DefaultSubscriptionRegistry#DEFAULT_CACHE_LIMIT;public void setCacheLimit(Integer cacheLimit) {_		this.cacheLimit = cacheLimit__		initCacheLimitToUse()__	};when,configured,the,specified,cache,limit,is,passed,down,to,the,underlying,subscription,registry,overriding,any,default,there,p,with,a,standard,link,default,subscription,registry,the,default,cache,limit,is,1024,since,4,3,2,see,set,subscription,registry,see,default,subscription,registry,set,cache,limit,see,default,subscription,registry;public,void,set,cache,limit,integer,cache,limit,this,cache,limit,cache,limit,init,cache,limit,to,use
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1496837955;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1498780456;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1499872535;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1500448076;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1504267535;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1512517238;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1522103912;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1523937390;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public TaskScheduler getTaskScheduler();1532402679;Return the configured TaskScheduler._@since 4.2;@Nullable_	public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;nullable,public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1428353843;The configured value for the heart-beat settings.;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1437512314;The configured value for the heart-beat settings.;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1463583474;The configured value for the heart-beat settings.;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1467730834;The configured value for the heart-beat settings.;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1469614318;The configured value for the heart-beat settings._@since 4.2;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1472509879;The configured value for the heart-beat settings._@since 4.2;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1485810955;The configured value for the heart-beat settings._@since 4.2;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public long[] getHeartbeatValue();1494926542;The configured value for the heart-beat settings._@since 4.2;public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1498780456;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1499872535;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1500448076;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1504267535;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1512517238;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1522103912;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1523937390;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1532402679;When configured, the given PathMatcher is passed down to the underlying_SubscriptionRegistry to use for matching destination to subscriptions._<p>Default is a standard {@link org.springframework.util.AntPathMatcher}._@since 4.1_@see #setSubscriptionRegistry_@see DefaultSubscriptionRegistry#setPathMatcher_@see org.springframework.util.AntPathMatcher;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		this.pathMatcher = pathMatcher__		initPathMatcherToUse()__	};when,configured,the,given,path,matcher,is,passed,down,to,the,underlying,subscription,registry,to,use,for,matching,destination,to,subscriptions,p,default,is,a,standard,link,org,springframework,util,ant,path,matcher,since,4,1,see,set,subscription,registry,see,default,subscription,registry,set,path,matcher,see,org,springframework,util,ant,path,matcher;public,void,set,path,matcher,nullable,path,matcher,path,matcher,this,path,matcher,path,matcher,init,path,matcher,to,use
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500448076;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1504267535;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1512517238;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1522103912;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1523937390;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1532402679;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397523793;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403856366;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404062102;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404880799;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1405378164;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1405378165;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1411699723;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1413848647;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1414158498;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1417548636;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1417552010;Configure a {@link MessageHeaderInitializer} to apply to the headers of all_messages sent to the client outbound channel.__<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1423593059;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1428353843;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1437512314;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1463583474;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1467730834;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1469614318;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1472509879;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1485810955;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1494926542;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496837955;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1498780456;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1499872535;Configure a {@link MessageHeaderInitializer} to apply to the headers_of all messages sent to the client outbound channel._<p>By default this property is not set._@since 4.1;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,all,messages,sent,to,the,client,outbound,channel,p,by,default,this,property,is,not,set,since,4,1;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1428353843;Return the configured TaskScheduler.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1437512314;Return the configured TaskScheduler.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1463583474;Return the configured TaskScheduler.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1467730834;Return the configured TaskScheduler.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1469614318;Return the configured TaskScheduler._@since 4.2;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1472509879;Return the configured TaskScheduler._@since 4.2;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1485810955;Return the configured TaskScheduler._@since 4.2;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> public TaskScheduler getTaskScheduler();1494926542;Return the configured TaskScheduler._@since 4.2;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};return,the,configured,task,scheduler,since,4,2;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496837955;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1498780456;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1499872535;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500448076;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1504267535;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1512517238;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1522103912;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1523937390;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1532402679;Return the configured header initializer._@since 4.1;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1397523793;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1403856366;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404062102;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1404880799;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1405378164;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1405378165;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1411699723;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1413848647;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1414158498;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1417548636;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1417552010;@return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1423593059;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1428353843;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1437512314;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1463583474;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1467730834;Return the configured header initializer.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1469614318;Return the configured header initializer._@since 4.1;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1472509879;Return the configured header initializer._@since 4.1;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1485810955;Return the configured header initializer._@since 4.1;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> public MessageHeaderInitializer getHeaderInitializer();1494926542;Return the configured header initializer._@since 4.1;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,header,initializer,since,4,1;public,message,header,initializer,get,header,initializer,return,this,header,initializer
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1496837955;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1498780456;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1499872535;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1500448076;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1504267535;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1512517238;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1522103912;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1523937390;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> @Nullable 	public long[] getHeartbeatValue();1532402679;The configured value for the heart-beat settings._@since 4.2;@Nullable_	public long[] getHeartbeatValue() {_		return this.heartbeatValue__	};the,configured,value,for,the,heart,beat,settings,since,4,2;nullable,public,long,get,heartbeat,value,return,this,heartbeat,value
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1428353843;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler)__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1437512314;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1463583474;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1467730834;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1469614318;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1472509879;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1485810955;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1494926542;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1496837955;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1498780456;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
SimpleBrokerMessageHandler -> public void setTaskScheduler(TaskScheduler taskScheduler);1499872535;Configure the {@link org.springframework.scheduling.TaskScheduler} to_use for providing heartbeat support. Setting this property also sets the_{@link #setHeartbeatValue heartbeatValue} to "10000, 10000"._<p>By default this is not set._@since 4.2;public void setTaskScheduler(TaskScheduler taskScheduler) {_		Assert.notNull(taskScheduler, "TaskScheduler must not be null")__		this.taskScheduler = taskScheduler__		if (this.heartbeatValue == null) {_			this.heartbeatValue = new long[] {10000, 10000}__		}_	};configure,the,link,org,springframework,scheduling,task,scheduler,to,use,for,providing,heartbeat,support,setting,this,property,also,sets,the,link,set,heartbeat,value,heartbeat,value,to,10000,10000,p,by,default,this,is,not,set,since,4,2;public,void,set,task,scheduler,task,scheduler,task,scheduler,assert,not,null,task,scheduler,task,scheduler,must,not,be,null,this,task,scheduler,task,scheduler,if,this,heartbeat,value,null,this,heartbeat,value,new,long,10000,10000
