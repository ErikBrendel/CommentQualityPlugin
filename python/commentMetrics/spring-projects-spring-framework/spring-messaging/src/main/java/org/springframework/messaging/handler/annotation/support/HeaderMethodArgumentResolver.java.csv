commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsParameter(MethodParameter parameter) {     return parameter.hasParameterAnnotation(Header.class). }
false;protected;1;6;;@Override protected NamedValueInfo createNamedValueInfo(MethodParameter parameter) {     Header annotation = parameter.getParameterAnnotation(Header.class).     Assert.state(annotation != null, "No Header annotation").     return new HeaderNamedValueInfo(annotation). }
false;protected;3;19;;@Override @Nullable protected Object resolveArgumentInternal(MethodParameter parameter, Message<?> message, String name) throws Exception {     Object headerValue = message.getHeaders().get(name).     Object nativeHeaderValue = getNativeHeaderValue(message, name).     if (headerValue != null && nativeHeaderValue != null) {         if (logger.isDebugEnabled()) {             logger.debug("Message headers contain two values for the same header '" + name + "', " + "one in the top level header map and a second in the nested map with native headers. " + "Using the value from top level map. " + "Use 'nativeHeader.myHeader' to resolve to the value from the nested native header map.").         }     }     return (headerValue != null ? headerValue : nativeHeaderValue). }
false;private;2;12;;@Nullable private Object getNativeHeaderValue(Message<?> message, String name) {     Map<String, List<String>> nativeHeaders = getNativeHeaders(message).     if (name.startsWith("nativeHeaders.")) {         name = name.substring("nativeHeaders.".length()).     }     if (nativeHeaders == null || !nativeHeaders.containsKey(name)) {         return null.     }     List<?> nativeHeaderValues = nativeHeaders.get(name).     return (nativeHeaderValues.size() == 1 ? nativeHeaderValues.get(0) : nativeHeaderValues). }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, List<String>> getNativeHeaders(Message<?> message) {     return (Map<String, List<String>>) message.getHeaders().get(NativeMessageHeaderAccessor.NATIVE_HEADERS). }
false;protected;3;5;;@Override protected void handleMissingValue(String headerName, MethodParameter parameter, Message<?> message) {     throw new MessageHandlingException(message, "Missing header '" + headerName + "' for method parameter type [" + parameter.getParameterType() + "]"). }
