commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure the {@link DestinationResolver} to use to resolve String destination  * names into actual destinations of type {@code <D>}.  * <p>This field does not have a default setting. If not configured, methods that  * require resolving a destination name will raise an {@link IllegalArgumentException}.  * @param destinationResolver the destination resolver to use  */ ;/**  * Configure the {@link DestinationResolver} to use to resolve String destination  * names into actual destinations of type {@code <D>}.  * <p>This field does not have a default setting. If not configured, methods that  * require resolving a destination name will raise an {@link IllegalArgumentException}.  * @param destinationResolver the destination resolver to use  */ public void setDestinationResolver(@Nullable DestinationResolver<D> destinationResolver) {     this.destinationResolver = destinationResolver. }
true;public;0;4;/**  * Return the configured destination resolver.  */ ;/**  * Return the configured destination resolver.  */ @Nullable public DestinationResolver<D> getDestinationResolver() {     return this.destinationResolver. }
false;public;2;5;;@Override public void send(String destinationName, Message<?> message) {     D destination = resolveDestination(destinationName).     doSend(destination, message). }
false;protected,final;1;5;;protected final D resolveDestination(String destinationName) {     Assert.state(this.destinationResolver != null, "DestinationResolver is required to resolve destination names").     return this.destinationResolver.resolveDestination(destinationName). }
false;public;2;4;;@Override public <T> void convertAndSend(String destinationName, T payload) {     convertAndSend(destinationName, payload, null, null). }
false;public;3;4;;@Override public <T> void convertAndSend(String destinationName, T payload, @Nullable Map<String, Object> headers) {     convertAndSend(destinationName, payload, headers, null). }
false;public;3;4;;@Override public <T> void convertAndSend(String destinationName, T payload, @Nullable MessagePostProcessor postProcessor) {     convertAndSend(destinationName, payload, null, postProcessor). }
false;public;4;7;;@Override public <T> void convertAndSend(String destinationName, T payload, @Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor) {     D destination = resolveDestination(destinationName).     super.convertAndSend(destination, payload, headers, postProcessor). }
false;public;1;6;;@Override @Nullable public Message<?> receive(String destinationName) {     D destination = resolveDestination(destinationName).     return super.receive(destination). }
false;public;2;6;;@Override @Nullable public <T> T receiveAndConvert(String destinationName, Class<T> targetClass) {     D destination = resolveDestination(destinationName).     return super.receiveAndConvert(destination, targetClass). }
false;public;2;6;;@Override @Nullable public Message<?> sendAndReceive(String destinationName, Message<?> requestMessage) {     D destination = resolveDestination(destinationName).     return super.sendAndReceive(destination, requestMessage). }
false;public;3;6;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass) {     D destination = resolveDestination(destinationName).     return super.convertSendAndReceive(destination, request, targetClass). }
false;public;4;8;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) {     D destination = resolveDestination(destinationName).     return super.convertSendAndReceive(destination, request, headers, targetClass). }
false;public;4;8;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     D destination = resolveDestination(destinationName).     return super.convertSendAndReceive(destination, request, targetClass, postProcessor). }
false;public;5;9;;@Override @Nullable public <T> T convertSendAndReceive(String destinationName, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     D destination = resolveDestination(destinationName).     return super.convertSendAndReceive(destination, request, headers, targetClass, postProcessor). }
