# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1395007965;Check whether this message handler is currently running.__<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1397429525;Check whether this message handler is currently running.__<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1400205617;Check whether this message handler is currently running.__<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1403856366;Check whether this message handler is currently running.__<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1404880799;Check whether this message handler is currently running.__<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1405696904;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1411699723;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1411701732;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1411752352;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1412377313;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1474905889;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1496837955;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1498780456;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1500448076;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1500495740;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		synchronized (this.lifecycleMonitor) {_			return this.running__		}_	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,synchronized,this,lifecycle,monitor,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1521123475;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1527126499;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1531942400;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1532402679;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1532520962;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> @Override 	public final boolean isRunning();1534414082;Check whether this message handler is currently running._<p>Note that even when this message handler is running the_{@link #isBrokerAvailable()} flag may still independently alternate between_being on and off depending on the concrete sub-class implementation.;@Override_	public final boolean isRunning() {_		return this.running__	};check,whether,this,message,handler,is,currently,running,p,note,that,even,when,this,message,handler,is,running,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation;override,public,final,boolean,is,running,return,this,running
AbstractBrokerMessageHandler -> public void setPreservePublishOrder(boolean preservePublishOrder);1532402679;Whether the client must receive messages in the order of publication._<p>By default messages sent to the {@code "clientOutboundChannel"} may_not be processed in the same order because the channel is backed by a_ThreadPoolExecutor that in turn does not guarantee processing in order._<p>When this flag is set to {@code true} messages within the same session_will be sent to the {@code "clientOutboundChannel"} one at a time in_order to preserve the order of publication. Enable this only if needed_since there is some performance overhead to keep messages in order._@param preservePublishOrder whether to publish in order_@since 5.1;public void setPreservePublishOrder(boolean preservePublishOrder) {_		OrderedMessageSender.configureOutboundChannel(this.clientOutboundChannel, preservePublishOrder)__		this.preservePublishOrder = preservePublishOrder__	};whether,the,client,must,receive,messages,in,the,order,of,publication,p,by,default,messages,sent,to,the,code,client,outbound,channel,may,not,be,processed,in,the,same,order,because,the,channel,is,backed,by,a,thread,pool,executor,that,in,turn,does,not,guarantee,processing,in,order,p,when,this,flag,is,set,to,code,true,messages,within,the,same,session,will,be,sent,to,the,code,client,outbound,channel,one,at,a,time,in,order,to,preserve,the,order,of,publication,enable,this,only,if,needed,since,there,is,some,performance,overhead,to,keep,messages,in,order,param,preserve,publish,order,whether,to,publish,in,order,since,5,1;public,void,set,preserve,publish,order,boolean,preserve,publish,order,ordered,message,sender,configure,outbound,channel,this,client,outbound,channel,preserve,publish,order,this,preserve,publish,order,preserve,publish,order
AbstractBrokerMessageHandler -> public void setPreservePublishOrder(boolean preservePublishOrder);1532520962;Whether the client must receive messages in the order of publication._<p>By default messages sent to the {@code "clientOutboundChannel"} may_not be processed in the same order because the channel is backed by a_ThreadPoolExecutor that in turn does not guarantee processing in order._<p>When this flag is set to {@code true} messages within the same session_will be sent to the {@code "clientOutboundChannel"} one at a time in_order to preserve the order of publication. Enable this only if needed_since there is some performance overhead to keep messages in order._@param preservePublishOrder whether to publish in order_@since 5.1;public void setPreservePublishOrder(boolean preservePublishOrder) {_		OrderedMessageSender.configureOutboundChannel(this.clientOutboundChannel, preservePublishOrder)__		this.preservePublishOrder = preservePublishOrder__	};whether,the,client,must,receive,messages,in,the,order,of,publication,p,by,default,messages,sent,to,the,code,client,outbound,channel,may,not,be,processed,in,the,same,order,because,the,channel,is,backed,by,a,thread,pool,executor,that,in,turn,does,not,guarantee,processing,in,order,p,when,this,flag,is,set,to,code,true,messages,within,the,same,session,will,be,sent,to,the,code,client,outbound,channel,one,at,a,time,in,order,to,preserve,the,order,of,publication,enable,this,only,if,needed,since,there,is,some,performance,overhead,to,keep,messages,in,order,param,preserve,publish,order,whether,to,publish,in,order,since,5,1;public,void,set,preserve,publish,order,boolean,preserve,publish,order,ordered,message,sender,configure,outbound,channel,this,client,outbound,channel,preserve,publish,order,this,preserve,publish,order,preserve,publish,order
AbstractBrokerMessageHandler -> public void setPreservePublishOrder(boolean preservePublishOrder);1534414082;Whether the client must receive messages in the order of publication._<p>By default messages sent to the {@code "clientOutboundChannel"} may_not be processed in the same order because the channel is backed by a_ThreadPoolExecutor that in turn does not guarantee processing in order._<p>When this flag is set to {@code true} messages within the same session_will be sent to the {@code "clientOutboundChannel"} one at a time in_order to preserve the order of publication. Enable this only if needed_since there is some performance overhead to keep messages in order._@param preservePublishOrder whether to publish in order_@since 5.1;public void setPreservePublishOrder(boolean preservePublishOrder) {_		OrderedMessageSender.configureOutboundChannel(this.clientOutboundChannel, preservePublishOrder)__		this.preservePublishOrder = preservePublishOrder__	};whether,the,client,must,receive,messages,in,the,order,of,publication,p,by,default,messages,sent,to,the,code,client,outbound,channel,may,not,be,processed,in,the,same,order,because,the,channel,is,backed,by,a,thread,pool,executor,that,in,turn,does,not,guarantee,processing,in,order,p,when,this,flag,is,set,to,code,true,messages,within,the,same,session,will,be,sent,to,the,code,client,outbound,channel,one,at,a,time,in,order,to,preserve,the,order,of,publication,enable,this,only,if,needed,since,there,is,some,performance,overhead,to,keep,messages,in,order,param,preserve,publish,order,whether,to,publish,in,order,since,5,1;public,void,set,preserve,publish,order,boolean,preserve,publish,order,ordered,message,sender,configure,outbound,channel,this,client,outbound,channel,preserve,publish,order,this,preserve,publish,order,preserve,publish,order
AbstractBrokerMessageHandler -> public boolean isPreservePublishOrder();1532402679;Whether to ensure messages are received in the order of publication._@since 5.1;public boolean isPreservePublishOrder() {_		return this.preservePublishOrder__	};whether,to,ensure,messages,are,received,in,the,order,of,publication,since,5,1;public,boolean,is,preserve,publish,order,return,this,preserve,publish,order
AbstractBrokerMessageHandler -> public boolean isPreservePublishOrder();1532520962;Whether to ensure messages are received in the order of publication._@since 5.1;public boolean isPreservePublishOrder() {_		return this.preservePublishOrder__	};whether,to,ensure,messages,are,received,in,the,order,of,publication,since,5,1;public,boolean,is,preserve,publish,order,return,this,preserve,publish,order
AbstractBrokerMessageHandler -> public boolean isPreservePublishOrder();1534414082;Whether to ensure messages are received in the order of publication._@since 5.1;public boolean isPreservePublishOrder() {_		return this.preservePublishOrder__	};whether,to,ensure,messages,are,received,in,the,order,of,publication,since,5,1;public,boolean,is,preserve,publish,order,return,this,preserve,publish,order
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1411699723;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,string,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1411701732;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,string,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1411752352;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,string,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1412377313;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.<String>emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,string,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1474905889;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1496837955;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1498780456;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1500448076;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1500495740;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1521123475;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1527126499;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1531942400;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1532402679;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1532520962;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel);1534414082;Constructor with no destination prefixes (matches all destinations)._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel) {__		this(inboundChannel, outboundChannel, brokerChannel, Collections.emptyList())__	};constructor,with,no,destination,prefixes,matches,all,destinations,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,this,inbound,channel,outbound,channel,broker,channel,collections,empty,list
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1496837955;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1498780456;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1500448076;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1500495740;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1521123475;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1527126499;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1531942400;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1532402679;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1532520962;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes);1534414082;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, @Nullable Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null ? destinationPrefixes : Collections.emptyList())__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,nullable,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> protected MessageChannel getClientOutboundChannelForSession(String sessionId);1532402679;Get the MessageChannel to use for sending messages to clients, possibly_a per-session wrapper when {@code preservePublishOrder=true}._@since 5.1;protected MessageChannel getClientOutboundChannelForSession(String sessionId) {_		return this.preservePublishOrder ?_				new OrderedMessageSender(getClientOutboundChannel(), logger) : getClientOutboundChannel()__	};get,the,message,channel,to,use,for,sending,messages,to,clients,possibly,a,per,session,wrapper,when,code,preserve,publish,order,true,since,5,1;protected,message,channel,get,client,outbound,channel,for,session,string,session,id,return,this,preserve,publish,order,new,ordered,message,sender,get,client,outbound,channel,logger,get,client,outbound,channel
AbstractBrokerMessageHandler -> protected MessageChannel getClientOutboundChannelForSession(String sessionId);1532520962;Get the MessageChannel to use for sending messages to clients, possibly_a per-session wrapper when {@code preservePublishOrder=true}._@since 5.1;protected MessageChannel getClientOutboundChannelForSession(String sessionId) {_		return this.preservePublishOrder ?_				new OrderedMessageSender(getClientOutboundChannel(), logger) : getClientOutboundChannel()__	};get,the,message,channel,to,use,for,sending,messages,to,clients,possibly,a,per,session,wrapper,when,code,preserve,publish,order,true,since,5,1;protected,message,channel,get,client,outbound,channel,for,session,string,session,id,return,this,preserve,publish,order,new,ordered,message,sender,get,client,outbound,channel,logger,get,client,outbound,channel
AbstractBrokerMessageHandler -> protected MessageChannel getClientOutboundChannelForSession(String sessionId);1534414082;Get the MessageChannel to use for sending messages to clients, possibly_a per-session wrapper when {@code preservePublishOrder=true}._@since 5.1;protected MessageChannel getClientOutboundChannelForSession(String sessionId) {_		return this.preservePublishOrder ?_				new OrderedMessageSender(getClientOutboundChannel(), logger) : getClientOutboundChannel()__	};get,the,message,channel,to,use,for,sending,messages,to,clients,possibly,a,per,session,wrapper,when,code,preserve,publish,order,true,since,5,1;protected,message,channel,get,client,outbound,channel,for,session,string,session,id,return,this,preserve,publish,order,new,ordered,message,sender,get,client,outbound,channel,logger,get,client,outbound,channel
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1395007965;Whether the message broker is currently available and able to process messages.__<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@link #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation.__<p>Application components may implement_{@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,link,org,springframework,context,application,listener,broker,availability,event,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1397429525;Whether the message broker is currently available and able to process messages.__<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@link #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation.__<p>Application components may implement_{@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,link,org,springframework,context,application,listener,broker,availability,event,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1400205617;Whether the message broker is currently available and able to process messages.__<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@link #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation.__<p>Application components may implement_{@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,link,org,springframework,context,application,listener,broker,availability,event,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1403856366;Whether the message broker is currently available and able to process messages.__<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@link #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation.__<p>Application components may implement_{@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,link,org,springframework,context,application,listener,broker,availability,event,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1404880799;Whether the message broker is currently available and able to process messages.__<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@link #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation.__<p>Application components may implement_{@link org.springframework.context.ApplicationListener<BrokerAvailabilityEvent>>}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,link,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,link,org,springframework,context,application,listener,broker,availability,event,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1405696904;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1411699723;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1411701732;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1411752352;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1412377313;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1474905889;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1496837955;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1498780456;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1500448076;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1500495740;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1521123475;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1527126499;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1531942400;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1532402679;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1532520962;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public boolean isBrokerAvailable();1534414082;Whether the message broker is currently available and able to process messages._<p>Note that this is in addition to the {@link #isRunning()} flag, which_indicates whether this message handler is running. In other words the message_handler must first be running and then the {@code #isBrokerAvailable()} flag_may still independently alternate between being on and off depending on the_concrete sub-class implementation._<p>Application components may implement_{@code org.springframework.context.ApplicationListener&lt_BrokerAvailabilityEvent&gt_}_to receive notifications when broker becomes available and unavailable.;public boolean isBrokerAvailable() {_		return this.brokerAvailable.get()__	};whether,the,message,broker,is,currently,available,and,able,to,process,messages,p,note,that,this,is,in,addition,to,the,link,is,running,flag,which,indicates,whether,this,message,handler,is,running,in,other,words,the,message,handler,must,first,be,running,and,then,the,code,is,broker,available,flag,may,still,independently,alternate,between,being,on,and,off,depending,on,the,concrete,sub,class,implementation,p,application,components,may,implement,code,org,springframework,context,application,listener,lt,broker,availability,event,gt,to,receive,notifications,when,broker,becomes,available,and,unavailable;public,boolean,is,broker,available,return,this,broker,available,get
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411699723;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList()__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,string,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411701732;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList()__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,string,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1411752352;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList()__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,string,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1412377313;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.<String>emptyList()__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,string,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
AbstractBrokerMessageHandler -> public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel, 			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes);1474905889;Constructor with destination prefixes to match to destinations of messages._@param inboundChannel the channel for receiving messages from clients (e.g. WebSocket clients)_@param outboundChannel the channel for sending messages to clients (e.g. WebSocket clients)_@param brokerChannel the channel for the application to send messages to the broker_@param destinationPrefixes prefixes to use to filter out messages;public AbstractBrokerMessageHandler(SubscribableChannel inboundChannel, MessageChannel outboundChannel,_			SubscribableChannel brokerChannel, Collection<String> destinationPrefixes) {__		Assert.notNull(inboundChannel, "'inboundChannel' must not be null")__		Assert.notNull(outboundChannel, "'outboundChannel' must not be null")__		Assert.notNull(brokerChannel, "'brokerChannel' must not be null")___		this.clientInboundChannel = inboundChannel__		this.clientOutboundChannel = outboundChannel__		this.brokerChannel = brokerChannel___		destinationPrefixes = (destinationPrefixes != null) ? destinationPrefixes : Collections.emptyList()__		this.destinationPrefixes = Collections.unmodifiableCollection(destinationPrefixes)__	};constructor,with,destination,prefixes,to,match,to,destinations,of,messages,param,inbound,channel,the,channel,for,receiving,messages,from,clients,e,g,web,socket,clients,param,outbound,channel,the,channel,for,sending,messages,to,clients,e,g,web,socket,clients,param,broker,channel,the,channel,for,the,application,to,send,messages,to,the,broker,param,destination,prefixes,prefixes,to,use,to,filter,out,messages;public,abstract,broker,message,handler,subscribable,channel,inbound,channel,message,channel,outbound,channel,subscribable,channel,broker,channel,collection,string,destination,prefixes,assert,not,null,inbound,channel,inbound,channel,must,not,be,null,assert,not,null,outbound,channel,outbound,channel,must,not,be,null,assert,not,null,broker,channel,broker,channel,must,not,be,null,this,client,inbound,channel,inbound,channel,this,client,outbound,channel,outbound,channel,this,broker,channel,broker,channel,destination,prefixes,destination,prefixes,null,destination,prefixes,collections,empty,list,this,destination,prefixes,collections,unmodifiable,collection,destination,prefixes
