# id;timestamp;commentText;codeText;commentWords;codeWords
PayloadArgumentResolver -> protected boolean isEmptyPayload(@Nullable Object payload);1495868221;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(@Nullable Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,nullable,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(@Nullable Object payload);1502974979;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(@Nullable Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,nullable,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1419854137;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1423592910;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1432933135;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1437753031;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1439394346;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1449703897;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1455836956;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1466695950;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1480370422;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1495868221;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter);1502974979;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter}._@param messageConverter the MessageConverter to use (required)_@since 4.0.9;public PayloadArgumentResolver(MessageConverter messageConverter) {_		this(messageConverter, null)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,param,message,converter,the,message,converter,to,use,required,since,4,0,9;public,payload,argument,resolver,message,converter,message,converter,this,message,converter,null
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1423592910;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1432933135;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1437753031;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1439394346;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1449703897;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1455836956;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1466695950;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1480370422;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1495868221;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected void validate(Message<?> message, MethodParameter parameter, Object target);1502974979;Validate the payload if applicable._<p>The default implementation checks for {@code @javax.validation.Valid},_Spring's {@link org.springframework.validation.annotation.Validated},_and custom annotations whose name starts with "Valid"._@param message the currently processed message_@param parameter the method parameter_@param target the target payload object_@throws MethodArgumentNotValidException in case of binding errors;protected void validate(Message<?> message, MethodParameter parameter, Object target) {_		if (this.validator == null) {_			return__		}_		for (Annotation ann : parameter.getParameterAnnotations()) {_			Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated.class)__			if (validatedAnn != null || ann.annotationType().getSimpleName().startsWith("Valid")) {_				Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(ann))__				Object[] validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] {hints})__				BeanPropertyBindingResult bindingResult =_						new BeanPropertyBindingResult(target, getParameterName(parameter))__				if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {_					((SmartValidator) this.validator).validate(target, bindingResult, validationHints)__				}_				else {_					this.validator.validate(target, bindingResult)__				}_				if (bindingResult.hasErrors()) {_					throw new MethodArgumentNotValidException(message, parameter, bindingResult)__				}_				break__			}_		}_	};validate,the,payload,if,applicable,p,the,default,implementation,checks,for,code,javax,validation,valid,spring,s,link,org,springframework,validation,annotation,validated,and,custom,annotations,whose,name,starts,with,valid,param,message,the,currently,processed,message,param,parameter,the,method,parameter,param,target,the,target,payload,object,throws,method,argument,not,valid,exception,in,case,of,binding,errors;protected,void,validate,message,message,method,parameter,parameter,object,target,if,this,validator,null,return,for,annotation,ann,parameter,get,parameter,annotations,validated,validated,ann,annotation,utils,get,annotation,ann,validated,class,if,validated,ann,null,ann,annotation,type,get,simple,name,starts,with,valid,object,hints,validated,ann,null,validated,ann,value,annotation,utils,get,value,ann,object,validation,hints,hints,instanceof,object,object,hints,new,object,hints,bean,property,binding,result,binding,result,new,bean,property,binding,result,target,get,parameter,name,parameter,if,object,utils,is,empty,validation,hints,this,validator,instanceof,smart,validator,smart,validator,this,validator,validate,target,binding,result,validation,hints,else,this,validator,validate,target,binding,result,if,binding,result,has,errors,throw,new,method,argument,not,valid,exception,message,parameter,binding,result,break
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1395348213;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return ((String) payload).trim().equals("")__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,payload,trim,equals,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1395359059;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return ((String) payload).trim().equals("")__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,payload,trim,equals,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1395406752;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return ((String) payload).trim().equals("")__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,payload,trim,equals,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1406555902;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1413848647;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1416868464;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1419854137;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1423592910;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1432933135;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1437753031;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1439394346;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1449703897;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1455836956;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1466695950;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> protected boolean isEmptyPayload(Object payload);1480370422;Specify if the given {@code payload} is empty._@param payload the payload to check (can be {@code null});protected boolean isEmptyPayload(Object payload) {_		if (payload == null) {_			return true__		}_		else if (payload instanceof byte[]) {_			return ((byte[]) payload).length == 0__		}_		else if (payload instanceof String) {_			return !StringUtils.hasText((String) payload)__		}_		else {_			return false__		}_	};specify,if,the,given,code,payload,is,empty,param,payload,the,payload,to,check,can,be,code,null;protected,boolean,is,empty,payload,object,payload,if,payload,null,return,true,else,if,payload,instanceof,byte,return,byte,payload,length,0,else,if,payload,instanceof,string,return,string,utils,has,text,string,payload,else,return,false
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator, 			boolean useDefaultResolution);1480370422;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional)_@param useDefaultResolution if "true" (the default) this resolver supports_all parameters_ if "false" then only arguments with the {@code @Payload}_annotation are supported.;public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,_			boolean useDefaultResolution) {__		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__		this.useDefaultResolution = useDefaultResolution__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional,param,use,default,resolution,if,true,the,default,this,resolver,supports,all,parameters,if,false,then,only,arguments,with,the,code,payload,annotation,are,supported;public,payload,argument,resolver,message,converter,message,converter,validator,validator,boolean,use,default,resolution,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator,this,use,default,resolution,use,default,resolution
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator, 			boolean useDefaultResolution);1495868221;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional)_@param useDefaultResolution if "true" (the default) this resolver supports_all parameters_ if "false" then only arguments with the {@code @Payload}_annotation are supported.;public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,_			boolean useDefaultResolution) {__		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__		this.useDefaultResolution = useDefaultResolution__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional,param,use,default,resolution,if,true,the,default,this,resolver,supports,all,parameters,if,false,then,only,arguments,with,the,code,payload,annotation,are,supported;public,payload,argument,resolver,message,converter,message,converter,validator,validator,boolean,use,default,resolution,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator,this,use,default,resolution,use,default,resolution
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator, 			boolean useDefaultResolution);1502974979;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional)_@param useDefaultResolution if "true" (the default) this resolver supports_all parameters_ if "false" then only arguments with the {@code @Payload}_annotation are supported.;public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator,_			boolean useDefaultResolution) {__		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__		this.useDefaultResolution = useDefaultResolution__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional,param,use,default,resolution,if,true,the,default,this,resolver,supports,all,parameters,if,false,then,only,arguments,with,the,code,payload,annotation,are,supported;public,payload,argument,resolver,message,converter,message,converter,validator,validator,boolean,use,default,resolution,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator,this,use,default,resolution,use,default,resolution
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1419854137;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1423592910;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1432933135;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1437753031;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1439394346;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1449703897;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1455836956;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1466695950;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__		this.validator = validator__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter,this,validator,validator
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1480370422;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		this(messageConverter, validator, true)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,this,message,converter,validator,true
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1495868221;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		this(messageConverter, validator, true)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,this,message,converter,validator,true
PayloadArgumentResolver -> public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator);1502974979;Create a new {@code PayloadArgumentResolver} with the given_{@link MessageConverter} and {@link Validator}._@param messageConverter the MessageConverter to use (required)_@param validator the Validator to use (optional);public PayloadArgumentResolver(MessageConverter messageConverter, Validator validator) {_		this(messageConverter, validator, true)__	};create,a,new,code,payload,argument,resolver,with,the,given,link,message,converter,and,link,validator,param,message,converter,the,message,converter,to,use,required,param,validator,the,validator,to,use,optional;public,payload,argument,resolver,message,converter,message,converter,validator,validator,this,message,converter,validator,true
PayloadArgumentResolver -> protected Object getTargetPayload(MethodParameter parameter, Message<?> message);1395348213;Return the target payload to handle for the specified message. Can either_be the payload itself if the parameter type supports it or the converted_one otherwise. While the payload of a {@link Message} cannot be null by_design, this method may return a {@code null} payload if the conversion_result is {@code null}.;protected Object getTargetPayload(MethodParameter parameter, Message<?> message) {_		Class<?> sourceClass = message.getPayload().getClass()__		Class<?> targetClass = parameter.getParameterType()__		if (ClassUtils.isAssignable(targetClass,sourceClass)) {_			return message.getPayload()__		}_		return this.converter.fromMessage(message, targetClass)__	};return,the,target,payload,to,handle,for,the,specified,message,can,either,be,the,payload,itself,if,the,parameter,type,supports,it,or,the,converted,one,otherwise,while,the,payload,of,a,link,message,cannot,be,null,by,design,this,method,may,return,a,code,null,payload,if,the,conversion,result,is,code,null;protected,object,get,target,payload,method,parameter,parameter,message,message,class,source,class,message,get,payload,get,class,class,target,class,parameter,get,parameter,type,if,class,utils,is,assignable,target,class,source,class,return,message,get,payload,return,this,converter,from,message,message,target,class
PayloadArgumentResolver -> protected Object getTargetPayload(MethodParameter parameter, Message<?> message);1395359059;Return the payload for the specified message, which can be the payload_itself if it matches the parameter type or the result of message conversion_otherwise.__<p>While the payload of a {@link Message} cannot be {@code null} by design,_this method may return {@code null} if the message converter returns that.;protected Object getTargetPayload(MethodParameter parameter, Message<?> message) {_		Class<?> sourceClass = message.getPayload().getClass()__		Class<?> targetClass = parameter.getParameterType()__		if (ClassUtils.isAssignable(targetClass,sourceClass)) {_			return message.getPayload()__		}_		return this.converter.fromMessage(message, targetClass)__	};return,the,payload,for,the,specified,message,which,can,be,the,payload,itself,if,it,matches,the,parameter,type,or,the,result,of,message,conversion,otherwise,p,while,the,payload,of,a,link,message,cannot,be,code,null,by,design,this,method,may,return,code,null,if,the,message,converter,returns,that;protected,object,get,target,payload,method,parameter,parameter,message,message,class,source,class,message,get,payload,get,class,class,target,class,parameter,get,parameter,type,if,class,utils,is,assignable,target,class,source,class,return,message,get,payload,return,this,converter,from,message,message,target,class
