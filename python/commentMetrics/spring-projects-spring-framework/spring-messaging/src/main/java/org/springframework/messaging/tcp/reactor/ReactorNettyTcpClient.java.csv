# id;timestamp;commentText;codeText;commentWords;codeWords
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1509568472;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1521764527;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1526485251;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1527795459;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1527795510;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1530174524;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1530174524;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1531942400;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1532352048;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1539116784;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally.__@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec);1542766821;Constructor with an externally created {@link TcpClient} instance whose_lifecycle is expected to be managed externally._@param tcpClient the TcpClient instance to use_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(TcpClient tcpClient, ReactorNettyCodec<P> codec) {_		Assert.notNull(tcpClient, "TcpClient is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.tcpClient = tcpClient__		this.codec = codec___		this.channelGroup = null__		this.loopResources = null__		this.poolResources = null__	};constructor,with,an,externally,created,link,tcp,client,instance,whose,lifecycle,is,expected,to,be,managed,externally,param,tcp,client,the,tcp,client,instance,to,use,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,tcp,client,tcp,client,reactor,netty,codec,p,codec,assert,not,null,tcp,client,tcp,client,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,tcp,client,tcp,client,this,codec,codec,this,channel,group,null,this,loop,resources,null,this,pool,resources,null
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1480558671;A constructor that creates a {@link TcpClient TcpClient} factory relying on_Reactor Netty TCP threads. The number of Netty threads can be tweaked with_the {@code reactor.tcp.ioThreadCount} System property. The network I/O_threads will be shared amongst the active clients._<p>Also see the constructor accepting a {@link Consumer} of_{@link ClientOptions} for additional options.__@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding messages;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};a,constructor,that,creates,a,link,tcp,client,tcp,client,factory,relying,on,reactor,netty,tcp,threads,the,number,of,netty,threads,can,be,tweaked,with,the,code,reactor,tcp,io,thread,count,system,property,the,network,i,o,threads,will,be,shared,amongst,the,active,clients,p,also,see,the,constructor,accepting,a,link,consumer,of,link,client,options,for,additional,options,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,messages;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1480900979;A constructor that creates a {@link TcpClient TcpClient} factory relying on_Reactor Netty TCP threads. The number of Netty threads can be tweaked with_the {@code reactor.tcp.ioThreadCount} System property. The network I/O_threads will be shared amongst the active clients._<p>Also see the constructor accepting a {@link Consumer} of_{@link ClientOptions} for additional options.__@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding messages;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};a,constructor,that,creates,a,link,tcp,client,tcp,client,factory,relying,on,reactor,netty,tcp,threads,the,number,of,netty,threads,can,be,tweaked,with,the,code,reactor,tcp,io,thread,count,system,property,the,network,i,o,threads,will,be,shared,amongst,the,active,clients,p,also,see,the,constructor,accepting,a,link,consumer,of,link,client,options,for,additional,options,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,messages;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1482442554;A constructor that creates a {@link TcpClient TcpClient} factory relying on_Reactor Netty TCP threads. The number of Netty threads can be tweaked with_the {@code reactor.tcp.ioThreadCount} System property. The network I/O_threads will be shared amongst the active clients._<p>Also see the constructor accepting a {@link Consumer} of_{@link ClientOptions} for additional options._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding messages;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};a,constructor,that,creates,a,link,tcp,client,tcp,client,factory,relying,on,reactor,netty,tcp,threads,the,number,of,netty,threads,can,be,tweaked,with,the,code,reactor,tcp,io,thread,count,system,property,the,network,i,o,threads,will,be,shared,amongst,the,active,clients,p,also,see,the,constructor,accepting,a,link,consumer,of,link,client,options,for,additional,options,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,messages;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1482978997;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1482978997;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1482979027;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1482979032;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1487692819;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1487713300;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1489155640;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1491927184;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1496837955;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.connect(host, port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,connect,host,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1499174789;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.host(host).port(port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1499976439;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.host(host).port(port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1504634385;Basic constructor with a host and a port.;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(opts -> opts.host(host).port(port), codec)__	};basic,constructor,with,a,host,and,a,port;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,opts,opts,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1509568472;Simple constructor with a host and a port._@param host the host to connect to_@param port the port to connect to_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(builder -> builder.host(host).port(port), codec)__	};simple,constructor,with,a,host,and,a,port,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,builder,builder,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1521764527;Simple constructor with a host and a port._@param host the host to connect to_@param port the port to connect to_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(builder -> builder.host(host).port(port), codec)__	};simple,constructor,with,a,host,and,a,port,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,builder,builder,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1526485251;Simple constructor with a host and a port._@param host the host to connect to_@param port the port to connect to_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		this(builder -> builder.host(host).port(port), codec)__	};simple,constructor,with,a,host,and,a,port,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,this,builder,builder,host,host,port,port,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1527795459;Simple constructor with a host and a port._@param host the host to connect to_@param port the port to connect to_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(port, "port is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")__		this.tcpClient = TcpClient.create(poolResources)_								.host(host)_								.port(port)_								.runOn(loopResources, false)_								.doOnConnected(c -> channelGroup.add(c.channel()))__		this.codec = codec__	};simple,constructor,with,a,host,and,a,port,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,port,port,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,pool,resources,host,host,port,port,run,on,loop,resources,false,do,on,connected,c,channel,group,add,c,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1527795510;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1530174524;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1530174524;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1531942400;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1532352048;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1539116784;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))___		this.codec = codec__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec);1542766821;Simple constructor with the host and port to use to connect to._<p>This constructor manages the lifecycle of the {@link TcpClient} and_underlying resources such as {@link ConnectionProvider},_{@link LoopResources}, and {@link ChannelGroup}._<p>For full control over the initialization and lifecycle of the_TcpClient, use {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}._@param host the host to connect to_@param port the port to connect to_@param codec for encoding and decoding the input/output byte streams_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(String host, int port, ReactorNettyCodec<P> codec) {_		Assert.notNull(host, "host is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("tcp-client-loop")__		this.poolResources = ConnectionProvider.elastic("tcp-client-pool")__		this.codec = codec___		this.tcpClient = TcpClient.create(this.poolResources)_				.host(host).port(port)_				.runOn(this.loopResources, false)_				.doOnConnected(conn -> this.channelGroup.add(conn.channel()))__	};simple,constructor,with,the,host,and,port,to,use,to,connect,to,p,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,underlying,resources,such,as,link,connection,provider,link,loop,resources,and,link,channel,group,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,use,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,host,the,host,to,connect,to,param,port,the,port,to,connect,to,param,codec,for,encoding,and,decoding,the,input,output,byte,streams,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,string,host,int,port,reactor,netty,codec,p,codec,assert,not,null,host,host,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,tcp,client,loop,this,pool,resources,connection,provider,elastic,tcp,client,pool,this,codec,codec,this,tcp,client,tcp,client,create,this,pool,resources,host,host,port,port,run,on,this,loop,resources,false,do,on,connected,conn,this,channel,group,add,conn,channel
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1482979032;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1487692819;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1487713300;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1489155640;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1491927184;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec);1496837955;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec);1482978997;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(consumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.tcpClient = TcpClient.create(consumer.andThen(opts -> opts.channelGroup(this.channelGroup)))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,consumer,reactor,netty,codec,p,codec,assert,not,null,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,tcp,client,tcp,client,create,consumer,and,then,opts,opts,channel,group,this,channel,group,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec);1482978997;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(consumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.tcpClient = TcpClient.create(consumer.andThen(opts -> opts.channelGroup(this.channelGroup)))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,consumer,reactor,netty,codec,p,codec,assert,not,null,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,tcp,client,tcp,client,create,consumer,and,then,opts,opts,channel,group,this,channel,group,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec);1482979027;Alternate constructor with a {@link ClientOptions} consumer providing_additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions> consumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(consumer, "Consumer<ClientOptions> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")__		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.tcpClient = TcpClient.create(consumer.andThen(opts -> opts.channelGroup(this.channelGroup)))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,consumer,reactor,netty,codec,p,codec,assert,not,null,consumer,consumer,client,options,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,tcp,client,tcp,client,create,consumer,and,then,opts,opts,channel,group,this,channel,group,this,codec,codec
ReactorNettyTcpClient -> public Log getLogger();1531942400;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
ReactorNettyTcpClient -> public Log getLogger();1532352048;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
ReactorNettyTcpClient -> public Log getLogger();1539116784;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
ReactorNettyTcpClient -> public Log getLogger();1542766821;Return the currently configured Logger._@since 5.1;public Log getLogger() {_		return logger__	};return,the,currently,configured,logger,since,5,1;public,log,get,logger,return,logger
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, 			ReactorNettyCodec<P> codec);1509568472;Constructor with a {@link ClientOptions.Builder} that can be used to_customize Reactor Netty client options.__<p><strong>Note: </strong> this constructor manages the lifecycle of the_{@link TcpClient} and its underlying resources. Please do not customize_any of the following options:_{@link ClientOptions.Builder#channelGroup(ChannelGroup) ChannelGroup},_{@link ClientOptions.Builder#loopResources(LoopResources) LoopResources}, and_{@link ClientOptions.Builder#poolResources(PoolResources) PoolResources}._You may set the {@link ClientOptions.Builder#disablePool() disablePool}_option if you simply want to turn off pooling.__<p>For full control over the initialization and lifecycle of the TcpClient,_see {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}.__@param optionsConsumer consumer to customize client options_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer,_			ReactorNettyCodec<P> codec) {__		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)___		Consumer<ClientOptions.Builder<?>> builtInConsumer = builder -> {__			Assert.isTrue(!builder.isLoopAvailable() && !builder.isPoolAvailable(),_					"The provided ClientOptions.Builder contains LoopResources and/or PoolResources. " +_							"Please, use the constructor that accepts a TcpClient instance " +_							"for full control over initialization and lifecycle.")___			builder.channelGroup(this.channelGroup)__			builder.preferNative(false)___			this.loopResources = LoopResources.create("tcp-client-loop")__			builder.loopResources(this.loopResources)___			if (!builder.isPoolDisabled()) {_				this.poolResources = PoolResources.fixed("tcp-client-pool")__				builder.poolResources(this.poolResources)__			}_		}___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};constructor,with,a,link,client,options,builder,that,can,be,used,to,customize,reactor,netty,client,options,p,strong,note,strong,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,its,underlying,resources,please,do,not,customize,any,of,the,following,options,link,client,options,builder,channel,group,channel,group,channel,group,link,client,options,builder,loop,resources,loop,resources,loop,resources,and,link,client,options,builder,pool,resources,pool,resources,pool,resources,you,may,set,the,link,client,options,builder,disable,pool,disable,pool,option,if,you,simply,want,to,turn,off,pooling,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,see,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,options,consumer,consumer,to,customize,client,options,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,consumer,client,options,builder,built,in,consumer,builder,assert,is,true,builder,is,loop,available,builder,is,pool,available,the,provided,client,options,builder,contains,loop,resources,and,or,pool,resources,please,use,the,constructor,that,accepts,a,tcp,client,instance,for,full,control,over,initialization,and,lifecycle,builder,channel,group,this,channel,group,builder,prefer,native,false,this,loop,resources,loop,resources,create,tcp,client,loop,builder,loop,resources,this,loop,resources,if,builder,is,pool,disabled,this,pool,resources,pool,resources,fixed,tcp,client,pool,builder,pool,resources,this,pool,resources,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, 			ReactorNettyCodec<P> codec);1521764527;Constructor with a {@link ClientOptions.Builder} that can be used to_customize Reactor Netty client options.__<p><strong>Note: </strong> this constructor manages the lifecycle of the_{@link TcpClient} and its underlying resources. Please do not customize_any of the following options:_{@link ClientOptions.Builder#channelGroup(ChannelGroup) ChannelGroup},_{@link ClientOptions.Builder#loopResources(LoopResources) LoopResources}, and_{@link ClientOptions.Builder#poolResources(PoolResources) PoolResources}._You may set the {@link ClientOptions.Builder#disablePool() disablePool}_option if you simply want to turn off pooling.__<p>For full control over the initialization and lifecycle of the TcpClient,_see {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}.__@param optionsConsumer consumer to customize client options_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer,_			ReactorNettyCodec<P> codec) {__		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)___		Consumer<ClientOptions.Builder<?>> builtInConsumer = builder -> {__			Assert.isTrue(!builder.isLoopAvailable() && !builder.isPoolAvailable(),_					"The provided ClientOptions.Builder contains LoopResources and/or PoolResources. " +_							"Please, use the constructor that accepts a TcpClient instance " +_							"for full control over initialization and lifecycle.")___			builder.channelGroup(this.channelGroup)__			builder.preferNative(false)___			this.loopResources = LoopResources.create("tcp-client-loop")__			builder.loopResources(this.loopResources)___			if (!builder.isPoolDisabled()) {_				this.poolResources = PoolResources.elastic("tcp-client-pool")__				builder.poolResources(this.poolResources)__			}_		}___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};constructor,with,a,link,client,options,builder,that,can,be,used,to,customize,reactor,netty,client,options,p,strong,note,strong,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,its,underlying,resources,please,do,not,customize,any,of,the,following,options,link,client,options,builder,channel,group,channel,group,channel,group,link,client,options,builder,loop,resources,loop,resources,loop,resources,and,link,client,options,builder,pool,resources,pool,resources,pool,resources,you,may,set,the,link,client,options,builder,disable,pool,disable,pool,option,if,you,simply,want,to,turn,off,pooling,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,see,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,options,consumer,consumer,to,customize,client,options,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,consumer,client,options,builder,built,in,consumer,builder,assert,is,true,builder,is,loop,available,builder,is,pool,available,the,provided,client,options,builder,contains,loop,resources,and,or,pool,resources,please,use,the,constructor,that,accepts,a,tcp,client,instance,for,full,control,over,initialization,and,lifecycle,builder,channel,group,this,channel,group,builder,prefer,native,false,this,loop,resources,loop,resources,create,tcp,client,loop,builder,loop,resources,this,loop,resources,if,builder,is,pool,disabled,this,pool,resources,pool,resources,elastic,tcp,client,pool,builder,pool,resources,this,pool,resources,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, 			ReactorNettyCodec<P> codec);1526485251;Constructor with a {@link ClientOptions.Builder} that can be used to_customize Reactor Netty client options.__<p><strong>Note: </strong> this constructor manages the lifecycle of the_{@link TcpClient} and its underlying resources. Please do not customize_any of the following options:_{@link ClientOptions.Builder#channelGroup(ChannelGroup) ChannelGroup},_{@link ClientOptions.Builder#loopResources(LoopResources) LoopResources}, and_{@link ClientOptions.Builder#poolResources(PoolResources) PoolResources}._You may set the {@link ClientOptions.Builder#disablePool() disablePool}_option if you simply want to turn off pooling.__<p>For full control over the initialization and lifecycle of the TcpClient,_see {@link #ReactorNettyTcpClient(TcpClient, ReactorNettyCodec)}.__@param optionsConsumer consumer to customize client options_@param codec the code to use_@see org.springframework.messaging.simp.stomp.StompReactorNettyCodec;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer,_			ReactorNettyCodec<P> codec) {__		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)___		Consumer<ClientOptions.Builder<?>> builtInConsumer = builder -> {__			Assert.isTrue(!builder.isLoopAvailable() && !builder.isPoolAvailable(),_					"The provided ClientOptions.Builder contains LoopResources and/or PoolResources. " +_							"Please, use the constructor that accepts a TcpClient instance " +_							"for full control over initialization and lifecycle.")___			builder.channelGroup(this.channelGroup)__			builder.preferNative(false)___			this.loopResources = LoopResources.create("tcp-client-loop")__			builder.loopResources(this.loopResources)___			if (!builder.isPoolDisabled()) {_				this.poolResources = PoolResources.elastic("tcp-client-pool")__				builder.poolResources(this.poolResources)__			}_		}___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};constructor,with,a,link,client,options,builder,that,can,be,used,to,customize,reactor,netty,client,options,p,strong,note,strong,this,constructor,manages,the,lifecycle,of,the,link,tcp,client,and,its,underlying,resources,please,do,not,customize,any,of,the,following,options,link,client,options,builder,channel,group,channel,group,channel,group,link,client,options,builder,loop,resources,loop,resources,loop,resources,and,link,client,options,builder,pool,resources,pool,resources,pool,resources,you,may,set,the,link,client,options,builder,disable,pool,disable,pool,option,if,you,simply,want,to,turn,off,pooling,p,for,full,control,over,the,initialization,and,lifecycle,of,the,tcp,client,see,link,reactor,netty,tcp,client,tcp,client,reactor,netty,codec,param,options,consumer,consumer,to,customize,client,options,param,codec,the,code,to,use,see,org,springframework,messaging,simp,stomp,stomp,reactor,netty,codec;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,consumer,client,options,builder,built,in,consumer,builder,assert,is,true,builder,is,loop,available,builder,is,pool,available,the,provided,client,options,builder,contains,loop,resources,and,or,pool,resources,please,use,the,constructor,that,accepts,a,tcp,client,instance,for,full,control,over,initialization,and,lifecycle,builder,channel,group,this,channel,group,builder,prefer,native,false,this,loop,resources,loop,resources,create,tcp,client,loop,builder,loop,resources,this,loop,resources,if,builder,is,pool,disabled,this,pool,resources,pool,resources,elastic,tcp,client,pool,builder,pool,resources,this,pool,resources,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<? super ClientOptions> tcpOptions, 			ReactorNettyCodec<P> codec);1480558671;A constructor with a configurator {@link Consumer} that will receive_default {@link ClientOptions} from {@link TcpClient}. This might be used_to add SSL or specific network parameters to the generated client_configuration.__@param tcpOptions callback for configuring shared {@link ClientOptions}_@param codec for encoding and decoding messages;public ReactorNettyTcpClient(Consumer<? super ClientOptions> tcpOptions,_			ReactorNettyCodec<P> codec) {__		Assert.notNull(codec, "'codec' is required")__		this.group = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.tcpClient = TcpClient.create(opts -> tcpOptions.accept(opts.channelGroup(group)))__		this.codec = codec__	};a,constructor,with,a,configurator,link,consumer,that,will,receive,default,link,client,options,from,link,tcp,client,this,might,be,used,to,add,ssl,or,specific,network,parameters,to,the,generated,client,configuration,param,tcp,options,callback,for,configuring,shared,link,client,options,param,codec,for,encoding,and,decoding,messages;public,reactor,netty,tcp,client,consumer,super,client,options,tcp,options,reactor,netty,codec,p,codec,assert,not,null,codec,codec,is,required,this,group,new,default,channel,group,immediate,event,executor,instance,this,tcp,client,tcp,client,create,opts,tcp,options,accept,opts,channel,group,group,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<? super ClientOptions> tcpOptions, 			ReactorNettyCodec<P> codec);1480900979;A constructor with a configurator {@link Consumer} that will receive_default {@link ClientOptions} from {@link TcpClient}. This might be used_to add SSL or specific network parameters to the generated client_configuration.__@param tcpOptions callback for configuring shared {@link ClientOptions}_@param codec for encoding and decoding messages;public ReactorNettyTcpClient(Consumer<? super ClientOptions> tcpOptions,_			ReactorNettyCodec<P> codec) {__		Assert.notNull(codec, "'codec' is required")__		this.group = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.tcpClient = TcpClient.create(opts -> tcpOptions.accept(opts.channelGroup(group)))__		this.codec = codec__	};a,constructor,with,a,configurator,link,consumer,that,will,receive,default,link,client,options,from,link,tcp,client,this,might,be,used,to,add,ssl,or,specific,network,parameters,to,the,generated,client,configuration,param,tcp,options,callback,for,configuring,shared,link,client,options,param,codec,for,encoding,and,decoding,messages;public,reactor,netty,tcp,client,consumer,super,client,options,tcp,options,reactor,netty,codec,p,codec,assert,not,null,codec,codec,is,required,this,group,new,default,channel,group,immediate,event,executor,instance,this,tcp,client,tcp,client,create,opts,tcp,options,accept,opts,channel,group,group,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec);1499174789;Alternate constructor with a {@link ClientOptions.Builder<?>} consumer_providing additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions.Builder<?>> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,builder,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,builder,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec);1499976439;Alternate constructor with a {@link ClientOptions.Builder<?>} consumer_providing additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions.Builder<?>> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,builder,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,builder,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec);1504634385;Alternate constructor with a {@link ClientOptions.Builder<?>} consumer_providing additional control beyond a host and a port.;public ReactorNettyTcpClient(Consumer<ClientOptions.Builder<?>> optionsConsumer, ReactorNettyCodec<P> codec) {_		Assert.notNull(optionsConsumer, "Consumer<ClientOptions.Builder<?> is required")__		Assert.notNull(codec, "ReactorNettyCodec is required")___		this.channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE)__		this.loopResources = LoopResources.create("reactor-netty-tcp-client")__		this.poolResources = PoolResources.fixed("reactor-netty-tcp-pool")___		Consumer<ClientOptions.Builder<?>> builtInConsumer = opts -> opts_				.channelGroup(this.channelGroup)_				.loopResources(this.loopResources)_				.poolResources(this.poolResources)_				.preferNative(false)___		this.tcpClient = TcpClient.create(optionsConsumer.andThen(builtInConsumer))__		this.codec = codec__	};alternate,constructor,with,a,link,client,options,builder,consumer,providing,additional,control,beyond,a,host,and,a,port;public,reactor,netty,tcp,client,consumer,client,options,builder,options,consumer,reactor,netty,codec,p,codec,assert,not,null,options,consumer,consumer,client,options,builder,is,required,assert,not,null,codec,reactor,netty,codec,is,required,this,channel,group,new,default,channel,group,immediate,event,executor,instance,this,loop,resources,loop,resources,create,reactor,netty,tcp,client,this,pool,resources,pool,resources,fixed,reactor,netty,tcp,pool,consumer,client,options,builder,built,in,consumer,opts,opts,channel,group,this,channel,group,loop,resources,this,loop,resources,pool,resources,this,pool,resources,prefer,native,false,this,tcp,client,tcp,client,create,options,consumer,and,then,built,in,consumer,this,codec,codec
ReactorNettyTcpClient -> public void setLogger(Log logger);1531942400;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
ReactorNettyTcpClient -> public void setLogger(Log logger);1532352048;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
ReactorNettyTcpClient -> public void setLogger(Log logger);1539116784;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
ReactorNettyTcpClient -> public void setLogger(Log logger);1542766821;Set an alternative logger to use than the one based on the class name._@param logger the logger to use_@since 5.1;public void setLogger(Log logger) {_		this.logger = logger__	};set,an,alternative,logger,to,use,than,the,one,based,on,the,class,name,param,logger,the,logger,to,use,since,5,1;public,void,set,logger,log,logger,this,logger,logger
