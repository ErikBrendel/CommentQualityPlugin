commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Define the rules for combining this condition with another.  * For example combining type- and method-level conditions.  * @param other the condition to combine with  * @return the resulting message condition  */ ;/**  * Define the rules for combining this condition with another.  * For example combining type- and method-level conditions.  * @param other the condition to combine with  * @return the resulting message condition  */ T combine(T other).
true;;1;2;/**  * Check if this condition matches the given Message and returns a  * potentially new condition with content tailored to the current message.  * For example a condition with destination patterns might return a new  * condition with sorted, matching patterns only.  * @return a condition instance in case of a match. or {@code null} if there is no match.  */ ;/**  * Check if this condition matches the given Message and returns a  * potentially new condition with content tailored to the current message.  * For example a condition with destination patterns might return a new  * condition with sorted, matching patterns only.  * @return a condition instance in case of a match. or {@code null} if there is no match.  */ @Nullable T getMatchingCondition(Message<?> message).
true;;2;1;/**  * Compare this condition to another in the context of a specific message.  * It is assumed both instances have been obtained via  * {@link #getMatchingCondition(Message)} to ensure they have content  * relevant to current message only.  */ ;/**  * Compare this condition to another in the context of a specific message.  * It is assumed both instances have been obtained via  * {@link #getMatchingCondition(Message)} to ensure they have content  * relevant to current message only.  */ int compareTo(T other, Message<?> message).
