commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configure the default timeout value to use for send operations.  * May be overridden for individual messages.  * @param sendTimeout the send timeout in milliseconds  * @see #setSendTimeoutHeader(String)  */ ;/**  * Configure the default timeout value to use for send operations.  * May be overridden for individual messages.  * @param sendTimeout the send timeout in milliseconds  * @see #setSendTimeoutHeader(String)  */ public void setSendTimeout(long sendTimeout) {     this.sendTimeout = sendTimeout. }
true;public;0;3;/**  * Return the configured default send operation timeout value.  */ ;/**  * Return the configured default send operation timeout value.  */ public long getSendTimeout() {     return this.sendTimeout. }
true;public;1;3;/**  * Configure the default timeout value to use for receive operations.  * May be overridden for individual messages when using sendAndReceive  * operations.  * @param receiveTimeout the receive timeout in milliseconds  * @see #setReceiveTimeoutHeader(String)  */ ;/**  * Configure the default timeout value to use for receive operations.  * May be overridden for individual messages when using sendAndReceive  * operations.  * @param receiveTimeout the receive timeout in milliseconds  * @see #setReceiveTimeoutHeader(String)  */ public void setReceiveTimeout(long receiveTimeout) {     this.receiveTimeout = receiveTimeout. }
true;public;0;3;/**  * Return the configured receive operation timeout value.  */ ;/**  * Return the configured receive operation timeout value.  */ public long getReceiveTimeout() {     return this.receiveTimeout. }
true;public;1;4;/**  * Set the name of the header used to determine the send timeout (if present).  * Default {@value #DEFAULT_SEND_TIMEOUT_HEADER}.  * <p>The header is removed before sending the message to avoid propagation.  * @since 5.0  */ ;/**  * Set the name of the header used to determine the send timeout (if present).  * Default {@value #DEFAULT_SEND_TIMEOUT_HEADER}.  * <p>The header is removed before sending the message to avoid propagation.  * @since 5.0  */ public void setSendTimeoutHeader(String sendTimeoutHeader) {     Assert.notNull(sendTimeoutHeader, "'sendTimeoutHeader' cannot be null").     this.sendTimeoutHeader = sendTimeoutHeader. }
true;public;0;3;/**  * Return the configured send-timeout header.  * @since 5.0  */ ;/**  * Return the configured send-timeout header.  * @since 5.0  */ public String getSendTimeoutHeader() {     return this.sendTimeoutHeader. }
true;public;1;4;/**  * Set the name of the header used to determine the send timeout (if present).  * Default {@value #DEFAULT_RECEIVE_TIMEOUT_HEADER}.  * The header is removed before sending the message to avoid propagation.  * @since 5.0  */ ;/**  * Set the name of the header used to determine the send timeout (if present).  * Default {@value #DEFAULT_RECEIVE_TIMEOUT_HEADER}.  * The header is removed before sending the message to avoid propagation.  * @since 5.0  */ public void setReceiveTimeoutHeader(String receiveTimeoutHeader) {     Assert.notNull(receiveTimeoutHeader, "'receiveTimeoutHeader' cannot be null").     this.receiveTimeoutHeader = receiveTimeoutHeader. }
true;public;0;3;/**  * Return the configured receive-timeout header.  * @since 5.0  */ ;/**  * Return the configured receive-timeout header.  * @since 5.0  */ public String getReceiveTimeoutHeader() {     return this.receiveTimeoutHeader. }
true;public;1;3;/**  * Whether the thread sending a reply should have an exception raised if the  * receiving thread isn't going to receive the reply either because it timed out,  * or because it already received a reply, or because it got an exception while  * sending the request message.  * <p>The default value is {@code false} in which case only a WARN message is logged.  * If set to {@code true} a {@link MessageDeliveryException} is raised in addition  * to the log message.  * @param throwExceptionOnLateReply whether to throw an exception or not  */ ;/**  * Whether the thread sending a reply should have an exception raised if the  * receiving thread isn't going to receive the reply either because it timed out,  * or because it already received a reply, or because it got an exception while  * sending the request message.  * <p>The default value is {@code false} in which case only a WARN message is logged.  * If set to {@code true} a {@link MessageDeliveryException} is raised in addition  * to the log message.  * @param throwExceptionOnLateReply whether to throw an exception or not  */ public void setThrowExceptionOnLateReply(boolean throwExceptionOnLateReply) {     this.throwExceptionOnLateReply = throwExceptionOnLateReply. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     setDestinationResolver(new BeanFactoryMessageChannelDestinationResolver(beanFactory)). }
false;protected,final;2;4;;@Override protected final void doSend(MessageChannel channel, Message<?> message) {     doSend(channel, message, sendTimeout(message)). }
false;protected,final;3;25;;protected final void doSend(MessageChannel channel, Message<?> message, long timeout) {     Assert.notNull(channel, "MessageChannel is required").     Message<?> messageToSend = message.     MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class).     if (accessor != null && accessor.isMutable()) {         accessor.removeHeader(this.sendTimeoutHeader).         accessor.removeHeader(this.receiveTimeoutHeader).         accessor.setImmutable().     } else if (message.getHeaders().containsKey(this.sendTimeoutHeader) || message.getHeaders().containsKey(this.receiveTimeoutHeader)) {         messageToSend = MessageBuilder.fromMessage(message).setHeader(this.sendTimeoutHeader, null).setHeader(this.receiveTimeoutHeader, null).build().     }     boolean sent = (timeout >= 0 ? channel.send(messageToSend, timeout) : channel.send(messageToSend)).     if (!sent) {         throw new MessageDeliveryException(message, "Failed to send message to channel '" + channel + "' within timeout: " + timeout).     } }
false;protected,final;1;5;;@Override @Nullable protected final Message<?> doReceive(MessageChannel channel) {     return doReceive(channel, this.receiveTimeout). }
false;protected,final;2;14;;@Nullable protected final Message<?> doReceive(MessageChannel channel, long timeout) {     Assert.notNull(channel, "MessageChannel is required").     Assert.state(channel instanceof PollableChannel, "A PollableChannel is required to receive messages").     Message<?> message = (timeout >= 0 ? ((PollableChannel) channel).receive(timeout) : ((PollableChannel) channel).receive()).     if (message == null && logger.isTraceEnabled()) {         logger.trace("Failed to receive message from channel '" + channel + "' within timeout: " + timeout).     }     return message. }
false;protected,final;2;34;;@Override @Nullable protected final Message<?> doSendAndReceive(MessageChannel channel, Message<?> requestMessage) {     Assert.notNull(channel, "'channel' is required").     Object originalReplyChannelHeader = requestMessage.getHeaders().getReplyChannel().     Object originalErrorChannelHeader = requestMessage.getHeaders().getErrorChannel().     long sendTimeout = sendTimeout(requestMessage).     long receiveTimeout = receiveTimeout(requestMessage).     TemporaryReplyChannel tempReplyChannel = new TemporaryReplyChannel(this.throwExceptionOnLateReply).     requestMessage = MessageBuilder.fromMessage(requestMessage).setReplyChannel(tempReplyChannel).setHeader(this.sendTimeoutHeader, null).setHeader(this.receiveTimeoutHeader, null).setErrorChannel(tempReplyChannel).build().     try {         doSend(channel, requestMessage, sendTimeout).     } catch (RuntimeException ex) {         tempReplyChannel.setSendFailed(true).         throw ex.     }     Message<?> replyMessage = this.doReceive(tempReplyChannel, receiveTimeout).     if (replyMessage != null) {         replyMessage = MessageBuilder.fromMessage(replyMessage).setHeader(MessageHeaders.REPLY_CHANNEL, originalReplyChannelHeader).setHeader(MessageHeaders.ERROR_CHANNEL, originalErrorChannelHeader).build().     }     return replyMessage. }
false;private;1;4;;private long sendTimeout(Message<?> requestMessage) {     Long sendTimeout = headerToLong(requestMessage.getHeaders().get(this.sendTimeoutHeader)).     return (sendTimeout != null ? sendTimeout : this.sendTimeout). }
false;private;1;4;;private long receiveTimeout(Message<?> requestMessage) {     Long receiveTimeout = headerToLong(requestMessage.getHeaders().get(this.receiveTimeoutHeader)).     return (receiveTimeout != null ? receiveTimeout : this.receiveTimeout). }
false;private;1;12;;@Nullable private Long headerToLong(@Nullable Object headerValue) {     if (headerValue instanceof Number) {         return ((Number) headerValue).longValue().     } else if (headerValue instanceof String) {         return Long.parseLong((String) headerValue).     } else {         return null.     } }
false;public;1;3;;public void setSendFailed(boolean hasSendError) {     this.hasSendFailed = hasSendError. }
false;public;0;5;;@Override @Nullable public Message<?> receive() {     return this.receive(-1). }
false;public;1;22;;@Override @Nullable public Message<?> receive(long timeout) {     try {         if (timeout < 0) {             this.replyLatch.await().             this.hasReceived = true.         } else {             if (this.replyLatch.await(timeout, TimeUnit.MILLISECONDS)) {                 this.hasReceived = true.             } else {                 this.hasTimedOut = true.             }         }     } catch (InterruptedException ex) {         Thread.currentThread().interrupt().     }     return this.replyMessage. }
false;public;1;4;;@Override public boolean send(Message<?> message) {     return this.send(message, -1). }
false;public;2;29;;@Override public boolean send(Message<?> message, long timeout) {     this.replyMessage = message.     boolean alreadyReceivedReply = this.hasReceived.     this.replyLatch.countDown().     String errorDescription = null.     if (this.hasTimedOut) {         errorDescription = "Reply message received but the receiving thread has exited due to a timeout".     } else if (alreadyReceivedReply) {         errorDescription = "Reply message received but the receiving thread has already received a reply".     } else if (this.hasSendFailed) {         errorDescription = "Reply message received but the receiving thread has exited due to " + "an exception while sending the request message".     }     if (errorDescription != null) {         if (logger.isWarnEnabled()) {             logger.warn(errorDescription + ": " + message).         }         if (this.throwExceptionOnLateReply) {             throw new MessageDeliveryException(message, errorDescription).         }     }     return true. }
