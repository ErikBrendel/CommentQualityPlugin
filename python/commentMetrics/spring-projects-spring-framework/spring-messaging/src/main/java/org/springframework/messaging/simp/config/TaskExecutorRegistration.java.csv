commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the core pool size of the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> The core pool size is effectively the max pool size  * when an unbounded {@link #queueCapacity(int) queueCapacity} is configured  * (the default). This is essentially the "Unbounded queues" strategy as explained  * in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When  * this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.  * <p>By default this is set to twice the value of  * {@link Runtime#availableProcessors()}. In an application where tasks do not  * block frequently, the number should be closer to or equal to the number of  * available CPUs/cores.  */ ;/**  * Set the core pool size of the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> The core pool size is effectively the max pool size  * when an unbounded {@link #queueCapacity(int) queueCapacity} is configured  * (the default). This is essentially the "Unbounded queues" strategy as explained  * in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When  * this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.  * <p>By default this is set to twice the value of  * {@link Runtime#availableProcessors()}. In an application where tasks do not  * block frequently, the number should be closer to or equal to the number of  * available CPUs/cores.  */ public TaskExecutorRegistration corePoolSize(int corePoolSize) {     this.corePoolSize = corePoolSize.     return this. }
true;public;1;4;/**  * Set the max pool size of the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> When an unbounded  * {@link #queueCapacity(int) queueCapacity} is configured (the default), the  * max pool size is effectively ignored. See the "Unbounded queues" strategy  * in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for  * more details.  * <p>By default this is set to {@code Integer.MAX_VALUE}.  */ ;/**  * Set the max pool size of the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> When an unbounded  * {@link #queueCapacity(int) queueCapacity} is configured (the default), the  * max pool size is effectively ignored. See the "Unbounded queues" strategy  * in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for  * more details.  * <p>By default this is set to {@code Integer.MAX_VALUE}.  */ public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {     this.maxPoolSize = maxPoolSize.     return this. }
true;public;1;4;/**  * Set the time limit for which threads may remain idle before being terminated.  * If there are more than the core number of threads currently in the pool,  * after waiting this amount of time without processing a task, excess threads  * will be terminated. This overrides any value set in the constructor.  * <p>By default this is set to 60.  */ ;/**  * Set the time limit for which threads may remain idle before being terminated.  * If there are more than the core number of threads currently in the pool,  * after waiting this amount of time without processing a task, excess threads  * will be terminated. This overrides any value set in the constructor.  * <p>By default this is set to 60.  */ public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {     this.keepAliveSeconds = keepAliveSeconds.     return this. }
true;public;1;4;/**  * Set the queue capacity for the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured  * (the default), the core pool size is effectively the max pool size. This is  * essentially the "Unbounded queues" strategy as explained in  * {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When  * this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.  * <p>By default this is set to {@code Integer.MAX_VALUE}.  */ ;/**  * Set the queue capacity for the ThreadPoolExecutor.  * <p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured  * (the default), the core pool size is effectively the max pool size. This is  * essentially the "Unbounded queues" strategy as explained in  * {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When  * this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.  * <p>By default this is set to {@code Integer.MAX_VALUE}.  */ public TaskExecutorRegistration queueCapacity(int queueCapacity) {     this.queueCapacity = queueCapacity.     return this. }
false;protected;0;15;;protected ThreadPoolTaskExecutor getTaskExecutor() {     if (this.corePoolSize != null) {         this.taskExecutor.setCorePoolSize(this.corePoolSize).     }     if (this.maxPoolSize != null) {         this.taskExecutor.setMaxPoolSize(this.maxPoolSize).     }     if (this.keepAliveSeconds != null) {         this.taskExecutor.setKeepAliveSeconds(this.keepAliveSeconds).     }     if (this.queueCapacity != null) {         this.taskExecutor.setQueueCapacity(this.queueCapacity).     }     return this.taskExecutor. }
