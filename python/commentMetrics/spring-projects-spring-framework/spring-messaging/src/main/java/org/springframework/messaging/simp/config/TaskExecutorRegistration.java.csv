# id;timestamp;commentText;codeText;commentWords;codeWords
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1385502674;Set the capacity for the ThreadPoolExecutor's BlockingQueue._Default is {@code Integer.MAX_VALUE}._<p>Any positive value will lead to a LinkedBlockingQueue instance__any other value will lead to a SynchronousQueue instance._@see java.util.concurrent.LinkedBlockingQueue_@see java.util.concurrent.SynchronousQueue;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,capacity,for,the,thread,pool,executor,s,blocking,queue,default,is,code,integer,p,any,positive,value,will,lead,to,a,linked,blocking,queue,instance,any,other,value,will,lead,to,a,synchronous,queue,instance,see,java,util,concurrent,linked,blocking,queue,see,java,util,concurrent,synchronous,queue;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1395290737;Set the queue capacity for the ThreadPoolExecutor.__<p><strong>NOTE:</strong> when an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default) the_core pool size is effectively the max pool size. This is essentially the_"Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.__<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1411601340;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1412046160;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1413848647;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1461047077;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1498780456;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration queueCapacity(int queueCapacity);1505821663;Set the queue capacity for the ThreadPoolExecutor._<p><strong>NOTE:</strong> when an unbounded {@code queueCapacity} is configured_(the default), the core pool size is effectively the max pool size. This is_essentially the "Unbounded queues" strategy as explained in_{@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration queueCapacity(int queueCapacity) {_		this.queueCapacity = queueCapacity__		return this__	};set,the,queue,capacity,for,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,code,queue,capacity,is,configured,the,default,the,core,pool,size,is,effectively,the,max,pool,size,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,queue,capacity,int,queue,capacity,this,queue,capacity,queue,capacity,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1385502674;Set the ThreadPoolExecutor's maximum pool size._Default is {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,thread,pool,executor,s,maximum,pool,size,default,is,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1395290737;Set the max pool size of the ThreadPoolExecutor.__<p><strong>NOTE:</strong> when an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details.__<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1411601340;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1412046160;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1413848647;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1461047077;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1498780456;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration maxPoolSize(int maxPoolSize);1505821663;Set the max pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> When an unbounded_{@link #queueCapacity(int) queueCapacity} is configured (the default), the_max pool size is effectively ignored. See the "Unbounded queues" strategy_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor} for_more details._<p>By default this is set to {@code Integer.MAX_VALUE}.;public TaskExecutorRegistration maxPoolSize(int maxPoolSize) {_		this.maxPoolSize = maxPoolSize__		return this__	};set,the,max,pool,size,of,the,thread,pool,executor,p,strong,note,strong,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,the,max,pool,size,is,effectively,ignored,see,the,unbounded,queues,strategy,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,for,more,details,p,by,default,this,is,set,to,code,integer;public,task,executor,registration,max,pool,size,int,max,pool,size,this,max,pool,size,max,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1385502674;Set the ThreadPoolExecutor's core pool size._Default is 1.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,thread,pool,executor,s,core,pool,size,default,is,1;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1395290737;Set the core pool size of the ThreadPoolExecutor.__<p><strong>NOTE:</strong> the core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored.__<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1411601340;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1412046160;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1413848647;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1461047077;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1498780456;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration corePoolSize(int corePoolSize);1505821663;Set the core pool size of the ThreadPoolExecutor._<p><strong>NOTE:</strong> The core pool size is effectively the max pool size_when an unbounded {@link #queueCapacity(int) queueCapacity} is configured_(the default). This is essentially the "Unbounded queues" strategy as explained_in {@link java.util.concurrent.ThreadPoolExecutor ThreadPoolExecutor}. When_this strategy is used, the {@link #maxPoolSize(int) maxPoolSize} is ignored._<p>By default this is set to twice the value of_{@link Runtime#availableProcessors()}. In an application where tasks do not_block frequently, the number should be closer to or equal to the number of_available CPUs/cores.;public TaskExecutorRegistration corePoolSize(int corePoolSize) {_		this.corePoolSize = corePoolSize__		return this__	};set,the,core,pool,size,of,the,thread,pool,executor,p,strong,note,strong,the,core,pool,size,is,effectively,the,max,pool,size,when,an,unbounded,link,queue,capacity,int,queue,capacity,is,configured,the,default,this,is,essentially,the,unbounded,queues,strategy,as,explained,in,link,java,util,concurrent,thread,pool,executor,thread,pool,executor,when,this,strategy,is,used,the,link,max,pool,size,int,max,pool,size,is,ignored,p,by,default,this,is,set,to,twice,the,value,of,link,runtime,available,processors,in,an,application,where,tasks,do,not,block,frequently,the,number,should,be,closer,to,or,equal,to,the,number,of,available,cpus,cores;public,task,executor,registration,core,pool,size,int,core,pool,size,this,core,pool,size,core,pool,size,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1385502674;Set the ThreadPoolExecutor's keep-alive seconds._Default is 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,thread,pool,executor,s,keep,alive,seconds,default,is,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1395290737;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated.  This overrides any value set in the constructor.__<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1411601340;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1412046160;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1413848647;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1461047077;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1498780456;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
TaskExecutorRegistration -> public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds);1505821663;Set the time limit for which threads may remain idle before being terminated._If there are more than the core number of threads currently in the pool,_after waiting this amount of time without processing a task, excess threads_will be terminated. This overrides any value set in the constructor._<p>By default this is set to 60.;public TaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds) {_		this.keepAliveSeconds = keepAliveSeconds__		return this__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,if,there,are,more,than,the,core,number,of,threads,currently,in,the,pool,after,waiting,this,amount,of,time,without,processing,a,task,excess,threads,will,be,terminated,this,overrides,any,value,set,in,the,constructor,p,by,default,this,is,set,to,60;public,task,executor,registration,keep,alive,seconds,int,keep,alive,seconds,this,keep,alive,seconds,keep,alive,seconds,return,this
