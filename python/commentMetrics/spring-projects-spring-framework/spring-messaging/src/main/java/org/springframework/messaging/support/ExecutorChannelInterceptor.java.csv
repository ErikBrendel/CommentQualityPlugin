# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutorChannelInterceptor -> @Nullable 	Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;1495868221;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked._@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};@Nullable_	Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;nullable,message,before,handle,message,message,message,channel,channel,message,handler,handler
ExecutorChannelInterceptor -> @Nullable 	Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;1496837955;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked._@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};@Nullable_	Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;nullable,message,before,handle,message,message,message,channel,channel,message,handler,handler
ExecutorChannelInterceptor -> Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;1405025734;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked.__@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;message,before,handle,message,message,message,channel,channel,message,handler,handler
ExecutorChannelInterceptor -> Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;1408751872;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked._@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler)_;invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;message,before,handle,message,message,message,channel,channel,message,handler,handler
ExecutorChannelInterceptor -> default void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, 			@Nullable Exception ex);1532402679;Invoked inside the {@link Runnable} submitted to the Executor after calling_the target MessageHandler regardless of the outcome (i.e. Exception raised_or not) thus allowing for proper resource cleanup._<p>Note that this will be invoked only if beforeHandle successfully completed_and returned a Message, i.e. it did not return {@code null}._@param message the message handled_@param channel the channel on which the message was sent to_@param handler the target handler that handled the message_@param ex any exception that may been raised by the handler;default void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler,_			@Nullable Exception ex) {_	};invoked,inside,the,link,runnable,submitted,to,the,executor,after,calling,the,target,message,handler,regardless,of,the,outcome,i,e,exception,raised,or,not,thus,allowing,for,proper,resource,cleanup,p,note,that,this,will,be,invoked,only,if,before,handle,successfully,completed,and,returned,a,message,i,e,it,did,not,return,code,null,param,message,the,message,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,that,handled,the,message,param,ex,any,exception,that,may,been,raised,by,the,handler;default,void,after,message,handled,message,message,message,channel,channel,message,handler,handler,nullable,exception,ex
ExecutorChannelInterceptor -> default void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, 			@Nullable Exception ex);1532461483;Invoked inside the {@link Runnable} submitted to the Executor after calling_the target MessageHandler regardless of the outcome (i.e. Exception raised_or not) thus allowing for proper resource cleanup._<p>Note that this will be invoked only if beforeHandle successfully completed_and returned a Message, i.e. it did not return {@code null}._@param message the message handled_@param channel the channel on which the message was sent to_@param handler the target handler that handled the message_@param ex any exception that may been raised by the handler;default void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler,_			@Nullable Exception ex) {_	};invoked,inside,the,link,runnable,submitted,to,the,executor,after,calling,the,target,message,handler,regardless,of,the,outcome,i,e,exception,raised,or,not,thus,allowing,for,proper,resource,cleanup,p,note,that,this,will,be,invoked,only,if,before,handle,successfully,completed,and,returned,a,message,i,e,it,did,not,return,code,null,param,message,the,message,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,that,handled,the,message,param,ex,any,exception,that,may,been,raised,by,the,handler;default,void,after,message,handled,message,message,message,channel,channel,message,handler,handler,nullable,exception,ex
ExecutorChannelInterceptor -> void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;1405025734;Invoked inside the {@link Runnable} submitted to the Executor after calling_the target MessageHandler regardless of the outcome (i.e. Exception raised_or not) thus allowing for proper resource cleanup.__<p>Note that this will be invoked only if beforeHandle successfully completed_and returned a Message, i.e. it did not return {@code null}.__@param message the message handled_@param channel the channel on which the message was sent to_@param handler the target handler that handled the message_@param ex any exception that may been raised by the handler;void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;invoked,inside,the,link,runnable,submitted,to,the,executor,after,calling,the,target,message,handler,regardless,of,the,outcome,i,e,exception,raised,or,not,thus,allowing,for,proper,resource,cleanup,p,note,that,this,will,be,invoked,only,if,before,handle,successfully,completed,and,returned,a,message,i,e,it,did,not,return,code,null,param,message,the,message,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,that,handled,the,message,param,ex,any,exception,that,may,been,raised,by,the,handler;void,after,message,handled,message,message,message,channel,channel,message,handler,handler,exception,ex
ExecutorChannelInterceptor -> void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;1408751872;Invoked inside the {@link Runnable} submitted to the Executor after calling_the target MessageHandler regardless of the outcome (i.e. Exception raised_or not) thus allowing for proper resource cleanup._<p>Note that this will be invoked only if beforeHandle successfully completed_and returned a Message, i.e. it did not return {@code null}._@param message the message handled_@param channel the channel on which the message was sent to_@param handler the target handler that handled the message_@param ex any exception that may been raised by the handler;void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;invoked,inside,the,link,runnable,submitted,to,the,executor,after,calling,the,target,message,handler,regardless,of,the,outcome,i,e,exception,raised,or,not,thus,allowing,for,proper,resource,cleanup,p,note,that,this,will,be,invoked,only,if,before,handle,successfully,completed,and,returned,a,message,i,e,it,did,not,return,code,null,param,message,the,message,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,that,handled,the,message,param,ex,any,exception,that,may,been,raised,by,the,handler;void,after,message,handled,message,message,message,channel,channel,message,handler,handler,exception,ex
ExecutorChannelInterceptor -> void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;1495868221;Invoked inside the {@link Runnable} submitted to the Executor after calling_the target MessageHandler regardless of the outcome (i.e. Exception raised_or not) thus allowing for proper resource cleanup._<p>Note that this will be invoked only if beforeHandle successfully completed_and returned a Message, i.e. it did not return {@code null}._@param message the message handled_@param channel the channel on which the message was sent to_@param handler the target handler that handled the message_@param ex any exception that may been raised by the handler;void afterMessageHandled(Message<?> message, MessageChannel channel, MessageHandler handler, Exception ex)_;invoked,inside,the,link,runnable,submitted,to,the,executor,after,calling,the,target,message,handler,regardless,of,the,outcome,i,e,exception,raised,or,not,thus,allowing,for,proper,resource,cleanup,p,note,that,this,will,be,invoked,only,if,before,handle,successfully,completed,and,returned,a,message,i,e,it,did,not,return,code,null,param,message,the,message,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,that,handled,the,message,param,ex,any,exception,that,may,been,raised,by,the,handler;void,after,message,handled,message,message,message,channel,channel,message,handler,handler,exception,ex
ExecutorChannelInterceptor -> @Nullable 	default Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler);1532402679;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked._@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};@Nullable_	default Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {_		return message__	};invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;nullable,default,message,before,handle,message,message,message,channel,channel,message,handler,handler,return,message
ExecutorChannelInterceptor -> @Nullable 	default Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler);1532461483;Invoked inside the {@link Runnable} submitted to the Executor just before_calling the target MessageHandler to handle the message. Allows for_modification of the Message if necessary or when {@code null} is returned_the MessageHandler is not invoked._@param message the message to be handled_@param channel the channel on which the message was sent to_@param handler the target handler to handle the message_@return the input message, or a new instance, or {@code null};@Nullable_	default Message<?> beforeHandle(Message<?> message, MessageChannel channel, MessageHandler handler) {_		return message__	};invoked,inside,the,link,runnable,submitted,to,the,executor,just,before,calling,the,target,message,handler,to,handle,the,message,allows,for,modification,of,the,message,if,necessary,or,when,code,null,is,returned,the,message,handler,is,not,invoked,param,message,the,message,to,be,handled,param,channel,the,channel,on,which,the,message,was,sent,to,param,handler,the,target,handler,to,handle,the,message,return,the,input,message,or,a,new,instance,or,code,null;nullable,default,message,before,handle,message,message,message,channel,channel,message,handler,handler,return,message
