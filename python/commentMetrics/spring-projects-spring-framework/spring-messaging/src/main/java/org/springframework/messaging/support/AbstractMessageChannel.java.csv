commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set an alternative logger to use than the one based on the class name.  * @param logger the logger to use  * @since 5.1  */ ;/**  * Set an alternative logger to use than the one based on the class name.  * @param logger the logger to use  * @since 5.1  */ public void setLogger(Log logger) {     this.logger = logger. }
true;public;0;3;/**  * Return the currently configured Logger.  * @since 5.1  */ ;/**  * Return the currently configured Logger.  * @since 5.1  */ public Log getLogger() {     return logger. }
true;public;1;4;/**  * A message channel uses the bean name primarily for logging purposes.  */ ;/**  * A message channel uses the bean name primarily for logging purposes.  */ @Override public void setBeanName(String name) {     this.beanName = name. }
true;public;0;3;/**  * Return the bean name for this message channel.  */ ;/**  * Return the bean name for this message channel.  */ public String getBeanName() {     return this.beanName. }
false;public;1;5;;@Override public void setInterceptors(List<ChannelInterceptor> interceptors) {     this.interceptors.clear().     this.interceptors.addAll(interceptors). }
false;public;1;4;;@Override public void addInterceptor(ChannelInterceptor interceptor) {     this.interceptors.add(interceptor). }
false;public;2;4;;@Override public void addInterceptor(int index, ChannelInterceptor interceptor) {     this.interceptors.add(index, interceptor). }
false;public;0;4;;@Override public List<ChannelInterceptor> getInterceptors() {     return Collections.unmodifiableList(this.interceptors). }
false;public;1;4;;@Override public boolean removeInterceptor(ChannelInterceptor interceptor) {     return this.interceptors.remove(interceptor). }
false;public;1;4;;@Override public ChannelInterceptor removeInterceptor(int index) {     return this.interceptors.remove(index). }
false;public,final;1;4;;@Override public final boolean send(Message<?> message) {     return send(message, INDEFINITE_TIMEOUT). }
false;public,final;2;30;;@Override public final boolean send(Message<?> message, long timeout) {     Assert.notNull(message, "Message must not be null").     Message<?> messageToUse = message.     ChannelInterceptorChain chain = new ChannelInterceptorChain().     boolean sent = false.     try {         messageToUse = chain.applyPreSend(messageToUse, this).         if (messageToUse == null) {             return false.         }         sent = sendInternal(messageToUse, timeout).         chain.applyPostSend(messageToUse, this, sent).         chain.triggerAfterSendCompletion(messageToUse, this, sent, null).         return sent.     } catch (Exception ex) {         chain.triggerAfterSendCompletion(messageToUse, this, sent, ex).         if (ex instanceof MessagingException) {             throw (MessagingException) ex.         }         throw new MessageDeliveryException(messageToUse, "Failed to send message to " + this, ex).     } catch (Throwable err) {         MessageDeliveryException ex2 = new MessageDeliveryException(messageToUse, "Failed to send message to " + this, err).         chain.triggerAfterSendCompletion(messageToUse, this, sent, ex2).         throw ex2.     } }
false;protected,abstract;2;1;;protected abstract boolean sendInternal(Message<?> message, long timeout).
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + "[" + this.beanName + "]". }
false;public;2;18;;@Nullable public Message<?> applyPreSend(Message<?> message, MessageChannel channel) {     Message<?> messageToUse = message.     for (ChannelInterceptor interceptor : interceptors) {         Message<?> resolvedMessage = interceptor.preSend(messageToUse, channel).         if (resolvedMessage == null) {             String name = interceptor.getClass().getSimpleName().             if (logger.isDebugEnabled()) {                 logger.debug(name + " returned null from preSend, i.e. precluding the send.").             }             triggerAfterSendCompletion(messageToUse, channel, false, null).             return null.         }         messageToUse = resolvedMessage.         this.sendInterceptorIndex++.     }     return messageToUse. }
false;public;3;5;;public void applyPostSend(Message<?> message, MessageChannel channel, boolean sent) {     for (ChannelInterceptor interceptor : interceptors) {         interceptor.postSend(message, channel, sent).     } }
false;public;4;13;;public void triggerAfterSendCompletion(Message<?> message, MessageChannel channel, boolean sent, @Nullable Exception ex) {     for (int i = this.sendInterceptorIndex. i >= 0. i--) {         ChannelInterceptor interceptor = interceptors.get(i).         try {             interceptor.afterSendCompletion(message, channel, sent, ex).         } catch (Throwable ex2) {             logger.error("Exception from afterSendCompletion in " + interceptor, ex2).         }     } }
false;public;1;10;;public boolean applyPreReceive(MessageChannel channel) {     for (ChannelInterceptor interceptor : interceptors) {         if (!interceptor.preReceive(channel)) {             triggerAfterReceiveCompletion(null, channel, null).             return false.         }         this.receiveInterceptorIndex++.     }     return true. }
false;public;2;11;;@Nullable public Message<?> applyPostReceive(Message<?> message, MessageChannel channel) {     Message<?> messageToUse = message.     for (ChannelInterceptor interceptor : interceptors) {         messageToUse = interceptor.postReceive(messageToUse, channel).         if (messageToUse == null) {             return null.         }     }     return messageToUse. }
false;public;3;15;;public void triggerAfterReceiveCompletion(@Nullable Message<?> message, MessageChannel channel, @Nullable Exception ex) {     for (int i = this.receiveInterceptorIndex. i >= 0. i--) {         ChannelInterceptor interceptor = interceptors.get(i).         try {             interceptor.afterReceiveCompletion(message, channel, ex).         } catch (Throwable ex2) {             if (logger.isErrorEnabled()) {                 logger.error("Exception from afterReceiveCompletion in " + interceptor, ex2).             }         }     } }
