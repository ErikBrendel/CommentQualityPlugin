commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the {@link MessageConverter} to use to convert the payload of incoming  * and outgoing messages to and from {@code byte[]} based on object type  * and the "content-type" header.  * <p>By default, {@link SimpleMessageConverter} is configured.  * @param messageConverter the message converter to use  */ ;/**  * Set the {@link MessageConverter} to use to convert the payload of incoming  * and outgoing messages to and from {@code byte[]} based on object type  * and the "content-type" header.  * <p>By default, {@link SimpleMessageConverter} is configured.  * @param messageConverter the message converter to use  */ public void setMessageConverter(MessageConverter messageConverter) {     Assert.notNull(messageConverter, "MessageConverter must not be null").     this.messageConverter = messageConverter. }
true;public;0;3;/**  * Return the configured {@link MessageConverter}.  */ ;/**  * Return the configured {@link MessageConverter}.  */ public MessageConverter getMessageConverter() {     return this.messageConverter. }
true;public;1;3;/**  * Configure a scheduler to use for heartbeats and for receipt tracking.  * <p><strong>Note:</strong> Some transports have built-in support to work  * with heartbeats and therefore do not require a TaskScheduler.  * Receipts however, if needed, do require a TaskScheduler to be configured.  * <p>By default, this is not set.  */ ;/**  * Configure a scheduler to use for heartbeats and for receipt tracking.  * <p><strong>Note:</strong> Some transports have built-in support to work  * with heartbeats and therefore do not require a TaskScheduler.  * Receipts however, if needed, do require a TaskScheduler to be configured.  * <p>By default, this is not set.  */ public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {     this.taskScheduler = taskScheduler. }
true;public;0;4;/**  * The configured TaskScheduler.  */ ;/**  * The configured TaskScheduler.  */ @Nullable public TaskScheduler getTaskScheduler() {     return this.taskScheduler. }
true;public;1;6;/**  * Configure the default value for the "heart-beat" header of the STOMP  * CONNECT frame. The first number represents how often the client will write  * or send a heart-beat. The second is how often the server should write.  * A value of 0 means no heart-beats.  * <p>By default this is set to "10000,10000" but subclasses may override  * that default and for example set it to "0,0" if they require a  * TaskScheduler to be configured first.  * @param heartbeat the value for the CONNECT "heart-beat" header  * @see <a href="http://stomp.github.io/stomp-specification-1.2.html#Heart-beating">  * http://stomp.github.io/stomp-specification-1.2.html#Heart-beating</a>  */ ;/**  * Configure the default value for the "heart-beat" header of the STOMP  * CONNECT frame. The first number represents how often the client will write  * or send a heart-beat. The second is how often the server should write.  * A value of 0 means no heart-beats.  * <p>By default this is set to "10000,10000" but subclasses may override  * that default and for example set it to "0,0" if they require a  * TaskScheduler to be configured first.  * @param heartbeat the value for the CONNECT "heart-beat" header  * @see <a href="http://stomp.github.io/stomp-specification-1.2.html#Heart-beating">  * http://stomp.github.io/stomp-specification-1.2.html#Heart-beating</a>  */ public void setDefaultHeartbeat(long[] heartbeat) {     if (heartbeat.length != 2 || heartbeat[0] < 0 || heartbeat[1] < 0) {         throw new IllegalArgumentException("Invalid heart-beat: " + Arrays.toString(heartbeat)).     }     this.defaultHeartbeat = heartbeat. }
true;public;0;3;/**  * Return the configured default heart-beat value (never {@code null}).  */ ;/**  * Return the configured default heart-beat value (never {@code null}).  */ public long[] getDefaultHeartbeat() {     return this.defaultHeartbeat. }
true;public;0;4;/**  * Determine whether heartbeats are enabled.  * <p>Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat}  * is set to "0,0", and {@code true} otherwise.  */ ;/**  * Determine whether heartbeats are enabled.  * <p>Returns {@code false} if {@link #setDefaultHeartbeat defaultHeartbeat}  * is set to "0,0", and {@code true} otherwise.  */ public boolean isDefaultHeartbeatEnabled() {     long[] heartbeat = getDefaultHeartbeat().     return (heartbeat[0] != 0 && heartbeat[1] != 0). }
true;public;1;4;/**  * Configure the number of milliseconds before a receipt is considered expired.  * <p>By default set to 15,000 (15 seconds).  */ ;/**  * Configure the number of milliseconds before a receipt is considered expired.  * <p>By default set to 15,000 (15 seconds).  */ public void setReceiptTimeLimit(long receiptTimeLimit) {     Assert.isTrue(receiptTimeLimit > 0, "Receipt time limit must be larger than zero").     this.receiptTimeLimit = receiptTimeLimit. }
true;public;0;3;/**  * Return the configured receipt time limit.  */ ;/**  * Return the configured receipt time limit.  */ public long getReceiptTimeLimit() {     return this.receiptTimeLimit. }
true;protected;2;10;/**  * Factory method for create and configure a new session.  * @param connectHeaders headers for the STOMP CONNECT frame  * @param handler the handler for the STOMP session  * @return the created session  */ ;/**  * Factory method for create and configure a new session.  * @param connectHeaders headers for the STOMP CONNECT frame  * @param handler the handler for the STOMP session  * @return the created session  */ protected ConnectionHandlingStompSession createSession(@Nullable StompHeaders connectHeaders, StompSessionHandler handler) {     connectHeaders = processConnectHeaders(connectHeaders).     DefaultStompSession session = new DefaultStompSession(handler, connectHeaders).     session.setMessageConverter(getMessageConverter()).     session.setTaskScheduler(getTaskScheduler()).     session.setReceiptTimeLimit(getReceiptTimeLimit()).     return session. }
true;protected;1;7;/**  * Further initialize the StompHeaders, for example setting the heart-beat  * header if necessary.  * @param connectHeaders the headers to modify  * @return the modified headers  */ ;/**  * Further initialize the StompHeaders, for example setting the heart-beat  * header if necessary.  * @param connectHeaders the headers to modify  * @return the modified headers  */ protected StompHeaders processConnectHeaders(@Nullable StompHeaders connectHeaders) {     connectHeaders = (connectHeaders != null ? connectHeaders : new StompHeaders()).     if (connectHeaders.getHeartbeat() == null) {         connectHeaders.setHeartbeat(getDefaultHeartbeat()).     }     return connectHeaders. }
