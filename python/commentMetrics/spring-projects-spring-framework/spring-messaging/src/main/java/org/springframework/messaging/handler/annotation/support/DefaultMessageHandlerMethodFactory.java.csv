commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the {@link ConversionService} to use to convert the original  * message payload or headers.  * @see HeaderMethodArgumentResolver  * @see GenericMessageConverter  */ ;/**  * Set the {@link ConversionService} to use to convert the original  * message payload or headers.  * @see HeaderMethodArgumentResolver  * @see GenericMessageConverter  */ public void setConversionService(ConversionService conversionService) {     this.conversionService = conversionService. }
true;public;1;3;/**  * Set the {@link MessageConverter} to use. By default a {@link GenericMessageConverter}  * is used.  * @see GenericMessageConverter  */ ;/**  * Set the {@link MessageConverter} to use. By default a {@link GenericMessageConverter}  * is used.  * @see GenericMessageConverter  */ public void setMessageConverter(MessageConverter messageConverter) {     this.messageConverter = messageConverter. }
true;public;1;3;/**  * Set the Validator instance used for validating {@code @Payload} arguments.  * @see org.springframework.validation.annotation.Validated  * @see org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver  */ ;/**  * Set the Validator instance used for validating {@code @Payload} arguments.  * @see org.springframework.validation.annotation.Validated  * @see org.springframework.messaging.handler.annotation.support.PayloadArgumentResolver  */ public void setValidator(Validator validator) {     this.validator = validator. }
true;public;1;3;/**  * Set the list of custom {@code HandlerMethodArgumentResolver}s that will be used  * after resolvers for supported argument type.  * @param customArgumentResolvers the list of resolvers (never {@code null})  */ ;/**  * Set the list of custom {@code HandlerMethodArgumentResolver}s that will be used  * after resolvers for supported argument type.  * @param customArgumentResolvers the list of resolvers (never {@code null})  */ public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {     this.customArgumentResolvers = customArgumentResolvers. }
true;public;1;7;/**  * Configure the complete list of supported argument types effectively overriding  * the ones configured by default. This is an advanced option. For most use cases  * it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.  */ ;/**  * Configure the complete list of supported argument types effectively overriding  * the ones configured by default. This is an advanced option. For most use cases  * it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.  */ public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {     if (argumentResolvers == null) {         this.argumentResolvers.clear().         return.     }     this.argumentResolvers.addResolvers(argumentResolvers). }
true;public;1;4;/**  * A {@link BeanFactory} only needs to be available for placeholder resolution  * in handler method arguments. it's optional otherwise.  */ ;/**  * A {@link BeanFactory} only needs to be available for placeholder resolution  * in handler method arguments. it's optional otherwise.  */ @Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;9;;@Override public void afterPropertiesSet() {     if (this.messageConverter == null) {         this.messageConverter = new GenericMessageConverter(this.conversionService).     }     if (this.argumentResolvers.getResolvers().isEmpty()) {         this.argumentResolvers.addResolvers(initArgumentResolvers()).     } }
false;public;2;6;;@Override public InvocableHandlerMethod createInvocableHandlerMethod(Object bean, Method method) {     InvocableHandlerMethod handlerMethod = new InvocableHandlerMethod(bean, method).     handlerMethod.setMessageMethodArgumentResolvers(this.argumentResolvers).     return handlerMethod. }
false;protected;0;19;;protected List<HandlerMethodArgumentResolver> initArgumentResolvers() {     List<HandlerMethodArgumentResolver> resolvers = new ArrayList<>().     ConfigurableBeanFactory cbf = (this.beanFactory instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) this.beanFactory : null).     // Annotation-based argument resolution     resolvers.add(new HeaderMethodArgumentResolver(this.conversionService, cbf)).     resolvers.add(new HeadersMethodArgumentResolver()).     // Type-based argument resolution     resolvers.add(new MessageMethodArgumentResolver(this.messageConverter)).     if (this.customArgumentResolvers != null) {         resolvers.addAll(this.customArgumentResolvers).     }     resolvers.add(new PayloadArgumentResolver(this.messageConverter, this.validator)).     return resolvers. }
