commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the default MIME type to use when there is no  * {@link MessageHeaders#CONTENT_TYPE} header present.  * <p>This property does not have a default value.  */ ;/**  * Set the default MIME type to use when there is no  * {@link MessageHeaders#CONTENT_TYPE} header present.  * <p>This property does not have a default value.  */ public void setDefaultMimeType(@Nullable MimeType defaultMimeType) {     this.defaultMimeType = defaultMimeType. }
true;public;0;4;/**  * Return the default MIME type to use if no  * {@link MessageHeaders#CONTENT_TYPE} header is present.  */ ;/**  * Return the default MIME type to use if no  * {@link MessageHeaders#CONTENT_TYPE} header is present.  */ @Nullable public MimeType getDefaultMimeType() {     return this.defaultMimeType. }
false;public;1;21;;@Override @Nullable public MimeType resolve(@Nullable MessageHeaders headers) {     if (headers == null || headers.get(MessageHeaders.CONTENT_TYPE) == null) {         return this.defaultMimeType.     }     Object value = headers.get(MessageHeaders.CONTENT_TYPE).     if (value == null) {         return null.     } else if (value instanceof MimeType) {         return (MimeType) value.     } else if (value instanceof String) {         return MimeType.valueOf((String) value).     } else {         throw new IllegalArgumentException("Unknown type for contentType header value: " + value.getClass()).     } }
false;public;0;4;;@Override public String toString() {     return "DefaultContentTypeResolver[" + "defaultMimeType=" + this.defaultMimeType + "]". }
