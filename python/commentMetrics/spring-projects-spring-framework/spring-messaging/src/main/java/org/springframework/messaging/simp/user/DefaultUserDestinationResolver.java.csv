# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1386367529;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__		this.subscriptionDestinationPrefix = this.destinationPrefix + "queue/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix,this,subscription,destination,prefix,this,destination,prefix,queue
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1388785441;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1390250482;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1390324325;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1390324325;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1390334271;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1392327536;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1397429525;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1398955014;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1399601217;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1403856366;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1404880799;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1413848647;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1416579812;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1416675935;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default value is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.destinationPrefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,value,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,destination,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1429286144;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1431458952;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1458078613;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1467730834;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1474905889;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1495868221;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1496285169;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1496837955;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1498780456;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1502974979;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1506097334;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1516413763;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "prefix must not be empty")__		this.prefix = prefix.endsWith("/") ? prefix : prefix + "/"__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1519590278;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "Prefix must not be empty")__		this.prefix = (prefix.endsWith("/") ? prefix : prefix + "/")__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public void setUserDestinationPrefix(String prefix);1531942400;The prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>The default prefix is "/user/"._@param prefix the prefix to use;public void setUserDestinationPrefix(String prefix) {_		Assert.hasText(prefix, "Prefix must not be empty")__		this.prefix = (prefix.endsWith("/") ? prefix : prefix + "/")__	};the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,the,default,prefix,is,user,param,prefix,the,prefix,to,use;public,void,set,user,destination,prefix,string,prefix,assert,has,text,prefix,prefix,must,not,be,empty,this,prefix,prefix,ends,with,prefix,prefix
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1386367529;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1388785441;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1390250482;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1390324325;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1390324325;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1390334271;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1392327536;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1397429525;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1398955014;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1399601217;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1403856366;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1404880799;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1413848647;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1416579812;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry);1416675935;Create an instance that will access user session id information through_the provided registry._@param userSessionRegistry the registry, never {@code null};public DefaultUserDestinationResolver(UserSessionRegistry userSessionRegistry) {_		Assert.notNull(userSessionRegistry, "'userSessionRegistry' must not be null")__		this.userSessionRegistry = userSessionRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,session,registry,the,registry,never,code,null;public,default,user,destination,resolver,user,session,registry,user,session,registry,assert,not,null,user,session,registry,user,session,registry,must,not,be,null,this,user,session,registry,user,session,registry
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1495868221;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1496285169;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1496837955;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1498780456;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1502974979;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1506097334;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1516413763;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1519590278;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	@Nullable 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, @Nullable String user);1531942400;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	@Nullable_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, @Nullable String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,nullable,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,nullable,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1386367529;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1388785441;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1390250482;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1390324325;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1390324325;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1390334271;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1392327536;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1397429525;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1398955014;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1399601217;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1403856366;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1404880799;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1413848647;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1416579812;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1416675935;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.userSessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,user,session,registry
DefaultUserDestinationResolver -> public UserSessionRegistry getUserSessionRegistry();1429286144;Return the configured {@link UserSessionRegistry}.;public UserSessionRegistry getUserSessionRegistry() {_		return this.sessionRegistry__	};return,the,configured,link,user,session,registry;public,user,session,registry,get,user,session,registry,return,this,session,registry
DefaultUserDestinationResolver -> public String getDestinationPrefix();1386367529;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1388785441;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1390250482;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1390324325;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1390324325;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1390334271;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1392327536;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1397429525;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1398955014;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1399601217;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1403856366;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1404880799;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1413848647;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1416579812;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1416675935;Return the prefix used to identify user destinations. Any destinations that do not_start with the given prefix are not be resolved._<p>By default "/user/queue/".;public String getDestinationPrefix() {_		return this.destinationPrefix__	};return,the,prefix,used,to,identify,user,destinations,any,destinations,that,do,not,start,with,the,given,prefix,are,not,be,resolved,p,by,default,user,queue;public,string,get,destination,prefix,return,this,destination,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1429286144;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1431458952;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1458078613;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1467730834;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1474905889;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1495868221;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1496285169;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1496837955;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1498780456;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1502974979;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1506097334;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1516413763;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1519590278;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public String getDestinationPrefix();1531942400;Return the configured prefix for user destinations.;public String getDestinationPrefix() {_		return this.prefix__	};return,the,configured,prefix,for,user,destinations;public,string,get,destination,prefix,return,this,prefix
DefaultUserDestinationResolver -> public void setPathMatcher(PathMatcher pathMatcher);1458078613;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(PathMatcher pathMatcher);1467730834;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(PathMatcher pathMatcher);1474905889;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(PathMatcher pathMatcher);1495868221;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(PathMatcher pathMatcher);1496285169;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1431458952;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1458078613;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1467730834;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1474905889;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1495868221;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1496285169;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1496837955;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1498780456;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1502974979;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1506097334;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1516413763;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "'userRegistry' must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1519590278;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "SimpUserRegistry must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,simp,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public DefaultUserDestinationResolver(SimpUserRegistry userRegistry);1531942400;Create an instance that will access user session id information through_the provided registry._@param userRegistry the registry, never {@code null};public DefaultUserDestinationResolver(SimpUserRegistry userRegistry) {_		Assert.notNull(userRegistry, "SimpUserRegistry must not be null")__		this.userRegistry = userRegistry__	};create,an,instance,that,will,access,user,session,id,information,through,the,provided,registry,param,user,registry,the,registry,never,code,null;public,default,user,destination,resolver,simp,user,registry,user,registry,assert,not,null,user,registry,simp,user,registry,must,not,be,null,this,user,registry,user,registry
DefaultUserDestinationResolver -> public boolean isRemoveLeadingSlash();1516413763;Whether to remove the leading slash from target destinations.;public boolean isRemoveLeadingSlash() {_		return this.removeLeadingSlash__	};whether,to,remove,the,leading,slash,from,target,destinations;public,boolean,is,remove,leading,slash,return,this,remove,leading,slash
DefaultUserDestinationResolver -> public boolean isRemoveLeadingSlash();1519590278;Whether to remove the leading slash from target destinations._@since 4.3.14;public boolean isRemoveLeadingSlash() {_		return this.removeLeadingSlash__	};whether,to,remove,the,leading,slash,from,target,destinations,since,4,3,14;public,boolean,is,remove,leading,slash,return,this,remove,leading,slash
DefaultUserDestinationResolver -> public boolean isRemoveLeadingSlash();1531942400;Whether to remove the leading slash from target destinations._@since 4.3.14;public boolean isRemoveLeadingSlash() {_		return this.removeLeadingSlash__	};whether,to,remove,the,leading,slash,from,target,destinations,since,4,3,14;public,boolean,is,remove,leading,slash,return,this,remove,leading,slash
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, String user);1431458952;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, String user);1458078613;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, String user);1467730834;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> @SuppressWarnings("unused") 	protected String getTargetDestination(String sourceDestination, String actualDestination, 			String sessionId, String user);1474905889;This method determines how to translate the source "user" destination to an_actual target destination for the given active user session._@param sourceDestination the source destination from the input message._@param actualDestination a subset of the destination without any user prefix._@param sessionId the id of an active user session, never {@code null}._@param user the target user, possibly {@code null}, e.g if not authenticated._@return a target destination, or {@code null} if none;@SuppressWarnings("unused")_	protected String getTargetDestination(String sourceDestination, String actualDestination,_			String sessionId, String user) {__		return actualDestination + "-user" + sessionId__	};this,method,determines,how,to,translate,the,source,user,destination,to,an,actual,target,destination,for,the,given,active,user,session,param,source,destination,the,source,destination,from,the,input,message,param,actual,destination,a,subset,of,the,destination,without,any,user,prefix,param,session,id,the,id,of,an,active,user,session,never,code,null,param,user,the,target,user,possibly,code,null,e,g,if,not,authenticated,return,a,target,destination,or,code,null,if,none;suppress,warnings,unused,protected,string,get,target,destination,string,source,destination,string,actual,destination,string,session,id,string,user,return,actual,destination,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1392327536;Return the target destination to use. Provided as input are the original source_destination, as well as the same destination with the target prefix removed.__@param sourceDestination the source destination from the input message_@param sourceDestinationWithoutPrefix the source destination with the target prefix removed_@param sessionId an active user session id_@param user the user_@return the target destination;protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};return,the,target,destination,to,use,provided,as,input,are,the,original,source,destination,as,well,as,the,same,destination,with,the,target,prefix,removed,param,source,destination,the,source,destination,from,the,input,message,param,source,destination,without,prefix,the,source,destination,with,the,target,prefix,removed,param,session,id,an,active,user,session,id,param,user,the,user,return,the,target,destination;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1397429525;Return the target destination to use. Provided as input are the original source_destination, as well as the same destination with the target prefix removed.__@param sourceDestination the source destination from the input message_@param sourceDestinationWithoutPrefix the source destination with the target prefix removed_@param sessionId an active user session id_@param user the user_@return the target destination;protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};return,the,target,destination,to,use,provided,as,input,are,the,original,source,destination,as,well,as,the,same,destination,with,the,target,prefix,removed,param,source,destination,the,source,destination,from,the,input,message,param,source,destination,without,prefix,the,source,destination,with,the,target,prefix,removed,param,session,id,an,active,user,session,id,param,user,the,user,return,the,target,destination;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1398955014;Return the target destination to use. Provided as input are the original source_destination, as well as the same destination with the target prefix removed.__@param sourceDestination the source destination from the input message_@param sourceDestinationWithoutPrefix the source destination with the target prefix removed_@param sessionId an active user session id_@param user the user_@return the target destination;protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};return,the,target,destination,to,use,provided,as,input,are,the,original,source,destination,as,well,as,the,same,destination,with,the,target,prefix,removed,param,source,destination,the,source,destination,from,the,input,message,param,source,destination,without,prefix,the,source,destination,with,the,target,prefix,removed,param,session,id,an,active,user,session,id,param,user,the,user,return,the,target,destination;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1399601217;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known).__@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}__@return a target destination, or {@code null};protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1403856366;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known).__@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}__@return a target destination, or {@code null};protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1404880799;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known).__@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}__@return a target destination, or {@code null};protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1413848647;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known).__@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}__@return a target destination, or {@code null};protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1416579812;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known).__@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}__@return a target destination, or {@code null};protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> protected String getTargetDestination(String sourceDestination, 			String sourceDestinationWithoutPrefix, String sessionId, String user);1416675935;This methods determines the translated destination to use based on the source_destination, the source destination with the user prefix removed, a session_id, and the user for the session (if known)._@param sourceDestination the source destination of the input message_@param sourceDestinationWithoutPrefix the source destination without the user prefix_@param sessionId the id of the session for the target message_@param user the user associated with the session, or {@code null}_@return a target destination, or {@code null} if none;protected String getTargetDestination(String sourceDestination,_			String sourceDestinationWithoutPrefix, String sessionId, String user) {__		return sourceDestinationWithoutPrefix + "-user" + sessionId__	};this,methods,determines,the,translated,destination,to,use,based,on,the,source,destination,the,source,destination,with,the,user,prefix,removed,a,session,id,and,the,user,for,the,session,if,known,param,source,destination,the,source,destination,of,the,input,message,param,source,destination,without,prefix,the,source,destination,without,the,user,prefix,param,session,id,the,id,of,the,session,for,the,target,message,param,user,the,user,associated,with,the,session,or,code,null,return,a,target,destination,or,code,null,if,none;protected,string,get,target,destination,string,source,destination,string,source,destination,without,prefix,string,session,id,string,user,return,source,destination,without,prefix,user,session,id
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1431458952;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1458078613;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1467730834;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1474905889;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1495868221;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1496285169;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1496837955;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1498780456;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1502974979;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1506097334;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1516413763;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1519590278;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> public SimpUserRegistry getSimpUserRegistry();1531942400;Return the configured {@link SimpUserRegistry}.;public SimpUserRegistry getSimpUserRegistry() {_		return this.userRegistry__	};return,the,configured,link,simp,user,registry;public,simp,user,registry,get,simp,user,registry,return,this,user,registry
DefaultUserDestinationResolver -> @Deprecated 	public void setPathMatcher(@Nullable PathMatcher pathMatcher);1516413763;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3_@deprecated as of 4.3.14 this property is no longer used and is replaced_by {@link #setRemoveLeadingSlash(boolean)} that indicates more explicitly_whether to keep the leading slash which may or may not be the case_regardless of how the {@code PathMatcher} is configured.;@Deprecated_	public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3,deprecated,as,of,4,3,14,this,property,is,no,longer,used,and,is,replaced,by,link,set,remove,leading,slash,boolean,that,indicates,more,explicitly,whether,to,keep,the,leading,slash,which,may,or,may,not,be,the,case,regardless,of,how,the,code,path,matcher,is,configured;deprecated,public,void,set,path,matcher,nullable,path,matcher,path,matcher
DefaultUserDestinationResolver -> @Deprecated 	public void setPathMatcher(@Nullable PathMatcher pathMatcher);1519590278;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3_@deprecated as of 4.3.14 this property is no longer used and is replaced_by {@link #setRemoveLeadingSlash(boolean)} that indicates more explicitly_whether to keep the leading slash which may or may not be the case_regardless of how the {@code PathMatcher} is configured.;@Deprecated_	public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3,deprecated,as,of,4,3,14,this,property,is,no,longer,used,and,is,replaced,by,link,set,remove,leading,slash,boolean,that,indicates,more,explicitly,whether,to,keep,the,leading,slash,which,may,or,may,not,be,the,case,regardless,of,how,the,code,path,matcher,is,configured;deprecated,public,void,set,path,matcher,nullable,path,matcher,path,matcher
DefaultUserDestinationResolver -> @Deprecated 	public void setPathMatcher(@Nullable PathMatcher pathMatcher);1531942400;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3_@deprecated as of 4.3.14 this property is no longer used and is replaced_by {@link #setRemoveLeadingSlash(boolean)} that indicates more explicitly_whether to keep the leading slash which may or may not be the case_regardless of how the {@code PathMatcher} is configured.;@Deprecated_	public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3,deprecated,as,of,4,3,14,this,property,is,no,longer,used,and,is,replaced,by,link,set,remove,leading,slash,boolean,that,indicates,more,explicitly,whether,to,keep,the,leading,slash,which,may,or,may,not,be,the,case,regardless,of,how,the,code,path,matcher,is,configured;deprecated,public,void,set,path,matcher,nullable,path,matcher,path,matcher
DefaultUserDestinationResolver -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1496837955;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,nullable,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1498780456;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,nullable,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1502974979;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,nullable,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setPathMatcher(@Nullable PathMatcher pathMatcher);1506097334;Provide the {@code PathMatcher} in use for working with destinations_which in turn helps to determine whether the leading slash should be_kept in actual destinations after removing the_{@link #setUserDestinationPrefix userDestinationPrefix}._<p>By default actual destinations have a leading slash, e.g._{@code /queue/position-updates} which makes sense with brokers that_support destinations with slash as separator. When a {@code PathMatcher}_is provided that supports an alternative separator, then resulting_destinations won't have a leading slash, e.g. {@code_jms.queue.position-updates}._@param pathMatcher the PathMatcher used to work with destinations_@since 4.3;public void setPathMatcher(@Nullable PathMatcher pathMatcher) {_		if (pathMatcher != null) {_			this.keepLeadingSlash = pathMatcher.combine("1", "2").equals("1/2")__		}_	};provide,the,code,path,matcher,in,use,for,working,with,destinations,which,in,turn,helps,to,determine,whether,the,leading,slash,should,be,kept,in,actual,destinations,after,removing,the,link,set,user,destination,prefix,user,destination,prefix,p,by,default,actual,destinations,have,a,leading,slash,e,g,code,queue,position,updates,which,makes,sense,with,brokers,that,support,destinations,with,slash,as,separator,when,a,code,path,matcher,is,provided,that,supports,an,alternative,separator,then,resulting,destinations,won,t,have,a,leading,slash,e,g,code,jms,queue,position,updates,param,path,matcher,the,path,matcher,used,to,work,with,destinations,since,4,3;public,void,set,path,matcher,nullable,path,matcher,path,matcher,if,path,matcher,null,this,keep,leading,slash,path,matcher,combine,1,2,equals,1,2
DefaultUserDestinationResolver -> public void setRemoveLeadingSlash(boolean remove);1516413763;Use this property to indicate whether the leading slash from translated_user destinations should be removed or not. This depends on the_destination prefixes the message broker is configured with._<p>By default this is set to {@code false}, i.e. "do not change the_target destination", although_{@link org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration_AbstractMessageBrokerConfiguration} may change that to {@code true} if_the configured destinations do not have a leading slash._@param remove whether to remove the leading slash_@since 4.3.14;public void setRemoveLeadingSlash(boolean remove) {_		this.removeLeadingSlash = remove__	};use,this,property,to,indicate,whether,the,leading,slash,from,translated,user,destinations,should,be,removed,or,not,this,depends,on,the,destination,prefixes,the,message,broker,is,configured,with,p,by,default,this,is,set,to,code,false,i,e,do,not,change,the,target,destination,although,link,org,springframework,messaging,simp,config,abstract,message,broker,configuration,abstract,message,broker,configuration,may,change,that,to,code,true,if,the,configured,destinations,do,not,have,a,leading,slash,param,remove,whether,to,remove,the,leading,slash,since,4,3,14;public,void,set,remove,leading,slash,boolean,remove,this,remove,leading,slash,remove
DefaultUserDestinationResolver -> public void setRemoveLeadingSlash(boolean remove);1519590278;Use this property to indicate whether the leading slash from translated_user destinations should be removed or not. This depends on the_destination prefixes the message broker is configured with._<p>By default this is set to {@code false}, i.e._"do not change the target destination", although_{@link org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration_AbstractMessageBrokerConfiguration} may change that to {@code true}_if the configured destinations do not have a leading slash._@param remove whether to remove the leading slash_@since 4.3.14;public void setRemoveLeadingSlash(boolean remove) {_		this.removeLeadingSlash = remove__	};use,this,property,to,indicate,whether,the,leading,slash,from,translated,user,destinations,should,be,removed,or,not,this,depends,on,the,destination,prefixes,the,message,broker,is,configured,with,p,by,default,this,is,set,to,code,false,i,e,do,not,change,the,target,destination,although,link,org,springframework,messaging,simp,config,abstract,message,broker,configuration,abstract,message,broker,configuration,may,change,that,to,code,true,if,the,configured,destinations,do,not,have,a,leading,slash,param,remove,whether,to,remove,the,leading,slash,since,4,3,14;public,void,set,remove,leading,slash,boolean,remove,this,remove,leading,slash,remove
DefaultUserDestinationResolver -> public void setRemoveLeadingSlash(boolean remove);1531942400;Use this property to indicate whether the leading slash from translated_user destinations should be removed or not. This depends on the_destination prefixes the message broker is configured with._<p>By default this is set to {@code false}, i.e._"do not change the target destination", although_{@link org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration_AbstractMessageBrokerConfiguration} may change that to {@code true}_if the configured destinations do not have a leading slash._@param remove whether to remove the leading slash_@since 4.3.14;public void setRemoveLeadingSlash(boolean remove) {_		this.removeLeadingSlash = remove__	};use,this,property,to,indicate,whether,the,leading,slash,from,translated,user,destinations,should,be,removed,or,not,this,depends,on,the,destination,prefixes,the,message,broker,is,configured,with,p,by,default,this,is,set,to,code,false,i,e,do,not,change,the,target,destination,although,link,org,springframework,messaging,simp,config,abstract,message,broker,configuration,abstract,message,broker,configuration,may,change,that,to,code,true,if,the,configured,destinations,do,not,have,a,leading,slash,param,remove,whether,to,remove,the,leading,slash,since,4,3,14;public,void,set,remove,leading,slash,boolean,remove,this,remove,leading,slash,remove
