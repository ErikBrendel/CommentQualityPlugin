# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1391653535;Provides access to the map of headers before a send operation._Implementations can modify the headers by returning a different map._This implementation returns the map that was passed in (i.e. without any changes).__@param headers the headers to send, possibly {@code null}_@return the actual headers to send;protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,headers,before,a,send,operation,implementations,can,modify,the,headers,by,returning,a,different,map,this,implementation,returns,the,map,that,was,passed,in,i,e,without,any,changes,param,headers,the,headers,to,send,possibly,code,null,return,the,actual,headers,to,send;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397429525;Provides access to the map of input headers before a send operation. Sub-classes_can modify the headers and then return the same or a different map.__<p>This default implementation in this class returns the input map.__@param headers the headers to send or {@code null}._@return the actual headers to send or {@code null}.;protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,sub,classes,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,return,the,actual,headers,to,send,or,code,null;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1397762377;Provides access to the map of input headers before a send operation. Sub-classes_can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send or {@code null}_@return the actual headers to send or {@code null};protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,sub,classes,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,return,the,actual,headers,to,send,or,code,null;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1400489173;Provides access to the map of input headers before a send operation. Sub-classes_can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send or {@code null}_@return the actual headers to send or {@code null};protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,sub,classes,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,return,the,actual,headers,to,send,or,code,null;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1437753031;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> protected Map<String, Object> processHeadersToSend(Map<String, Object> headers);1439394346;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);protected Map<String, Object> processHeadersToSend(Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;protected,map,string,object,process,headers,to,send,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1495868221;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1496259743;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1496837955;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1498780456;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1500448076;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1505772160;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1508532146;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> @Nullable 	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers);1530174524;Provides access to the map of input headers before a send operation._Subclasses can modify the headers and then return the same or a different map._<p>This default implementation in this class returns the input map._@param headers the headers to send (or {@code null} if none)_@return the actual headers to send (or {@code null} if none);@Nullable_	protected Map<String, Object> processHeadersToSend(@Nullable Map<String, Object> headers) {_		return headers__	};provides,access,to,the,map,of,input,headers,before,a,send,operation,subclasses,can,modify,the,headers,and,then,return,the,same,or,a,different,map,p,this,default,implementation,in,this,class,returns,the,input,map,param,headers,the,headers,to,send,or,code,null,if,none,return,the,actual,headers,to,send,or,code,null,if,none;nullable,protected,map,string,object,process,headers,to,send,nullable,map,string,object,headers,return,headers
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1386297052;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.__@param defaultDestination the default destination;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked,param,default,destination,the,default,destination;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1386350678;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1391222058;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1391653535;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1397429525;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1397762377;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1400489173;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1437753031;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1439394346;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1495868221;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1496259743;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1496837955;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(D defaultDestination);1498780456;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(@Nullable D defaultDestination);1500448076;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(@Nullable D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,nullable,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(@Nullable D defaultDestination);1505772160;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(@Nullable D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,nullable,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(@Nullable D defaultDestination);1508532146;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(@Nullable D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,nullable,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setDefaultDestination(@Nullable D defaultDestination);1530174524;Configure the default destination to use in send methods that don't have_a destination argument. If a default destination is not configured, send methods_without a destination argument will raise an exception if invoked.;public void setDefaultDestination(@Nullable D defaultDestination) {_		this.defaultDestination = defaultDestination__	};configure,the,default,destination,to,use,in,send,methods,that,don,t,have,a,destination,argument,if,a,default,destination,is,not,configured,send,methods,without,a,destination,argument,will,raise,an,exception,if,invoked;public,void,set,default,destination,nullable,d,default,destination,this,default,destination,default,destination
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1373651081;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimplePayloadMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,payload,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1374083925;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimplePayloadMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,payload,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1381440318;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimplePayloadMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,payload,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1382110439;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimplePayloadMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,payload,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1385501137;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimpleMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1385507683;Set the {@link MessageConverter} that is to be used to convert_between Messages and objects for this template._<p>The default is {@link SimpleMessageConverter}.;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,that,is,to,be,used,to,convert,between,messages,and,objects,for,this,template,p,the,default,is,link,simple,message,converter;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1386297052;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>_By default {@link SimpleMessageConverter} is used.__@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1386350678;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1391222058;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1391653535;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1397429525;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1397762377;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1400489173;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1437753031;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1439394346;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1495868221;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1496259743;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1496837955;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1498780456;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1500448076;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "'messageConverter' must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1505772160;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1508532146;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> public void setMessageConverter(MessageConverter messageConverter);1530174524;Set the {@link MessageConverter} to use in {@code convertAndSend} methods._<p>By default, {@link SimpleMessageConverter} is used._@param messageConverter the message converter to use;public void setMessageConverter(MessageConverter messageConverter) {_		Assert.notNull(messageConverter, "MessageConverter must not be null")__		this.converter = messageConverter__	};set,the,link,message,converter,to,use,in,code,convert,and,send,methods,p,by,default,link,simple,message,converter,is,used,param,message,converter,the,message,converter,to,use;public,void,set,message,converter,message,converter,message,converter,assert,not,null,message,converter,message,converter,must,not,be,null,this,converter,message,converter
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1496837955;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1498780456;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1500448076;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1505772160;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1508532146;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> @Nullable 	public D getDefaultDestination();1530174524;Return the configured default destination.;@Nullable_	public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;nullable,public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor);1400489173;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) {_		MessageHeaders messageHeaders = null__		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		Message<?> message = getMessageConverter().toMessage(payload, messageHeaders)__		if (message == null) {_			String payloadType = (payload != null ? payload.getClass().getName() : null)__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,map,string,object,headers,message,post,processor,post,processor,message,headers,message,headers,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,message,get,message,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,null,payload,get,class,get,name,null,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor);1437753031;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) {_		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof AbstractMessageConverter ?_				((AbstractMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = (payload != null ? payload.getClass().getName() : null)__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,map,string,object,headers,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,abstract,message,converter,abstract,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,null,payload,get,class,get,name,null,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor);1439394346;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) {_		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = (payload != null ? payload.getClass().getName() : null)__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,map,string,object,headers,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,null,payload,get,class,get,name,null,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor);1495868221;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) {_		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = (payload != null ? payload.getClass().getName() : null)__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,map,string,object,headers,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,null,payload,get,class,get,name,null,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor);1496259743;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) {_		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = (payload != null ? payload.getClass().getName() : null)__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,map,string,object,headers,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,null,payload,get,class,get,name,null,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1496837955;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1498780456;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1500448076;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1505772160;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1508532146;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor);1530174524;Convert the given Object to serialized form, possibly using a_{@link MessageConverter}, wrap it as a message with the given_headers and apply the given post processor._@param payload the Object to use as payload_@param headers headers for the message to send_@param postProcessor the post processor to apply to the message_@return the converted message;protected Message<?> doConvert(Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) {__		MessageHeaders messageHeaders = null__		Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)___		Map<String, Object> headersToUse = processHeadersToSend(headers)__		if (headersToUse != null) {_			if (headersToUse instanceof MessageHeaders) {_				messageHeaders = (MessageHeaders) headersToUse__			}_			else {_				messageHeaders = new MessageHeaders(headersToUse)__			}_		}__		MessageConverter converter = getMessageConverter()__		Message<?> message = (converter instanceof SmartMessageConverter ?_				((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) :_				converter.toMessage(payload, messageHeaders))__		if (message == null) {_			String payloadType = payload.getClass().getName()__			Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)__			throw new MessageConversionException("Unable to convert payload with type='" + payloadType +_					"', contentType='" + contentType + "', converter=[" + getMessageConverter() + "]")__		}_		if (postProcessor != null) {_			message = postProcessor.postProcessMessage(message)__		}_		return message__	};convert,the,given,object,to,serialized,form,possibly,using,a,link,message,converter,wrap,it,as,a,message,with,the,given,headers,and,apply,the,given,post,processor,param,payload,the,object,to,use,as,payload,param,headers,headers,for,the,message,to,send,param,post,processor,the,post,processor,to,apply,to,the,message,return,the,converted,message;protected,message,do,convert,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,message,headers,message,headers,null,object,conversion,hint,headers,null,headers,get,null,map,string,object,headers,to,use,process,headers,to,send,headers,if,headers,to,use,null,if,headers,to,use,instanceof,message,headers,message,headers,message,headers,headers,to,use,else,message,headers,new,message,headers,headers,to,use,message,converter,converter,get,message,converter,message,message,converter,instanceof,smart,message,converter,smart,message,converter,converter,to,message,payload,message,headers,conversion,hint,converter,to,message,payload,message,headers,if,message,null,string,payload,type,payload,get,class,get,name,object,content,type,message,headers,null,message,headers,get,message,headers,null,throw,new,message,conversion,exception,unable,to,convert,payload,with,type,payload,type,content,type,content,type,converter,get,message,converter,if,post,processor,null,message,post,processor,post,process,message,message,return,message
AbstractMessageSendingTemplate -> public MessageConverter getConverter();1373651081;@return the configured {@link MessageConverter};public MessageConverter getConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getConverter();1374083925;@return the configured {@link MessageConverter};public MessageConverter getConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,converter,return,this,converter
AbstractMessageSendingTemplate -> public void setConverter(MessageConverter converter);1373651081;@param converter the converter to set;public void setConverter(MessageConverter converter) {_		this.converter = converter__	};param,converter,the,converter,to,set;public,void,set,converter,message,converter,converter,this,converter,converter
AbstractMessageSendingTemplate -> public void setConverter(MessageConverter converter);1374083925;@param converter the converter to set;public void setConverter(MessageConverter converter) {_		this.converter = converter__	};param,converter,the,converter,to,set;public,void,set,converter,message,converter,converter,this,converter,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1381440318;@return the configured {@link MessageConverter};public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1382110439;@return the configured {@link MessageConverter};public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1385501137;@return the configured {@link MessageConverter};public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1385507683;@return the configured {@link MessageConverter};public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1386297052;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1386350678;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1391222058;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1391653535;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1397429525;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1397762377;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1400489173;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1437753031;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1439394346;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1495868221;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1496259743;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1496837955;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1498780456;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1500448076;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1505772160;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1508532146;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public MessageConverter getMessageConverter();1530174524;Return the configured {@link MessageConverter}.;public MessageConverter getMessageConverter() {_		return this.converter__	};return,the,configured,link,message,converter;public,message,converter,get,message,converter,return,this,converter
AbstractMessageSendingTemplate -> public D getDefaultDestination();1386297052;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1386350678;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1391222058;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1391653535;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1397429525;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1397762377;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1400489173;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1437753031;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1439394346;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1495868221;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
AbstractMessageSendingTemplate -> public D getDefaultDestination();1496259743;Return the configured default destination.;public D getDefaultDestination() {_		return this.defaultDestination__	};return,the,configured,default,destination;public,d,get,default,destination,return,this,default,destination
