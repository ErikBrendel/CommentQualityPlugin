# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1405378165;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1411159659;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1411389021;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1419881658;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1426789284;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1426869344;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1427240641;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1431461099;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1432125256;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1432286953;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1432299978;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1436276619;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1438078548;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1447077465;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1448483163;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1448500177;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1449703897;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1455836956;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1467457413;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1467463695;Return the configured destination prefixes.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1467465454;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1467730834;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1495868221;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1496837955;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1497251962;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1497362807;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1500448076;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1500457438;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1516413763;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1518772998;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1523498072;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1528667947;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1531942400;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> public Collection<String> getDestinationPrefixes();1532091916;Return the configured destination prefixes, if any.;public Collection<String> getDestinationPrefixes() {_		return this.destinationPrefixes__	};return,the,configured,destination,prefixes,if,any;public,collection,string,get,destination,prefixes,return,this,destination,prefixes
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1386363047;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1397429525;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1403856366;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1404880799;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1405378165;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1411159659;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1411389021;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1419881658;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1426789284;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers(java.util.List)}._<p>Sub-classes should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers(java.util.List)}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,java,util,list,p,sub,classes,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers,java,util,list;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1426869344;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1427240641;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1431461099;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1432125256;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1432286953;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1432299978;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1436276619;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1438078548;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1447077465;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1448483163;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1448500177;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1449703897;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1455836956;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1467457413;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1467463695;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1467465454;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1467730834;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1495868221;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1496837955;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1497251962;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1497362807;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1500448076;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1500457438;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1516413763;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1518772998;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1523498072;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1528667947;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1531942400;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;1532091916;Return the list of argument resolvers to use. Invoked only if the resolvers_have not already been set via {@link #setArgumentResolvers}._<p>Subclasses should also take into account custom argument types configured via_{@link #setCustomArgumentResolvers}.;protected abstract List<? extends HandlerMethodArgumentResolver> initArgumentResolvers()_;return,the,list,of,argument,resolvers,to,use,invoked,only,if,the,resolvers,have,not,already,been,set,via,link,set,argument,resolvers,p,subclasses,should,also,take,into,account,custom,argument,types,configured,via,link,set,custom,argument,resolvers;protected,abstract,list,extends,handler,method,argument,resolver,init,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1411159659;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1411389021;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1419881658;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1426789284;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1426869344;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1427240641;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1431461099;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1432125256;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1432286953;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1432299978;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1436276619;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1438078548;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1447077465;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1448483163;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1448500177;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1449703897;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1455836956;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1467457413;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1467463695;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1467465454;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1467730834;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1495868221;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1496837955;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1497251962;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1497362807;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1500448076;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1500457438;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1516413763;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1518772998;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1523498072;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1528667947;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1531942400;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers();1532091916;Return the configured custom return value handlers, if any.;public List<HandlerMethodReturnValueHandler> getCustomReturnValueHandlers() {_		return this.customReturnValueHandlers__	};return,the,configured,custom,return,value,handlers,if,any;public,list,handler,method,return,value,handler,get,custom,return,value,handlers,return,this,custom,return,value,handlers
AbstractMethodMessageHandler -> protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans);1426789284;Sub-classes can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans) {_		if (beans == null) {_			return__		}_		for (MessagingAdviceBean bean : beans) {_			Class<?> beanType = bean.getBeanType()__			AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(beanType)__			if (resolver.hasExceptionMappings()) {_				this.exceptionHandlerAdviceCache.put(bean, resolver)__				logger.info("Detected @MessageExceptionHandler methods in " + bean)__			}_		}_	};sub,classes,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,init,messaging,advice,cache,list,messaging,advice,bean,beans,if,beans,null,return,for,messaging,advice,bean,bean,beans,class,bean,type,bean,get,bean,type,annotation,exception,handler,method,resolver,resolver,new,annotation,exception,handler,method,resolver,bean,type,if,resolver,has,exception,mappings,this,exception,handler,advice,cache,put,bean,resolver,logger,info,detected,message,exception,handler,methods,in,bean
AbstractMethodMessageHandler -> protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans);1426869344;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans) {_		if (beans == null) {_			return__		}_		for (MessagingAdviceBean bean : beans) {_			Class<?> beanType = bean.getBeanType()__			AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(beanType)__			if (resolver.hasExceptionMappings()) {_				this.exceptionHandlerAdviceCache.put(bean, resolver)__				logger.info("Detected @MessageExceptionHandler methods in " + bean)__			}_		}_	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,init,messaging,advice,cache,list,messaging,advice,bean,beans,if,beans,null,return,for,messaging,advice,bean,bean,beans,class,bean,type,bean,get,bean,type,annotation,exception,handler,method,resolver,resolver,new,annotation,exception,handler,method,resolver,bean,type,if,resolver,has,exception,mappings,this,exception,handler,advice,cache,put,bean,resolver,logger,info,detected,message,exception,handler,methods,in,bean
AbstractMethodMessageHandler -> protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans);1427240641;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void initMessagingAdviceCache(List<MessagingAdviceBean> beans) {_		if (beans == null) {_			return__		}_		for (MessagingAdviceBean bean : beans) {_			Class<?> beanType = bean.getBeanType()__			AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(beanType)__			if (resolver.hasExceptionMappings()) {_				this.exceptionHandlerAdviceCache.put(bean, resolver)__				logger.info("Detected @MessageExceptionHandler methods in " + bean)__			}_		}_	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,init,messaging,advice,cache,list,messaging,advice,bean,beans,if,beans,null,return,for,messaging,advice,bean,bean,beans,class,bean,type,bean,get,bean,type,annotation,exception,handler,method,resolver,resolver,new,annotation,exception,handler,method,resolver,bean,type,if,resolver,has,exception,mappings,this,exception,handler,advice,cache,put,bean,resolver,logger,info,detected,message,exception,handler,methods,in,bean
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1386363047;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.")__		this.customReturnValueHandlers = customReturnValueHandlers__	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,assert,not,null,custom,return,value,handlers,the,custom,return,value,handlers,cannot,be,null,this,custom,return,value,handlers,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1397429525;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.")__		this.customReturnValueHandlers = customReturnValueHandlers__	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,assert,not,null,custom,return,value,handlers,the,custom,return,value,handlers,cannot,be,null,this,custom,return,value,handlers,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1403856366;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.")__		this.customReturnValueHandlers = customReturnValueHandlers__	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,assert,not,null,custom,return,value,handlers,the,custom,return,value,handlers,cannot,be,null,this,custom,return,value,handlers,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1404880799;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.")__		this.customReturnValueHandlers = customReturnValueHandlers__	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,assert,not,null,custom,return,value,handlers,the,custom,return,value,handlers,cannot,be,null,this,custom,return,value,handlers,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1405378165;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		Assert.notNull(customReturnValueHandlers, "The 'customReturnValueHandlers' cannot be null.")__		this.customReturnValueHandlers = customReturnValueHandlers__	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,assert,not,null,custom,return,value,handlers,the,custom,return,value,handlers,cannot,be,null,this,custom,return,value,handlers,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1411159659;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1411389021;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1419881658;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1426789284;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1426869344;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1427240641;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1431461099;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1432125256;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1432286953;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1432299978;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1436276619;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1438078548;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1447077465;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1448483163;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1448500177;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1449703897;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1455836956;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1467457413;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types._@param customReturnValueHandlers the list of custom return value handlers, never {@code null}.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types,param,custom,return,value,handlers,the,list,of,custom,return,value,handlers,never,code,null;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1467463695;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1467465454;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1467730834;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1495868221;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1386363047;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1397429525;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1403856366;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1404880799;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1405378165;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1411159659;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1411389021;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1419881658;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1426789284;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers(java.util.List)}._<p>Sub-classes should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers(java.util.List)}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,java,util,list,p,sub,classes,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers,java,util,list;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1426869344;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1427240641;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1431461099;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1432125256;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1432286953;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1432299978;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1436276619;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1438078548;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1447077465;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1448483163;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1448500177;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1449703897;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1455836956;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1467457413;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1467463695;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1467465454;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1467730834;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1495868221;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1496837955;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1497251962;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1497362807;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1500448076;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1500457438;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1516413763;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1518772998;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1523498072;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1528667947;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1531942400;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;1532091916;Return the list of return value handlers to use. Invoked only if the return_value handlers have not already been set via {@link #setReturnValueHandlers}._<p>Subclasses should also take into account custom return value types configured_via {@link #setCustomReturnValueHandlers}.;protected abstract List<? extends HandlerMethodReturnValueHandler> initReturnValueHandlers()_;return,the,list,of,return,value,handlers,to,use,invoked,only,if,the,return,value,handlers,have,not,already,been,set,via,link,set,return,value,handlers,p,subclasses,should,also,take,into,account,custom,return,value,types,configured,via,link,set,custom,return,value,handlers;protected,abstract,list,extends,handler,method,return,value,handler,init,return,value,handlers
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1467463695;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1467465454;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1467730834;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1495868221;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1496837955;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1497251962;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1497362807;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1500448076;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1500457438;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1516413763;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1518772998;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1523498072;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1528667947;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1531942400;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice( 			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1532091916;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(_			MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {__		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> @Nullable 	protected Log getHandlerMethodLogger();1531942400;Return a logger to set on {@link InvocableHandlerMethod}._@since 5.1;@Nullable_	protected Log getHandlerMethodLogger() {_		return null__	};return,a,logger,to,set,on,link,invocable,handler,method,since,5,1;nullable,protected,log,get,handler,method,logger,return,null
AbstractMethodMessageHandler -> @Nullable 	protected Log getHandlerMethodLogger();1532091916;Return a logger to set on {@link InvocableHandlerMethod}._@since 5.1;@Nullable_	protected Log getHandlerMethodLogger() {_		return null__	};return,a,logger,to,set,on,link,invocable,handler,method,since,5,1;nullable,protected,log,get,handler,method,logger,return,null
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1495868221;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1496837955;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1497251962;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1497362807;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1500448076;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1500457438;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1516413763;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1518772998;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1523498072;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1528667947;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1531942400;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1532091916;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;@Nullable_	protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;nullable,protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1386363047;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1397429525;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1403856366;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1404880799;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1405378165;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1411159659;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1411389021;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1419881658;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1426789284;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1426869344;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1427240641;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1431461099;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1432125256;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1432286953;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1432299978;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1436276619;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1438078548;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1447077465;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1448483163;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1448500177;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1449703897;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1455836956;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1467457413;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1467463695;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1467465454;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1467730834;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1495868221;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1496837955;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1497251962;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1497362807;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1500448076;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1500457438;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1516413763;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1518772998;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1523498072;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1528667947;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1531942400;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> public Map<T, HandlerMethod> getHandlerMethods();1532091916;Return a map with all handler methods and their mappings.;public Map<T, HandlerMethod> getHandlerMethods() {_		return Collections.unmodifiableMap(this.handlerMethods)__	};return,a,map,with,all,handler,methods,and,their,mappings;public,map,t,handler,method,get,handler,methods,return,collections,unmodifiable,map,this,handler,methods
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1386363047;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1397429525;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1403856366;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1404880799;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1405378165;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1411159659;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1411389021;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1419881658;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1426789284;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1426869344;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1427240641;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1431461099;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1432125256;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1432286953;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1432299978;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1436276619;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1438078548;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1447077465;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1448483163;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1448500177;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1449703897;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1455836956;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1467457413;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1467463695;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1467465454;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1467730834;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1495868221;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1496837955;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1497251962;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1497362807;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1500448076;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1500457438;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1516413763;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1518772998;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1523498072;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1528667947;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1531942400;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected abstract boolean isHandler(Class<?> beanType)_;1532091916;Whether the given bean type should be introspected for messaging handling methods.;protected abstract boolean isHandler(Class<?> beanType)_;whether,the,given,bean,type,should,be,introspected,for,messaging,handling,methods;protected,abstract,boolean,is,handler,class,bean,type
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1386363047;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1397429525;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1403856366;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1404880799;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1405378165;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1411159659;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1411389021;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1419881658;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1426789284;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, this.applicationContext, method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1426869344;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1427240641;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1431461099;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1432125256;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1432286953;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1432299978;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1436276619;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1438078548;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1447077465;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1448483163;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1448500177;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1449703897;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1455836956;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1467457413;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1467463695;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1467465454;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1467730834;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1495868221;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1496837955;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1497251962;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1497362807;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1500448076;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName,_					this.applicationContext.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,this,application,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1500457438;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1516413763;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1518772998;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1523498072;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1528667947;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1531942400;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected HandlerMethod createHandlerMethod(Object handler, Method method);1532091916;Create a HandlerMethod instance from an Object handler that is either a handler_instance or a String-based bean name.;protected HandlerMethod createHandlerMethod(Object handler, Method method) {_		HandlerMethod handlerMethod__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			String beanName = (String) handler__			handlerMethod = new HandlerMethod(beanName, context.getAutowireCapableBeanFactory(), method)__		}_		else {_			handlerMethod = new HandlerMethod(handler, method)__		}_		return handlerMethod__	};create,a,handler,method,instance,from,an,object,handler,that,is,either,a,handler,instance,or,a,string,based,bean,name;protected,handler,method,create,handler,method,object,handler,method,method,handler,method,handler,method,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,string,bean,name,string,handler,handler,method,new,handler,method,bean,name,context,get,autowire,capable,bean,factory,method,else,handler,method,new,handler,method,handler,method,return,handler,method
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1386363047;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1397429525;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1403856366;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1404880799;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1405378165;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1411159659;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1411389021;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1419881658;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1426789284;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1426869344;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1427240641;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1431461099;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1432125256;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1432286953;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1432299978;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1436276619;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1438078548;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1447077465;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1448483163;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1448500177;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1449703897;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1455836956;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1467457413;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1467463695;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1467465454;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1467730834;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1495868221;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1496837955;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1497251962;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1497362807;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1500448076;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1500457438;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1516413763;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1518772998;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1523498072;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1528667947;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1531942400;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> protected abstract Set<String> getDirectLookupDestinations(T mapping)_;1532091916;Return destinations contained in the mapping that are not patterns and are_therefore suitable for direct lookups.;protected abstract Set<String> getDirectLookupDestinations(T mapping)_;return,destinations,contained,in,the,mapping,that,are,not,patterns,and,are,therefore,suitable,for,direct,lookups;protected,abstract,set,string,get,direct,lookup,destinations,t,mapping
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1386363047;Configure one or more prefixes to match to the destinations of handled messages._Messages whose destination does not start with one of the configured prefixes_are ignored. When a destination matches one of the configured prefixes, the_matching part is removed from destination before performing a lookup for a matching_message handling method. Prefixes without a trailing slash will have one appended_automatically._<p>By default the list of prefixes is empty in which case all destinations match.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				if (!prefix.endsWith("/")) {_					prefix += "/"__				}_				this.destinationPrefixes.add(prefix)__			}_		}_	};configure,one,or,more,prefixes,to,match,to,the,destinations,of,handled,messages,messages,whose,destination,does,not,start,with,one,of,the,configured,prefixes,are,ignored,when,a,destination,matches,one,of,the,configured,prefixes,the,matching,part,is,removed,from,destination,before,performing,a,lookup,for,a,matching,message,handling,method,prefixes,without,a,trailing,slash,will,have,one,appended,automatically,p,by,default,the,list,of,prefixes,is,empty,in,which,case,all,destinations,match;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,if,prefix,ends,with,prefix,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1397429525;Configure one or more prefixes to match to the destinations of handled messages._Messages whose destination does not start with one of the configured prefixes_are ignored. When a destination matches one of the configured prefixes, the_matching part is removed from destination before performing a lookup for a matching_message handling method. Prefixes without a trailing slash will have one appended_automatically._<p>By default the list of prefixes is empty in which case all destinations match.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				if (!prefix.endsWith("/")) {_					prefix += "/"__				}_				this.destinationPrefixes.add(prefix)__			}_		}_	};configure,one,or,more,prefixes,to,match,to,the,destinations,of,handled,messages,messages,whose,destination,does,not,start,with,one,of,the,configured,prefixes,are,ignored,when,a,destination,matches,one,of,the,configured,prefixes,the,matching,part,is,removed,from,destination,before,performing,a,lookup,for,a,matching,message,handling,method,prefixes,without,a,trailing,slash,will,have,one,appended,automatically,p,by,default,the,list,of,prefixes,is,empty,in,which,case,all,destinations,match;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,if,prefix,ends,with,prefix,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1403856366;Configure one or more prefixes to match to the destinations of handled messages._Messages whose destination does not start with one of the configured prefixes_are ignored. When a destination matches one of the configured prefixes, the_matching part is removed from destination before performing a lookup for a matching_message handling method. Prefixes without a trailing slash will have one appended_automatically._<p>By default the list of prefixes is empty in which case all destinations match.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				if (!prefix.endsWith("/")) {_					prefix += "/"__				}_				this.destinationPrefixes.add(prefix)__			}_		}_	};configure,one,or,more,prefixes,to,match,to,the,destinations,of,handled,messages,messages,whose,destination,does,not,start,with,one,of,the,configured,prefixes,are,ignored,when,a,destination,matches,one,of,the,configured,prefixes,the,matching,part,is,removed,from,destination,before,performing,a,lookup,for,a,matching,message,handling,method,prefixes,without,a,trailing,slash,will,have,one,appended,automatically,p,by,default,the,list,of,prefixes,is,empty,in,which,case,all,destinations,match;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,if,prefix,ends,with,prefix,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1404880799;Configure one or more prefixes to match to the destinations of handled messages._Messages whose destination does not start with one of the configured prefixes_are ignored. When a destination matches one of the configured prefixes, the_matching part is removed from destination before performing a lookup for a matching_message handling method. Prefixes without a trailing slash will have one appended_automatically._<p>By default the list of prefixes is empty in which case all destinations match.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				if (!prefix.endsWith("/")) {_					prefix += "/"__				}_				this.destinationPrefixes.add(prefix)__			}_		}_	};configure,one,or,more,prefixes,to,match,to,the,destinations,of,handled,messages,messages,whose,destination,does,not,start,with,one,of,the,configured,prefixes,are,ignored,when,a,destination,matches,one,of,the,configured,prefixes,the,matching,part,is,removed,from,destination,before,performing,a,lookup,for,a,matching,message,handling,method,prefixes,without,a,trailing,slash,will,have,one,appended,automatically,p,by,default,the,list,of,prefixes,is,empty,in,which,case,all,destinations,match;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,if,prefix,ends,with,prefix,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1405378165;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes.__<p>By default no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1411159659;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes.__<p>By default no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1411389021;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes.__<p>By default no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1419881658;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1426789284;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1426869344;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1427240641;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1431461099;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1432125256;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1432286953;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1432299978;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1436276619;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1438078548;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1447077465;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1448483163;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1448500177;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1449703897;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1455836956;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1467457413;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1467463695;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1467465454;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1467730834;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(Collection<String> prefixes);1495868221;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1496837955;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1497251962;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1497362807;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1500448076;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1500457438;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1516413763;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1518772998;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1523498072;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1528667947;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1531942400;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers);1532091916;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,nullable,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1386363047;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1397429525;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1403856366;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1404880799;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1405378165;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1411159659;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1411389021;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1419881658;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1426789284;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1426869344;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1427240641;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1431461099;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1432125256;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1432286953;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1432299978;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1436276619;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1438078548;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1447077465;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1448483163;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1448500177;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1449703897;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1455836956;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1467457413;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1467463695;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1467465454;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1467730834;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1496837955;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1497251962;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1497362807;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1500448076;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1500457438;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1516413763;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1518772998;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1523498072;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1528667947;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1531942400;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers);1532091916;Set the list of custom {@code HandlerMethodReturnValueHandler}s that will be used_after return value handlers for known types.;public void setCustomReturnValueHandlers(@Nullable List<HandlerMethodReturnValueHandler> customReturnValueHandlers) {_		this.customReturnValueHandlers.clear()__		if (customReturnValueHandlers != null) {_			this.customReturnValueHandlers.addAll(customReturnValueHandlers)__		}_	};set,the,list,of,custom,code,handler,method,return,value,handler,s,that,will,be,used,after,return,value,handlers,for,known,types;public,void,set,custom,return,value,handlers,nullable,list,handler,method,return,value,handler,custom,return,value,handlers,this,custom,return,value,handlers,clear,if,custom,return,value,handlers,null,this,custom,return,value,handlers,add,all,custom,return,value,handlers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1386363047;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1397429525;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1403856366;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1404880799;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1405378165;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1411159659;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1411389021;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1419881658;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1426789284;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers(java.util.List)}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers,java,util,list;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1426869344;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1427240641;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1431461099;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1432125256;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1432286953;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1432299978;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1436276619;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1438078548;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1447077465;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1448483163;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1448500177;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1449703897;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1455836956;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1467457413;Configure the complete list of supported argument types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1467463695;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1467465454;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1467730834;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers);1495868221;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1467463695;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1467465454;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1467730834;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1495868221;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1496837955;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1497251962;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1497362807;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1500448076;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1500457438;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1516413763;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1518772998;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1523498072;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1528667947;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1531942400;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public List<HandlerMethodReturnValueHandler> getReturnValueHandlers();1532091916;Return the complete list of return value handlers.;public List<HandlerMethodReturnValueHandler> getReturnValueHandlers() {_		return this.returnValueHandlers.getReturnValueHandlers()__	};return,the,complete,list,of,return,value,handlers;public,list,handler,method,return,value,handler,get,return,value,handlers,return,this,return,value,handlers,get,return,value,handlers
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1496837955;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1497251962;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1497362807;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1500448076;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1500457438;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1516413763;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1518772998;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1523498072;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1528667947;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1531942400;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setDestinationPrefixes(@Nullable Collection<String> prefixes);1532091916;When this property is configured only messages to destinations matching_one of the configured prefixes are eligible for handling. When there is a_match the prefix is removed and only the remaining part of the destination_is used for method-mapping purposes._<p>By default, no prefixes are configured in which case all messages are_eligible for handling.;public void setDestinationPrefixes(@Nullable Collection<String> prefixes) {_		this.destinationPrefixes.clear()__		if (prefixes != null) {_			for (String prefix : prefixes) {_				prefix = prefix.trim()__				this.destinationPrefixes.add(prefix)__			}_		}_	};when,this,property,is,configured,only,messages,to,destinations,matching,one,of,the,configured,prefixes,are,eligible,for,handling,when,there,is,a,match,the,prefix,is,removed,and,only,the,remaining,part,of,the,destination,is,used,for,method,mapping,purposes,p,by,default,no,prefixes,are,configured,in,which,case,all,messages,are,eligible,for,handling;public,void,set,destination,prefixes,nullable,collection,string,prefixes,this,destination,prefixes,clear,if,prefixes,null,for,string,prefix,prefixes,prefix,prefix,trim,this,destination,prefixes,add,prefix
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1496837955;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1497251962;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1497362807;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1500448076;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1500457438;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1516413763;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1518772998;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1523498072;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1528667947;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1531942400;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers);1532091916;Configure the complete list of supported argument types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomArgumentResolvers}.;public void setArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> argumentResolvers) {_		if (argumentResolvers == null) {_			this.argumentResolvers.clear()__			return__		}_		this.argumentResolvers.addResolvers(argumentResolvers)__	};configure,the,complete,list,of,supported,argument,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,argument,resolvers;public,void,set,argument,resolvers,nullable,list,handler,method,argument,resolver,argument,resolvers,if,argument,resolvers,null,this,argument,resolvers,clear,return,this,argument,resolvers,add,resolvers,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1467463695;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1467465454;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1467730834;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1495868221;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1496837955;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1497251962;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1497362807;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1500448076;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1500457438;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1516413763;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1518772998;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1523498072;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1528667947;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1531942400;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getArgumentResolvers();1532091916;Return the complete list of argument resolvers.;public List<HandlerMethodArgumentResolver> getArgumentResolvers() {_		return this.argumentResolvers.getResolvers()__	};return,the,complete,list,of,argument,resolvers;public,list,handler,method,argument,resolver,get,argument,resolvers,return,this,argument,resolvers,get,resolvers
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1386363047;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1397429525;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1403856366;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1404880799;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1405378165;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1411159659;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1411389021;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1419881658;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1426789284;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {__		Class<?> handlerType = (handler instanceof String) ?_				this.applicationContext.getType((String) handler) : handler.getClass()___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1426869344;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1427240641;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1431461099;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1432125256;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1432286953;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1432299978;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1436276619;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(Object handler);1438078548;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Set<Method> methods = HandlerMethodSelector.selectMethods(userType, new ReflectionUtils.MethodFilter() {_			@Override_			public boolean matches(Method method) {_				return getMappingForMethod(method, userType) != null__			}_		})___		for (Method method : methods) {_			T mapping = getMappingForMethod(method, userType)__			registerHandlerMethod(handler, method, mapping)__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,set,method,methods,handler,method,selector,select,methods,user,type,new,reflection,utils,method,filter,override,public,boolean,matches,method,method,return,get,mapping,for,method,method,user,type,null,for,method,method,methods,t,mapping,get,mapping,for,method,method,user,type,register,handler,method,handler,method,mapping
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1496837955;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1497251962;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1497362807;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1500448076;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1500457438;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1516413763;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1518772998;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1523498072;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1528667947;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1531942400;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers);1532091916;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(@Nullable List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,nullable,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1496837955;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1497251962;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1497362807;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1500448076;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1500457438;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1516413763;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected String getLookupDestination(@Nullable String destination);1518772998;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1495868221;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1496837955;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1497251962;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1497362807;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1500448076;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1500457438;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1516413763;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1518772998;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1523498072;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1528667947;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1531942400;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> @Nullable 	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;1532091916;Check if a mapping matches the current message and return a possibly_new mapping with conditions relevant to the current request._@param mapping the mapping to get a match for_@param message the message being handled_@return the match or {@code null} if there is no match;@Nullable_	protected abstract T getMatchingMapping(T mapping, Message<?> message)_;check,if,a,mapping,matches,the,current,message,and,return,a,possibly,new,mapping,with,conditions,relevant,to,the,current,request,param,mapping,the,mapping,to,get,a,match,for,param,message,the,message,being,handled,return,the,match,or,code,null,if,there,is,no,match;nullable,protected,abstract,t,get,matching,mapping,t,mapping,message,message
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1386363047;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1397429525;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1403856366;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1404880799;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1405378165;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1411159659;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1411389021;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1419881658;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1426789284;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers(java.util.List)};public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers,java,util,list;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1426869344;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1427240641;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1431461099;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1432125256;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1432286953;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1432299978;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1436276619;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1438078548;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1447077465;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1448483163;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1448500177;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1449703897;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1455836956;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1467457413;Configure the complete list of supported return value types effectively overriding_the ones configured by default. This is an advanced option. For most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1467463695;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1467465454;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1467730834;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers);1495868221;Configure the complete list of supported return value types, effectively overriding_the ones configured by default. This is an advanced option_ for most use cases_it should be sufficient to use {@link #setCustomReturnValueHandlers}.;public void setReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) {_		if (returnValueHandlers == null) {_			this.returnValueHandlers.clear()__			return__		}_		this.returnValueHandlers.addHandlers(returnValueHandlers)__	};configure,the,complete,list,of,supported,return,value,types,effectively,overriding,the,ones,configured,by,default,this,is,an,advanced,option,for,most,use,cases,it,should,be,sufficient,to,use,link,set,custom,return,value,handlers;public,void,set,return,value,handlers,list,handler,method,return,value,handler,return,value,handlers,if,return,value,handlers,null,this,return,value,handlers,clear,return,this,return,value,handlers,add,handlers,return,value,handlers
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1447077465;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1448483163;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1448500177;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1449703897;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1455836956;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1467457413;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1467463695;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1467465454;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1467730834;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1495868221;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())__		final Class<?> userType = ClassUtils.getUserClass(handlerType)___		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_				new MethodIntrospector.MetadataLookup<T>() {_					@Override_					public T inspect(Method method) {_						return getMappingForMethod(method, userType)__					}_				})___		if (logger.isDebugEnabled()) {_			logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__		}_		for (Map.Entry<Method, T> entry : methods.entrySet()) {_			registerHandlerMethod(handler, entry.getKey(), entry.getValue())__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,new,method,introspector,metadata,lookup,t,override,public,t,inspect,method,method,return,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1496837955;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			for (Map.Entry<Method, T> entry : methods.entrySet()) {_				registerHandlerMethod(handler, entry.getKey(), entry.getValue())__			}_		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1497251962;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			for (Map.Entry<Method, T> entry : methods.entrySet()) {_				registerHandlerMethod(handler, entry.getKey(), entry.getValue())__			}_		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,for,map,entry,method,t,entry,methods,entry,set,register,handler,method,handler,entry,get,key,entry,get,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1497362807;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1500448076;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType = (handler instanceof String ?_				this.applicationContext.getType((String) handler) : handler.getClass())___		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,handler,instanceof,string,this,application,context,get,type,string,handler,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1500457438;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1516413763;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1518772998;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1523498072;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1528667947;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1531942400;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected final void detectHandlerMethods(final Object handler);1532091916;Detect if the given handler has any methods that can handle messages and if_so register it with the extracted mapping information._@param handler the handler to check, either an instance of a Spring bean name;protected final void detectHandlerMethods(final Object handler) {_		Class<?> handlerType__		if (handler instanceof String) {_			ApplicationContext context = getApplicationContext()__			Assert.state(context != null, "ApplicationContext is required for resolving handler bean names")__			handlerType = context.getType((String) handler)__		}_		else {_			handlerType = handler.getClass()__		}__		if (handlerType != null) {_			final Class<?> userType = ClassUtils.getUserClass(handlerType)__			Map<Method, T> methods = MethodIntrospector.selectMethods(userType,_					(MethodIntrospector.MetadataLookup<T>) method -> getMappingForMethod(method, userType))__			if (logger.isDebugEnabled()) {_				logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods)__			}_			methods.forEach((key, value) -> registerHandlerMethod(handler, key, value))__		}_	};detect,if,the,given,handler,has,any,methods,that,can,handle,messages,and,if,so,register,it,with,the,extracted,mapping,information,param,handler,the,handler,to,check,either,an,instance,of,a,spring,bean,name;protected,final,void,detect,handler,methods,final,object,handler,class,handler,type,if,handler,instanceof,string,application,context,context,get,application,context,assert,state,context,null,application,context,is,required,for,resolving,handler,bean,names,handler,type,context,get,type,string,handler,else,handler,type,handler,get,class,if,handler,type,null,final,class,user,type,class,utils,get,user,class,handler,type,map,method,t,methods,method,introspector,select,methods,user,type,method,introspector,metadata,lookup,t,method,get,mapping,for,method,method,user,type,if,logger,is,debug,enabled,logger,debug,methods,size,message,handler,methods,found,on,user,type,methods,methods,for,each,key,value,register,handler,method,handler,key,value
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1386363047;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1397429525;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1403856366;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1404880799;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1405378165;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1411159659;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1411389021;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1419881658;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1426789284;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1426869344;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1427240641;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1431461099;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1432125256;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1432286953;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1432299978;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1436276619;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1438078548;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1447077465;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1448483163;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1448500177;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1449703897;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1455836956;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1467457413;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1467463695;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1467465454;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;1467730834;Provide the mapping for a handler method._@param method the method to provide a mapping for_@param handlerType the handler type, possibly a sub-type of the method's declaring class_@return the mapping, or {@code null} if the method is not mapped;protected abstract T getMappingForMethod(Method method, Class<?> handlerType)_;provide,the,mapping,for,a,handler,method,param,method,the,method,to,provide,a,mapping,for,param,handler,type,the,handler,type,possibly,a,sub,type,of,the,method,s,declaring,class,return,the,mapping,or,code,null,if,the,method,is,not,mapped;protected,abstract,t,get,mapping,for,method,method,method,class,handler,type
AbstractMethodMessageHandler -> @SuppressWarnings("ForLoopReplaceableByForEach") 	@Nullable 	protected String getLookupDestination(@Nullable String destination);1523498072;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@SuppressWarnings("ForLoopReplaceableByForEach")_	@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (int i = 0_ i < this.destinationPrefixes.size()_ i++) {_			String prefix = this.destinationPrefixes.get(i)__			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;suppress,warnings,for,loop,replaceable,by,for,each,nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,int,i,0,i,this,destination,prefixes,size,i,string,prefix,this,destination,prefixes,get,i,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @SuppressWarnings("ForLoopReplaceableByForEach") 	@Nullable 	protected String getLookupDestination(@Nullable String destination);1528667947;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@SuppressWarnings("ForLoopReplaceableByForEach")_	@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (int i = 0_ i < this.destinationPrefixes.size()_ i++) {_			String prefix = this.destinationPrefixes.get(i)__			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;suppress,warnings,for,loop,replaceable,by,for,each,nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,int,i,0,i,this,destination,prefixes,size,i,string,prefix,this,destination,prefixes,get,i,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @SuppressWarnings("ForLoopReplaceableByForEach") 	@Nullable 	protected String getLookupDestination(@Nullable String destination);1531942400;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@SuppressWarnings("ForLoopReplaceableByForEach")_	@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (int i = 0_ i < this.destinationPrefixes.size()_ i++) {_			String prefix = this.destinationPrefixes.get(i)__			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;suppress,warnings,for,loop,replaceable,by,for,each,nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,int,i,0,i,this,destination,prefixes,size,i,string,prefix,this,destination,prefixes,get,i,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @SuppressWarnings("ForLoopReplaceableByForEach") 	@Nullable 	protected String getLookupDestination(@Nullable String destination);1532091916;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;@SuppressWarnings("ForLoopReplaceableByForEach")_	@Nullable_	protected String getLookupDestination(@Nullable String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (int i = 0_ i < this.destinationPrefixes.size()_ i++) {_			String prefix = this.destinationPrefixes.get(i)__			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;suppress,warnings,for,loop,replaceable,by,for,each,nullable,protected,string,get,lookup,destination,nullable,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,int,i,0,i,this,destination,prefixes,size,i,string,prefix,this,destination,prefixes,get,i,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> @Nullable 	protected Log getReturnValueHandlerLogger();1531942400;Return a logger to set on {@link HandlerMethodReturnValueHandlerComposite}._@since 5.1;@Nullable_	protected Log getReturnValueHandlerLogger() {_		return null__	};return,a,logger,to,set,on,link,handler,method,return,value,handler,composite,since,5,1;nullable,protected,log,get,return,value,handler,logger,return,null
AbstractMethodMessageHandler -> @Nullable 	protected Log getReturnValueHandlerLogger();1532091916;Return a logger to set on {@link HandlerMethodReturnValueHandlerComposite}._@since 5.1;@Nullable_	protected Log getReturnValueHandlerLogger() {_		return null__	};return,a,logger,to,set,on,link,handler,method,return,value,handler,composite,since,5,1;nullable,protected,log,get,return,value,handler,logger,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1386363047;Find if the given destination matches any of the configured allowed destination_prefixes and if a match is found return the destination with the prefix removed._<p>If no destination prefixes are configured, the destination is returned as is._@return the destination to use to find matching message handling methods_or {@code null} if the destination does not match;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length() - 1)__			}_		}_		return null__	};find,if,the,given,destination,matches,any,of,the,configured,allowed,destination,prefixes,and,if,a,match,is,found,return,the,destination,with,the,prefix,removed,p,if,no,destination,prefixes,are,configured,the,destination,is,returned,as,is,return,the,destination,to,use,to,find,matching,message,handling,methods,or,code,null,if,the,destination,does,not,match;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,1,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1397429525;Find if the given destination matches any of the configured allowed destination_prefixes and if a match is found return the destination with the prefix removed._<p>If no destination prefixes are configured, the destination is returned as is._@return the destination to use to find matching message handling methods_or {@code null} if the destination does not match;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length() - 1)__			}_		}_		return null__	};find,if,the,given,destination,matches,any,of,the,configured,allowed,destination,prefixes,and,if,a,match,is,found,return,the,destination,with,the,prefix,removed,p,if,no,destination,prefixes,are,configured,the,destination,is,returned,as,is,return,the,destination,to,use,to,find,matching,message,handling,methods,or,code,null,if,the,destination,does,not,match;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,1,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1403856366;Find if the given destination matches any of the configured allowed destination_prefixes and if a match is found return the destination with the prefix removed._<p>If no destination prefixes are configured, the destination is returned as is._@return the destination to use to find matching message handling methods_or {@code null} if the destination does not match;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length() - 1)__			}_		}_		return null__	};find,if,the,given,destination,matches,any,of,the,configured,allowed,destination,prefixes,and,if,a,match,is,found,return,the,destination,with,the,prefix,removed,p,if,no,destination,prefixes,are,configured,the,destination,is,returned,as,is,return,the,destination,to,use,to,find,matching,message,handling,methods,or,code,null,if,the,destination,does,not,match;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,1,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1404880799;Find if the given destination matches any of the configured allowed destination_prefixes and if a match is found return the destination with the prefix removed._<p>If no destination prefixes are configured, the destination is returned as is._@return the destination to use to find matching message handling methods_or {@code null} if the destination does not match;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length() - 1)__			}_		}_		return null__	};find,if,the,given,destination,matches,any,of,the,configured,allowed,destination,prefixes,and,if,a,match,is,found,return,the,destination,with,the,prefix,removed,p,if,no,destination,prefixes,are,configured,the,destination,is,returned,as,is,return,the,destination,to,use,to,find,matching,message,handling,methods,or,code,null,if,the,destination,does,not,match;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,1,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1405378165;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1411159659;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1411389021;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1419881658;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1426789284;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1426869344;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1427240641;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1431461099;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1432125256;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1432286953;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1432299978;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1436276619;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1438078548;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1447077465;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1448483163;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1448500177;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1449703897;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1455836956;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1467457413;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1467463695;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1467465454;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected String getLookupDestination(String destination);1467730834;Check whether the given destination (of an incoming message) matches to_one of the configured destination prefixes and if so return the remaining_portion of the destination after the matched prefix._<p>If there are no matching prefixes, return {@code null}._<p>If there are no destination prefixes, return the destination as is.;protected String getLookupDestination(String destination) {_		if (destination == null) {_			return null__		}_		if (CollectionUtils.isEmpty(this.destinationPrefixes)) {_			return destination__		}_		for (String prefix : this.destinationPrefixes) {_			if (destination.startsWith(prefix)) {_				return destination.substring(prefix.length())__			}_		}_		return null__	};check,whether,the,given,destination,of,an,incoming,message,matches,to,one,of,the,configured,destination,prefixes,and,if,so,return,the,remaining,portion,of,the,destination,after,the,matched,prefix,p,if,there,are,no,matching,prefixes,return,code,null,p,if,there,are,no,destination,prefixes,return,the,destination,as,is;protected,string,get,lookup,destination,string,destination,if,destination,null,return,null,if,collection,utils,is,empty,this,destination,prefixes,return,destination,for,string,prefix,this,destination,prefixes,if,destination,starts,with,prefix,return,destination,substring,prefix,length,return,null
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1431461099;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1432125256;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1432286953;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1432299978;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1436276619;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1438078548;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1447077465;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1448483163;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1448500177;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1449703897;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1455836956;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver);1467457413;Subclasses can invoke this method to populate the MessagingAdviceBean cache_(e.g. to support "global" {@code @MessageExceptionHandler})._@since 4.2;protected void registerExceptionHandlerAdvice(MessagingAdviceBean bean, AbstractExceptionHandlerMethodResolver resolver) {_		this.exceptionHandlerAdviceCache.put(bean, resolver)__	};subclasses,can,invoke,this,method,to,populate,the,messaging,advice,bean,cache,e,g,to,support,global,code,message,exception,handler,since,4,2;protected,void,register,exception,handler,advice,messaging,advice,bean,bean,abstract,exception,handler,method,resolver,resolver,this,exception,handler,advice,cache,put,bean,resolver
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1495868221;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1496837955;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1497251962;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1497362807;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1500448076;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1500457438;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1516413763;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1518772998;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1523498072;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1528667947;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1531942400;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> @Nullable 	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1532091916;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;@Nullable_	protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;nullable,protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1411159659;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1411389021;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1419881658;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1426789284;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1426869344;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1427240641;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1431461099;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1432125256;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1432286953;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1432299978;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1436276619;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1438078548;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1447077465;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1448483163;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1448500177;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1449703897;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1455836956;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1467457413;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1467463695;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1467465454;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1467730834;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1495868221;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1496837955;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1497251962;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1497362807;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1500448076;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1500457438;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1516413763;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1518772998;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1523498072;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1528667947;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1531942400;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers();1532091916;Return the configured custom argument resolvers, if any.;public List<HandlerMethodArgumentResolver> getCustomArgumentResolvers() {_		return this.customArgumentResolvers__	};return,the,configured,custom,argument,resolvers,if,any;public,list,handler,method,argument,resolver,get,custom,argument,resolvers,return,this,custom,argument,resolvers
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1386363047;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1397429525;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1403856366;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1404880799;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1405378165;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1411159659;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1411389021;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1419881658;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1426789284;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean()_					+ "' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '"_					+ oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1426869344;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1427240641;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1431461099;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1432125256;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1432286953;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1432299978;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1436276619;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1438078548;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1447077465;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must bot be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,bot,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1448483163;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must bot be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,bot,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1448500177;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1449703897;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1455836956;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1467457413;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1467463695;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1467465454;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1467730834;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1495868221;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1496837955;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1497251962;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1497362807;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1500448076;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1500457438;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1516413763;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1518772998;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1523498072;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1528667947;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1531942400;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isInfoEnabled()) {_			logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,info,enabled,logger,info,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected void registerHandlerMethod(Object handler, Method method, T mapping);1532091916;Register a handler method and its unique mapping._@param handler the bean name of the handler or the handler instance_@param method the method to register_@param mapping the mapping conditions associated with the handler method_@throws IllegalStateException if another method was already registered_under the same mapping;protected void registerHandlerMethod(Object handler, Method method, T mapping) {_		Assert.notNull(mapping, "Mapping must not be null")__		HandlerMethod newHandlerMethod = createHandlerMethod(handler, method)__		HandlerMethod oldHandlerMethod = this.handlerMethods.get(mapping)___		if (oldHandlerMethod != null && !oldHandlerMethod.equals(newHandlerMethod)) {_			throw new IllegalStateException("Ambiguous mapping found. Cannot map '" + newHandlerMethod.getBean() +_					"' bean method \n" + newHandlerMethod + "\nto " + mapping + ": There is already '" +_					oldHandlerMethod.getBean() + "' bean method\n" + oldHandlerMethod + " mapped.")__		}__		this.handlerMethods.put(mapping, newHandlerMethod)__		if (logger.isTraceEnabled()) {_			logger.trace("Mapped \"" + mapping + "\" onto " + newHandlerMethod)__		}__		for (String pattern : getDirectLookupDestinations(mapping)) {_			this.destinationLookup.add(pattern, mapping)__		}_	};register,a,handler,method,and,its,unique,mapping,param,handler,the,bean,name,of,the,handler,or,the,handler,instance,param,method,the,method,to,register,param,mapping,the,mapping,conditions,associated,with,the,handler,method,throws,illegal,state,exception,if,another,method,was,already,registered,under,the,same,mapping;protected,void,register,handler,method,object,handler,method,method,t,mapping,assert,not,null,mapping,mapping,must,not,be,null,handler,method,new,handler,method,create,handler,method,handler,method,handler,method,old,handler,method,this,handler,methods,get,mapping,if,old,handler,method,null,old,handler,method,equals,new,handler,method,throw,new,illegal,state,exception,ambiguous,mapping,found,cannot,map,new,handler,method,get,bean,bean,method,n,new,handler,method,nto,mapping,there,is,already,old,handler,method,get,bean,bean,method,n,old,handler,method,mapped,this,handler,methods,put,mapping,new,handler,method,if,logger,is,trace,enabled,logger,trace,mapped,mapping,onto,new,handler,method,for,string,pattern,get,direct,lookup,destinations,mapping,this,destination,lookup,add,pattern,mapping
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1386363047;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1397429525;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1403856366;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1404880799;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1405378165;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1411159659;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1411389021;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1419881658;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1426789284;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1426869344;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1427240641;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1431461099;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1432125256;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1432286953;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1432299978;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1436276619;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1438078548;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1447077465;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1448483163;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1448500177;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1449703897;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1455836956;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1467457413;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1467463695;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1467465454;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1467730834;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1495868221;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1496837955;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1497251962;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1497362807;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1500448076;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1500457438;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1516413763;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1518772998;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1523498072;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1528667947;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1531942400;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> protected abstract Comparator<T> getMappingComparator(Message<?> message)_;1532091916;Return a comparator for sorting matching mappings._The returned comparator should sort 'better' matches higher._@param message the current Message_@return the comparator, never {@code null};protected abstract Comparator<T> getMappingComparator(Message<?> message)_;return,a,comparator,for,sorting,matching,mappings,the,returned,comparator,should,sort,better,matches,higher,param,message,the,current,message,return,the,comparator,never,code,null;protected,abstract,comparator,t,get,mapping,comparator,message,message
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1386363047;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.")__		this.customArgumentResolvers = customArgumentResolvers__	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,assert,not,null,custom,argument,resolvers,the,custom,argument,resolvers,cannot,be,null,this,custom,argument,resolvers,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1397429525;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.")__		this.customArgumentResolvers = customArgumentResolvers__	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,assert,not,null,custom,argument,resolvers,the,custom,argument,resolvers,cannot,be,null,this,custom,argument,resolvers,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1403856366;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.")__		this.customArgumentResolvers = customArgumentResolvers__	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,assert,not,null,custom,argument,resolvers,the,custom,argument,resolvers,cannot,be,null,this,custom,argument,resolvers,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1404880799;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.")__		this.customArgumentResolvers = customArgumentResolvers__	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,assert,not,null,custom,argument,resolvers,the,custom,argument,resolvers,cannot,be,null,this,custom,argument,resolvers,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1405378165;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		Assert.notNull(customArgumentResolvers, "The 'customArgumentResolvers' cannot be null.")__		this.customArgumentResolvers = customArgumentResolvers__	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,assert,not,null,custom,argument,resolvers,the,custom,argument,resolvers,cannot,be,null,this,custom,argument,resolvers,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1411159659;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1411389021;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1419881658;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1426789284;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1426869344;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1427240641;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1431461099;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1432125256;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1432286953;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1432299978;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1436276619;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1438078548;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1447077465;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1448483163;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1448500177;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1449703897;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1455836956;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1467457413;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type._@param customArgumentResolvers the list of resolvers_ never {@code null}.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type,param,custom,argument,resolvers,the,list,of,resolvers,never,code,null;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1467463695;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1467465454;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1467730834;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers);1495868221;Sets the list of custom {@code HandlerMethodArgumentResolver}s that will be used_after resolvers for supported argument type.;public void setCustomArgumentResolvers(List<HandlerMethodArgumentResolver> customArgumentResolvers) {_		this.customArgumentResolvers.clear()__		if (customArgumentResolvers != null) {_			this.customArgumentResolvers.addAll(customArgumentResolvers)__		}_	};sets,the,list,of,custom,code,handler,method,argument,resolver,s,that,will,be,used,after,resolvers,for,supported,argument,type;public,void,set,custom,argument,resolvers,list,handler,method,argument,resolver,custom,argument,resolvers,this,custom,argument,resolvers,clear,if,custom,argument,resolvers,null,this,custom,argument,resolvers,add,all,custom,argument,resolvers
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1426789284;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1426869344;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1427240641;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1431461099;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1432125256;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1432286953;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1432299978;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1436276619;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1438078548;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1447077465;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1448483163;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1448500177;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1449703897;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1455836956;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1467457413;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1467463695;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1467465454;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
AbstractMethodMessageHandler -> protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception);1467730834;Find an {@code @MessageExceptionHandler} method for the given exception._The default implementation searches methods in the class hierarchy of the_HandlerMethod first and if not found, it continues searching for additional_{@code @MessageExceptionHandler} methods among the configured_{@linkplain org.springframework.messaging.handler.MessagingAdviceBean_MessagingAdviceBean}, if any._@param handlerMethod the method where the exception was raised_@param exception the raised exception_@return a method to handle the exception, or {@code null}_@since 4.2;protected InvocableHandlerMethod getExceptionHandlerMethod(HandlerMethod handlerMethod, Exception exception) {_		if (logger.isDebugEnabled()) {_			logger.debug("Searching methods to handle " + exception.getClass().getSimpleName())__		}_		Class<?> beanType = handlerMethod.getBeanType()__		AbstractExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(beanType)__		if (resolver == null) {_			resolver = createExceptionHandlerMethodResolverFor(beanType)__			this.exceptionHandlerCache.put(beanType, resolver)__		}_		Method method = resolver.resolveMethod(exception)__		if (method != null) {_			return new InvocableHandlerMethod(handlerMethod.getBean(), method)__		}_		for (MessagingAdviceBean advice : this.exceptionHandlerAdviceCache.keySet()) {_			if (advice.isApplicableToBeanType(beanType)) {_				resolver = this.exceptionHandlerAdviceCache.get(advice)__				method = resolver.resolveMethod(exception)__				if (method != null) {_					return new InvocableHandlerMethod(advice.resolveBean(), method)__				}_			}_		}_		return null__	};find,an,code,message,exception,handler,method,for,the,given,exception,the,default,implementation,searches,methods,in,the,class,hierarchy,of,the,handler,method,first,and,if,not,found,it,continues,searching,for,additional,code,message,exception,handler,methods,among,the,configured,linkplain,org,springframework,messaging,handler,messaging,advice,bean,messaging,advice,bean,if,any,param,handler,method,the,method,where,the,exception,was,raised,param,exception,the,raised,exception,return,a,method,to,handle,the,exception,or,code,null,since,4,2;protected,invocable,handler,method,get,exception,handler,method,handler,method,handler,method,exception,exception,if,logger,is,debug,enabled,logger,debug,searching,methods,to,handle,exception,get,class,get,simple,name,class,bean,type,handler,method,get,bean,type,abstract,exception,handler,method,resolver,resolver,this,exception,handler,cache,get,bean,type,if,resolver,null,resolver,create,exception,handler,method,resolver,for,bean,type,this,exception,handler,cache,put,bean,type,resolver,method,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,handler,method,get,bean,method,for,messaging,advice,bean,advice,this,exception,handler,advice,cache,key,set,if,advice,is,applicable,to,bean,type,bean,type,resolver,this,exception,handler,advice,cache,get,advice,method,resolver,resolve,method,exception,if,method,null,return,new,invocable,handler,method,advice,resolve,bean,method,return,null
