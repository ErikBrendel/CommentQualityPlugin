commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Send the given message.  * @param message the message  * @return a ListenableFuture that can be used to determine when and if the  * message was successfully sent  */ ;/**  * Send the given message.  * @param message the message  * @return a ListenableFuture that can be used to determine when and if the  * message was successfully sent  */ ListenableFuture<Void> send(Message<P> message).
true;;2;1;/**  * Register a task to invoke after a period of read inactivity.  * @param runnable the task to invoke  * @param duration the amount of inactive time in milliseconds  */ ;/**  * Register a task to invoke after a period of read inactivity.  * @param runnable the task to invoke  * @param duration the amount of inactive time in milliseconds  */ void onReadInactivity(Runnable runnable, long duration).
true;;2;1;/**  * Register a task to invoke after a period of write inactivity.  * @param runnable the task to invoke  * @param duration the amount of inactive time in milliseconds  */ ;/**  * Register a task to invoke after a period of write inactivity.  * @param runnable the task to invoke  * @param duration the amount of inactive time in milliseconds  */ void onWriteInactivity(Runnable runnable, long duration).
true;;0;2;/**  * Close the connection.  */ ;/**  * Close the connection.  */ @Override void close().
