# id;timestamp;commentText;codeText;commentWords;codeWords
StompDecoder -> @Nullable 	public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1495868221;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;@Nullable_	public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;nullable,public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> @Nullable 	public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1496259743;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;@Nullable_	public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;nullable,public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1475619006;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1496837955;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1498780456;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1499712291;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1500448076;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1508532146;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1509997270;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1519588127;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1530174524;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message Messages}. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,messages,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1531942400;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message Messages}. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,messages,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer);1532091916;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message Messages}. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param byteBuffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer) {_		return decode(byteBuffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,messages,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,return,decode,byte,buffer,null
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1397523793;@return the configured {@code MessageHeaderInitializer} if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1403856366;@return the configured {@code MessageHeaderInitializer} if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1404880799;@return the configured {@code MessageHeaderInitializer} if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1413848647;@return the configured {@code MessageHeaderInitializer} if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1415635928;@return the configured {@code MessageHeaderInitializer} if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1415669910;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1415671769;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1434394654;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1441370327;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1443041515;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1467730834;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1468964586;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1474830007;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public MessageHeaderInitializer getHeaderInitializer();1475619006;Return the configured {@code MessageHeaderInitializer}, if any.;public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1397523793;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1403856366;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1404880799;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1413848647;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1415635928;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1415669910;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1415671769;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1434394654;Configure a_{@link org.springframework.messaging.support.MessageHeaderInitializer MessageHeaderInitializer}_to apply to the headers of {@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,org,springframework,messaging,support,message,header,initializer,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1441370327;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1443041515;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1467730834;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1468964586;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1474830007;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1475619006;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1495868221;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1496259743;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1498780456;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(MessageHeaderInitializer headerInitializer);1499712291;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1475619006;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1495868221;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1496259743;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1496837955;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1498780456;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1499712291;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1500448076;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1508532146;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1509997270;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1519588127;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1530174524;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1531942400;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer byteBuffer);1532091916;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer byteBuffer) {_		while (true) {_			if (!tryConsumeEndOfLine(byteBuffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,byte,buffer,while,true,if,try,consume,end,of,line,byte,buffer,break
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders);1496259743;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders);1496837955;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders);1498780456;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders);1499712291;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders);1500448076;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1508532146;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1509997270;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1519588127;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1530174524;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message Messages}._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,messages,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1531942400;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message Messages}._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,messages,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, 			@Nullable MultiValueMap<String, String> partialMessageHeaders);1532091916;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message Messages}._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer,_			@Nullable MultiValueMap<String, String> partialMessageHeaders) {__		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,messages,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers);1475619006;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,byte,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers);1495868221;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,byte,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers);1496259743;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,byte,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1495868221;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496259743;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1496837955;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1498780456;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1499712291;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1500448076;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1508532146;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1509997270;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1519588127;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1530174524;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1531942400;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> @Nullable 	public MessageHeaderInitializer getHeaderInitializer();1532091916;Return the configured {@code MessageHeaderInitializer}, if any.;@Nullable_	public MessageHeaderInitializer getHeaderInitializer() {_		return this.headerInitializer__	};return,the,configured,code,message,header,initializer,if,any;nullable,public,message,header,initializer,get,header,initializer,return,this,header,initializer
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1395703237;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1395703237;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1395965753;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1397429525;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1397523793;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1403856366;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1404880799;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1413848647;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1415635928;Try to read an EOL incrementing the buffer position if successful.__@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1415669910;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1415671769;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1434394654;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1441370327;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1443041515;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1467730834;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1468964586;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer buffer);1474830007;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer buffer) {_		if (buffer.remaining() > 0) {_			byte b = buffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (buffer.remaining() > 0 && buffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			buffer.position(buffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,buffer,if,buffer,remaining,0,byte,b,buffer,get,if,b,n,return,true,else,if,b,r,if,buffer,remaining,0,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,position,buffer,position,1,return,false
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1395703237;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			readHeaders(buffer, headers)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer.")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,read,headers,buffer,headers,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1395703237;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			readHeaders(buffer, headers)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer.")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,read,headers,buffer,headers,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1395965753;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			readHeaders(buffer, headers)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer.")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,read,headers,buffer,headers,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1397429525;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1397523793;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1403856366;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat.")__			}_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1404880799;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1413848647;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1415635928;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {__		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {__			StompHeaderAccessor headerAccessor = null__			byte[] payload = null___			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)___				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}__			if (payload != null) {_				if ((payload.length > 0) && (!headerAccessor.getCommand().isBodyAllowed())) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}_		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1415669910;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer.")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1415671769;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1434394654;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1441370327;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1443041515;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1467730834;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1468964586;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers);1474830007;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (buffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(buffer, headerAccessor)__				payload = readPayload(buffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) {_					throw new StompConversionException(headerAccessor.getCommand() +_							" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;private,message,byte,decode,message,byte,buffer,buffer,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,buffer,header,accessor,payload,read,payload,buffer,header,accessor,if,payload,null,if,payload,length,0,header,accessor,get,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, MultiValueMap<String, String> partialMessageHeaders);1475619006;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer byteBuffer, MultiValueMap<String, String> partialMessageHeaders);1495868221;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param byteBuffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer byteBuffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (byteBuffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(byteBuffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,byte,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,byte,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,byte,buffer,has,remaining,message,byte,message,decode,message,byte,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> private String unescape(String inString);1395965753;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1397429525;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1397523793;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1403856366;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1404880799;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1413848647;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1415635928;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {__		StringBuilder sb = new StringBuilder()__		int pos = 0_ _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if((index + 1) >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1415669910;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1415671769;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1434394654;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1441370327;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1443041515;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1467730834;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1468964586;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1474830007;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1475619006;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1495868221;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1496259743;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1496837955;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1498780456;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1499712291;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1500448076;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1508532146;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1509997270;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf("\\")___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf("\\", pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1519588127;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf('\\')___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf('\\', pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1530174524;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf('\\')___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf('\\', pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1531942400;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf('\\')___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf('\\', pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> private String unescape(String inString);1532091916;See STOMP Spec 1.2:_<a href="http://stomp.github.io/stomp-specification-1.2.html#Value_Encoding">"Value Encoding"</a>.;private String unescape(String inString) {_		StringBuilder sb = new StringBuilder(inString.length())__		int pos = 0_  _		int index = inString.indexOf('\\')___		while (index >= 0) {_			sb.append(inString.substring(pos, index))__			if (index + 1 >= inString.length()) {_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			Character c = inString.charAt(index + 1)__			if (c == 'r') {_				sb.append('\r')__			}_			else if (c == 'n') {_				sb.append('\n')__			}_			else if (c == 'c') {_				sb.append(':')__			}_			else if (c == '\\') {_				sb.append('\\')__			}_			else {_				_				throw new StompConversionException("Illegal escape sequence at index " + index + ": " + inString)__			}_			pos = index + 2__			index = inString.indexOf('\\', pos)__		}__		sb.append(inString.substring(pos))__		return sb.toString()__	};see,stomp,spec,1,2,a,href,http,stomp,github,io,stomp,specification,1,2,html,value,encoding,a;private,string,unescape,string,in,string,string,builder,sb,new,string,builder,in,string,length,int,pos,0,int,index,in,string,index,of,while,index,0,sb,append,in,string,substring,pos,index,if,index,1,in,string,length,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,character,c,in,string,char,at,index,1,if,c,r,sb,append,r,else,if,c,n,sb,append,n,else,if,c,c,sb,append,else,if,c,sb,append,else,throw,new,stomp,conversion,exception,illegal,escape,sequence,at,index,index,in,string,pos,index,2,index,in,string,index,of,pos,sb,append,in,string,substring,pos,return,sb,to,string
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1380226141;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)__		String command = readCommand(buffer)__		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			Message<byte[]> decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,_					StompHeaderAccessor.create(StompCommand.valueOf(command), headers)).build()___			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + decodedMessage)__			}__			return decodedMessage__		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			return MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).build()__		}__	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,message,byte,decoded,message,message,builder,with,payload,and,headers,payload,stomp,header,accessor,create,stomp,command,value,of,command,headers,build,if,logger,is,trace,enabled,logger,trace,decoded,decoded,message,return,decoded,message,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,return,message,builder,with,payload,build
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1380745853;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)___		Message<byte[]> decodedMessage___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			decodedMessage = MessageBuilder.withPayloadAndHeaders(payload,_					StompHeaderAccessor.create(StompCommand.valueOf(command), headers)).build()__		}_		else {_			decodedMessage = MessageBuilder.withPayloadAndHeaders(HEARTBEAT_PAYLOAD,_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}__		if (logger.isTraceEnabled()) {_			logger.trace("Decoded " + decodedMessage)__		}__		return decodedMessage___	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,message,byte,decoded,message,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,decoded,message,message,builder,with,payload,and,headers,payload,stomp,header,accessor,create,stomp,command,value,of,command,headers,build,else,decoded,message,message,builder,with,payload,and,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,if,logger,is,trace,enabled,logger,trace,decoded,decoded,message,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1381152424;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)___		Message<byte[]> decodedMessage___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			decodedMessage = MessageBuilder.withPayload(payload).setHeaders(_					StompHeaderAccessor.create(StompCommand.valueOf(command), headers)).build()__		}_		else {_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}__		if (logger.isTraceEnabled()) {_			logger.trace("Decoded " + decodedMessage)__		}__		return decodedMessage___	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,message,byte,decoded,message,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,value,of,command,headers,build,else,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,if,logger,is,trace,enabled,logger,trace,decoded,decoded,message,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1381801064;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)___		Message<byte[]> decodedMessage___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			StompCommand stompCommand = StompCommand.valueOf(command)__			if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_				throw new StompConversionException(stompCommand +_						" isn't allowed to have a body but has payload length=" + payload.length +_						", headers=" + headers)__			}__			decodedMessage = MessageBuilder.withPayload(payload)_					.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__		}_		else {_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}__		if (logger.isTraceEnabled()) {_			logger.trace("Decoded " + decodedMessage)__		}__		return decodedMessage___	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,message,byte,decoded,message,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,isn,t,allowed,to,have,a,body,but,has,payload,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,else,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,if,logger,is,trace,enabled,logger,trace,decoded,decoded,message,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1384292065;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)___		Message<byte[]> decodedMessage___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			StompCommand stompCommand = StompCommand.valueOf(command)__			if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_				throw new StompConversionException(stompCommand +_						" isn't allowed to have a body but has payload length=" + payload.length +_						", headers=" + headers)__			}__			decodedMessage = MessageBuilder.withPayload(payload)_					.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()___			if (logger.isDebugEnabled()) {_				logger.debug("Decoded " + decodedMessage)__			}_		}_		else {_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_		}__		return decodedMessage___	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,message,byte,decoded,message,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,isn,t,allowed,to,have,a,body,but,has,payload,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1384368312;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}.__@param buffer The buffer to decode the frame from_@return The decoded message;public Message<byte[]> decode(ByteBuffer buffer) {_		skipLeadingEol(buffer)___		Message<byte[]> decodedMessage = null___		buffer.mark()___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand +_							" isn't allowed to have a body but has payload length=" + payload.length +_							", headers=" + headers)__				}__				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()___				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			} else {_				if (logger.isDebugEnabled()) {_					logger.debug("Received incomplete frame. Resetting buffer")__				}_				buffer.reset()__			}_		}_		else {_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_		}__		return decodedMessage___	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message;public,message,byte,decode,byte,buffer,buffer,skip,leading,eol,buffer,message,byte,decoded,message,null,buffer,mark,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,isn,t,allowed,to,have,a,body,but,has,payload,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,debug,enabled,logger,debug,received,incomplete,frame,resetting,buffer,buffer,reset,else,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1384368356;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}._If the given ByteBuffer contains partial STOMP frame content, the method_resets the buffer and returns {@code null}.__@param buffer The buffer to decode the frame from__@return The decoded message or {@code null};public Message<byte[]> decode(ByteBuffer buffer) {__		Message<byte[]> decodedMessage = null___		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,if,the,given,byte,buffer,contains,partial,stomp,frame,content,the,method,resets,the,buffer,and,returns,code,null,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message,or,code,null;public,message,byte,decode,byte,buffer,buffer,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1386350678;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}._If the given ByteBuffer contains partial STOMP frame content, the method_resets the buffer and returns {@code null}.__@param buffer The buffer to decode the frame from__@return The decoded message or {@code null};public Message<byte[]> decode(ByteBuffer buffer) {__		Message<byte[]> decodedMessage = null___		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,if,the,given,byte,buffer,contains,partial,stomp,frame,content,the,method,resets,the,buffer,and,returns,code,null,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message,or,code,null;public,message,byte,decode,byte,buffer,buffer,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1394503659;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}._If the given ByteBuffer contains partial STOMP frame content, the method_resets the buffer and returns {@code null}.__@param buffer The buffer to decode the frame from__@return The decoded message or {@code null};public Message<byte[]> decode(ByteBuffer buffer) {__		Message<byte[]> decodedMessage = null___		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)___		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,if,the,given,byte,buffer,contains,partial,stomp,frame,content,the,method,resets,the,buffer,and,returns,code,null,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message,or,code,null;public,message,byte,decode,byte,buffer,buffer,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> public Message<byte[]> decode(ByteBuffer buffer);1395698258;Decodes a STOMP frame in the given {@code buffer} into a {@link Message}._If the given ByteBuffer contains partial STOMP frame content, the method_resets the buffer and returns {@code null}._@param buffer the buffer to decode the frame from_@return the decoded message or {@code null};public Message<byte[]> decode(ByteBuffer buffer) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(buffer)__		buffer.mark()___		String command = readCommand(buffer)__		if (command.length() > 0) {_			MultiValueMap<String, String> headers = readHeaders(buffer)__			byte[] payload = readPayload(buffer, headers)___			if (payload != null) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				if ((payload.length > 0) && (!stompCommand.isBodyAllowed())) {_					throw new StompConversionException(stompCommand + " shouldn't have but " +_							"has a payload with length=" + payload.length + ", headers=" + headers)__				}_				decodedMessage = MessageBuilder.withPayload(payload)_						.setHeaders(StompHeaderAccessor.create(stompCommand, headers)).build()__				if (logger.isDebugEnabled()) {_					logger.debug("Decoded " + decodedMessage)__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Received incomplete frame. Resetting buffer")__				}_				buffer.reset()__			}_		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Decoded heartbeat")__			}_			decodedMessage = MessageBuilder.withPayload(HEARTBEAT_PAYLOAD).setHeaders(_					StompHeaderAccessor.create(SimpMessageType.HEARTBEAT)).build()__		}_		return decodedMessage__	};decodes,a,stomp,frame,in,the,given,code,buffer,into,a,link,message,if,the,given,byte,buffer,contains,partial,stomp,frame,content,the,method,resets,the,buffer,and,returns,code,null,param,buffer,the,buffer,to,decode,the,frame,from,return,the,decoded,message,or,code,null;public,message,byte,decode,byte,buffer,buffer,message,byte,decoded,message,null,skip,leading,eol,buffer,buffer,mark,string,command,read,command,buffer,if,command,length,0,multi,value,map,string,string,headers,read,headers,buffer,byte,payload,read,payload,buffer,headers,if,payload,null,stomp,command,stomp,command,stomp,command,value,of,command,if,payload,length,0,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,but,has,a,payload,with,length,payload,length,headers,headers,decoded,message,message,builder,with,payload,payload,set,headers,stomp,header,accessor,create,stomp,command,headers,build,if,logger,is,debug,enabled,logger,debug,decoded,decoded,message,else,if,logger,is,trace,enabled,logger,trace,received,incomplete,frame,resetting,buffer,buffer,reset,else,if,logger,is,trace,enabled,logger,trace,decoded,heartbeat,decoded,message,message,builder,with,payload,set,headers,stomp,header,accessor,create,simp,message,type,heartbeat,build,return,decoded,message
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1496837955;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1500448076;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1508532146;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1509997270;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1519588127;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message}s from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,s,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1530174524;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message Messages} from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,messages,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1531942400;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message Messages} from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,messages,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer);1532091916;Configure a {@link MessageHeaderInitializer} to apply to the headers of_{@link Message Messages} from decoded STOMP frames.;public void setHeaderInitializer(@Nullable MessageHeaderInitializer headerInitializer) {_		this.headerInitializer = headerInitializer__	};configure,a,link,message,header,initializer,to,apply,to,the,headers,of,link,message,messages,from,decoded,stomp,frames;public,void,set,header,initializer,nullable,message,header,initializer,header,initializer,this,header,initializer,header,initializer
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1395703237;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1395703237;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1395965753;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1397429525;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1397523793;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1403856366;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1404880799;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1413848647;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1415635928;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1415669910;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1415671769;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1434394654;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1441370327;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1443041515;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1467730834;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1468964586;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> protected void skipLeadingEol(ByteBuffer buffer);1474830007;Skip one ore more EOL characters at the start of the given ByteBuffer._Those are STOMP heartbeat frames.;protected void skipLeadingEol(ByteBuffer buffer) {_		while (true) {_			if (!tryConsumeEndOfLine(buffer)) {_				break__			}_		}_	};skip,one,ore,more,eol,characters,at,the,start,of,the,given,byte,buffer,those,are,stomp,heartbeat,frames;protected,void,skip,leading,eol,byte,buffer,buffer,while,true,if,try,consume,end,of,line,buffer,break
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1395703237;Decodes one or more STOMP frames from the given {@code buffer} into a_list of {@link Message}s.__<p>If the given ByteBuffer contains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, new LinkedMultiValueMap<String, String>())__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,into,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,new,linked,multi,value,map,string,string
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1395703237;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, new LinkedMultiValueMap<String, String>())__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,new,linked,multi,value,map,string,string
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1395965753;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, new LinkedMultiValueMap<String, String>())__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,new,linked,multi,value,map,string,string
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1397429525;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1397523793;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1403856366;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1404880799;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1413848647;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1415635928;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains any incplcontains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,any,incplcontains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1415669910;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer The buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1415671769;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1434394654;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1441370327;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1443041515;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1467730834;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1468964586;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer);1474830007;Decodes one or more STOMP frames from the given {@code ByteBuffer} into a_list of {@link Message}s. If the input buffer contains partial STOMP frame_content, or additional content with a partial STOMP frame, the buffer is_reset and {@code null} is returned._@param buffer the buffer to decode the STOMP frame from_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer) {_		return decode(buffer, null)__	};decodes,one,or,more,stomp,frames,from,the,given,code,byte,buffer,into,a,list,of,link,message,s,if,the,input,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,return,decode,buffer,null
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1475619006;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1495868221;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1496259743;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1496837955;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1498780456;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1499712291;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1500448076;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1508532146;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1509997270;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1519588127;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1530174524;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1531942400;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer);1532091916;Try to read an EOL incrementing the buffer position if successful._@return whether an EOL was consumed;private boolean tryConsumeEndOfLine(ByteBuffer byteBuffer) {_		if (byteBuffer.remaining() > 0) {_			byte b = byteBuffer.get()__			if (b == '\n') {_				return true__			}_			else if (b == '\r') {_				if (byteBuffer.remaining() > 0 && byteBuffer.get() == '\n') {_					return true__				}_				else {_					throw new StompConversionException("'\\r' must be followed by '\\n'")__				}_			}_			_			((Buffer) byteBuffer).position(byteBuffer.position() - 1)__		}_		return false__	};try,to,read,an,eol,incrementing,the,buffer,position,if,successful,return,whether,an,eol,was,consumed;private,boolean,try,consume,end,of,line,byte,buffer,byte,buffer,if,byte,buffer,remaining,0,byte,b,byte,buffer,get,if,b,n,return,true,else,if,b,r,if,byte,buffer,remaining,0,byte,buffer,get,n,return,true,else,throw,new,stomp,conversion,exception,r,must,be,followed,by,n,buffer,byte,buffer,position,byte,buffer,position,1,return,false
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1496837955;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(headerAccessor.getCommand() +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1498780456;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(headerAccessor.getCommand() +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				if (logger.isTraceEnabled()) {_					logger.trace("Incomplete frame, resetting input buffer...")__				}_				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,if,logger,is,trace,enabled,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1499712291;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(headerAccessor.getCommand() +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1500448076;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(headerAccessor.getCommand() +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1508532146;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(headerAccessor.getCommand() +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,header,accessor,get,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1509997270;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(stompCommand +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1519588127;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(stompCommand +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1530174524;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(stompCommand +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1531942400;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(stompCommand +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> @Nullable 	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers);1532091916;Decode a single STOMP frame from the given {@code buffer} into a {@link Message}.;@Nullable_	private Message<byte[]> decodeMessage(ByteBuffer byteBuffer, @Nullable MultiValueMap<String, String> headers) {_		Message<byte[]> decodedMessage = null__		skipLeadingEol(byteBuffer)___		_		_		Buffer buffer = byteBuffer__		buffer.mark()___		String command = readCommand(byteBuffer)__		if (command.length() > 0) {_			StompHeaderAccessor headerAccessor = null__			byte[] payload = null__			if (byteBuffer.remaining() > 0) {_				StompCommand stompCommand = StompCommand.valueOf(command)__				headerAccessor = StompHeaderAccessor.create(stompCommand)__				initHeaders(headerAccessor)__				readHeaders(byteBuffer, headerAccessor)__				payload = readPayload(byteBuffer, headerAccessor)__			}_			if (payload != null) {_				if (payload.length > 0) {_					StompCommand stompCommand = headerAccessor.getCommand()__					if (stompCommand != null && !stompCommand.isBodyAllowed()) {_						throw new StompConversionException(stompCommand +_								" shouldn't have a payload: length=" + payload.length + ", headers=" + headers)__					}_				}_				headerAccessor.updateSimpMessageHeadersFromStompHeaders()__				headerAccessor.setLeaveMutable(true)__				decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())__				if (logger.isTraceEnabled()) {_					logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))__				}_			}_			else {_				logger.trace("Incomplete frame, resetting input buffer...")__				if (headers != null && headerAccessor != null) {_					String name = NativeMessageHeaderAccessor.NATIVE_HEADERS__					@SuppressWarnings("unchecked")_					MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)__					if (map != null) {_						headers.putAll(map)__					}_				}_				buffer.reset()__			}_		}_		else {_			StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()__			initHeaders(headerAccessor)__			headerAccessor.setLeaveMutable(true)__			decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())__			if (logger.isTraceEnabled()) {_				logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))__			}_		}__		return decodedMessage__	};decode,a,single,stomp,frame,from,the,given,code,buffer,into,a,link,message;nullable,private,message,byte,decode,message,byte,buffer,byte,buffer,nullable,multi,value,map,string,string,headers,message,byte,decoded,message,null,skip,leading,eol,byte,buffer,buffer,buffer,byte,buffer,buffer,mark,string,command,read,command,byte,buffer,if,command,length,0,stomp,header,accessor,header,accessor,null,byte,payload,null,if,byte,buffer,remaining,0,stomp,command,stomp,command,stomp,command,value,of,command,header,accessor,stomp,header,accessor,create,stomp,command,init,headers,header,accessor,read,headers,byte,buffer,header,accessor,payload,read,payload,byte,buffer,header,accessor,if,payload,null,if,payload,length,0,stomp,command,stomp,command,header,accessor,get,command,if,stomp,command,null,stomp,command,is,body,allowed,throw,new,stomp,conversion,exception,stomp,command,shouldn,t,have,a,payload,length,payload,length,headers,headers,header,accessor,update,simp,message,headers,from,stomp,headers,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,payload,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,payload,else,logger,trace,incomplete,frame,resetting,input,buffer,if,headers,null,header,accessor,null,string,name,native,message,header,accessor,suppress,warnings,unchecked,multi,value,map,string,string,map,multi,value,map,string,string,header,accessor,get,header,name,if,map,null,headers,put,all,map,buffer,reset,else,stomp,header,accessor,header,accessor,stomp,header,accessor,create,for,heartbeat,init,headers,header,accessor,header,accessor,set,leave,mutable,true,decoded,message,message,builder,create,message,header,accessor,get,message,headers,if,logger,is,trace,enabled,logger,trace,decoded,header,accessor,get,detailed,log,message,null,return,decoded,message
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers);1395703237;Decodes one or more STOMP frames from the given {@code buffer} into a_list of {@link Message}s.__<p>If the given ByteBuffer contains partial STOMP frame content, or additional_content with a partial STOMP frame, the buffer is reset and {@code null} is_returned.__@param buffer The buffer to decode the STOMP frame from_@param headers an empty map that will be filled with the successfully parsed_headers of the last decoded message, or the last attempt at decoding an_(incomplete) STOMP frame. This can be useful for detecting 'content-length'.__@return the decoded messages or an empty list;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			headers.clear()__			Message<byte[]> m = decodeMessage(buffer, headers)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,into,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,partial,stomp,frame,content,or,additional,content,with,a,partial,stomp,frame,the,buffer,is,reset,and,code,null,is,returned,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,headers,an,empty,map,that,will,be,filled,with,the,successfully,parsed,headers,of,the,last,decoded,message,or,the,last,attempt,at,decoding,an,incomplete,stomp,frame,this,can,be,useful,for,detecting,content,length,return,the,decoded,messages,or,an,empty,list;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,headers,clear,message,byte,m,decode,message,buffer,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers);1395703237;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The input headers map is used to store successfully parsed headers and_is cleared after ever successfully read message. So when partial content is_read the caller can check if a "content-length" header was read, which helps_to determine how much more content is needed before the next STOMP frame_can be decoded.__@param buffer The buffer to decode the STOMP frame from_@param headers an empty map that will contain successfully parsed headers_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Assert.notNull(headers, "headers is required")__		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, headers)__			if (m != null) {_				messages.add(m)__				headers.clear()__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,input,headers,map,is,used,to,store,successfully,parsed,headers,and,is,cleared,after,ever,successfully,read,message,so,when,partial,content,is,read,the,caller,can,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,stomp,frame,can,be,decoded,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,headers,an,empty,map,that,will,contain,successfully,parsed,headers,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,headers,assert,not,null,headers,headers,is,required,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,headers,if,m,null,messages,add,m,headers,clear,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers);1395965753;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The input headers map is used to store successfully parsed headers and_is cleared after ever successfully read message. So when partial content is_read the caller can check if a "content-length" header was read, which helps_to determine how much more content is needed before the next STOMP frame_can be decoded.__@param buffer The buffer to decode the STOMP frame from_@param headers an empty map that will contain successfully parsed headers_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> headers) {_		Assert.notNull(headers, "headers is required")__		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, headers)__			if (m != null) {_				messages.add(m)__				headers.clear()__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,input,headers,map,is,used,to,store,successfully,parsed,headers,and,is,cleared,after,ever,successfully,read,message,so,when,partial,content,is,read,the,caller,can,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,stomp,frame,can,be,decoded,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,headers,an,empty,map,that,will,contain,successfully,parsed,headers,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,headers,assert,not,null,headers,headers,is,required,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,headers,if,m,null,messages,add,m,headers,clear,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1397429525;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1397523793;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1403856366;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1404880799;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1413848647;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1415635928;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s.__<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was.__<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content.__<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode.__@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame__@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> m = decodeMessage(buffer, partialMessageHeaders)__			if (m != null) {_				messages.add(m)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,m,decode,message,buffer,partial,message,headers,if,m,null,messages,add,m,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1415669910;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer The buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return decoded messages or an empty list_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,decoded,messages,or,an,empty,list,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1415671769;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1434394654;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1441370327;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1443041515;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<Message<byte[]>>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,message,byte,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1467730834;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1468964586;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
StompDecoder -> public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders);1474830007;Decodes one or more STOMP frames from the given {@code buffer} and returns_a list of {@link Message}s._<p>If the given ByteBuffer contains only partial STOMP frame content and no_complete STOMP frames, an empty list is returned, and the buffer is reset to_to where it was._<p>If the buffer contains one ore more STOMP frames, those are returned and_the buffer reset to point to the beginning of the unused partial content._<p>The output partialMessageHeaders map is used to store successfully parsed_headers in case of partial content. The caller can then check if a_"content-length" header was read, which helps to determine how much more_content is needed before the next attempt to decode._@param buffer the buffer to decode the STOMP frame from_@param partialMessageHeaders an empty output map that will store the last_successfully parsed partialMessageHeaders in case of partial message content_in cases where the partial buffer ended with a partial STOMP frame_@return the decoded messages, or an empty list if none_@throws StompConversionException raised in case of decoding issues;public List<Message<byte[]>> decode(ByteBuffer buffer, MultiValueMap<String, String> partialMessageHeaders) {_		List<Message<byte[]>> messages = new ArrayList<>()__		while (buffer.hasRemaining()) {_			Message<byte[]> message = decodeMessage(buffer, partialMessageHeaders)__			if (message != null) {_				messages.add(message)__			}_			else {_				break__			}_		}_		return messages__	};decodes,one,or,more,stomp,frames,from,the,given,code,buffer,and,returns,a,list,of,link,message,s,p,if,the,given,byte,buffer,contains,only,partial,stomp,frame,content,and,no,complete,stomp,frames,an,empty,list,is,returned,and,the,buffer,is,reset,to,to,where,it,was,p,if,the,buffer,contains,one,ore,more,stomp,frames,those,are,returned,and,the,buffer,reset,to,point,to,the,beginning,of,the,unused,partial,content,p,the,output,partial,message,headers,map,is,used,to,store,successfully,parsed,headers,in,case,of,partial,content,the,caller,can,then,check,if,a,content,length,header,was,read,which,helps,to,determine,how,much,more,content,is,needed,before,the,next,attempt,to,decode,param,buffer,the,buffer,to,decode,the,stomp,frame,from,param,partial,message,headers,an,empty,output,map,that,will,store,the,last,successfully,parsed,partial,message,headers,in,case,of,partial,message,content,in,cases,where,the,partial,buffer,ended,with,a,partial,stomp,frame,return,the,decoded,messages,or,an,empty,list,if,none,throws,stomp,conversion,exception,raised,in,case,of,decoding,issues;public,list,message,byte,decode,byte,buffer,buffer,multi,value,map,string,string,partial,message,headers,list,message,byte,messages,new,array,list,while,buffer,has,remaining,message,byte,message,decode,message,buffer,partial,message,headers,if,message,null,messages,add,message,else,break,return,messages
