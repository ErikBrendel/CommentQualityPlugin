commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected MessageHeaderAccessor createAccessor(Message<?> message) {     return wrap(message). }
false;public;1;5;;public void setMessageTypeIfNotSet(SimpMessageType messageType) {     if (getMessageType() == null) {         setHeader(MESSAGE_TYPE_HEADER, messageType).     } }
false;public;0;4;;@Nullable public SimpMessageType getMessageType() {     return (SimpMessageType) getHeader(MESSAGE_TYPE_HEADER). }
false;public;1;3;;public void setDestination(@Nullable String destination) {     setHeader(DESTINATION_HEADER, destination). }
false;public;0;4;;@Nullable public String getDestination() {     return (String) getHeader(DESTINATION_HEADER). }
false;public;1;3;;public void setSubscriptionId(@Nullable String subscriptionId) {     setHeader(SUBSCRIPTION_ID_HEADER, subscriptionId). }
false;public;0;4;;@Nullable public String getSubscriptionId() {     return (String) getHeader(SUBSCRIPTION_ID_HEADER). }
false;public;1;3;;public void setSessionId(@Nullable String sessionId) {     setHeader(SESSION_ID_HEADER, sessionId). }
true;public;0;4;/**  * Return the id of the current session.  */ ;/**  * Return the id of the current session.  */ @Nullable public String getSessionId() {     return (String) getHeader(SESSION_ID_HEADER). }
true;public;1;3;/**  * A static alternative for access to the session attributes header.  */ ;/**  * A static alternative for access to the session attributes header.  */ public void setSessionAttributes(@Nullable Map<String, Object> attributes) {     setHeader(SESSION_ATTRIBUTES, attributes). }
true;public;0;5;/**  * Return the attributes associated with the current session.  */ ;/**  * Return the attributes associated with the current session.  */ @SuppressWarnings("unchecked") @Nullable public Map<String, Object> getSessionAttributes() {     return (Map<String, Object>) getHeader(SESSION_ATTRIBUTES). }
false;public;1;3;;public void setUser(@Nullable Principal principal) {     setHeader(USER_HEADER, principal). }
true;public;0;4;/**  * Return the user associated with the current session.  */ ;/**  * Return the user associated with the current session.  */ @Nullable public Principal getUser() {     return (Principal) getHeader(USER_HEADER). }
false;public;1;12;;@Override public String getShortLogMessage(Object payload) {     if (getMessageType() == null) {         return super.getDetailedLogMessage(payload).     }     StringBuilder sb = getBaseLogMessage().     if (!CollectionUtils.isEmpty(getSessionAttributes())) {         sb.append(" attributes[").append(getSessionAttributes().size()).append("]").     }     sb.append(getShortPayloadLogMessage(payload)).     return sb.toString(). }
false;public;1;16;;@SuppressWarnings("unchecked") @Override public String getDetailedLogMessage(@Nullable Object payload) {     if (getMessageType() == null) {         return super.getDetailedLogMessage(payload).     }     StringBuilder sb = getBaseLogMessage().     if (!CollectionUtils.isEmpty(getSessionAttributes())) {         sb.append(" attributes=").append(getSessionAttributes()).     }     if (!CollectionUtils.isEmpty((Map<String, List<String>>) getHeader(NATIVE_HEADERS))) {         sb.append(" nativeHeaders=").append(getHeader(NATIVE_HEADERS)).     }     sb.append(getDetailedPayloadLogMessage(payload)).     return sb.toString(). }
false;private;0;19;;private StringBuilder getBaseLogMessage() {     StringBuilder sb = new StringBuilder().     SimpMessageType messageType = getMessageType().     sb.append(messageType != null ? messageType.name() : SimpMessageType.OTHER).     String destination = getDestination().     if (destination != null) {         sb.append(" destination=").append(destination).     }     String subscriptionId = getSubscriptionId().     if (subscriptionId != null) {         sb.append(" subscriptionId=").append(subscriptionId).     }     sb.append(" session=").append(getSessionId()).     Principal user = getUser().     if (user != null) {         sb.append(" user=").append(user.getName()).     }     return sb. }
true;public,static;0;3;/**  * Create an instance with  * {@link org.springframework.messaging.simp.SimpMessageType} {@code MESSAGE}.  */ ;// Static factory methods and accessors /**  * Create an instance with  * {@link org.springframework.messaging.simp.SimpMessageType} {@code MESSAGE}.  */ public static SimpMessageHeaderAccessor create() {     return new SimpMessageHeaderAccessor(SimpMessageType.MESSAGE, null). }
true;public,static;1;3;/**  * Create an instance with the given  * {@link org.springframework.messaging.simp.SimpMessageType}.  */ ;/**  * Create an instance with the given  * {@link org.springframework.messaging.simp.SimpMessageType}.  */ public static SimpMessageHeaderAccessor create(SimpMessageType messageType) {     return new SimpMessageHeaderAccessor(messageType, null). }
true;public,static;1;3;/**  * Create an instance from the payload and headers of the given Message.  */ ;/**  * Create an instance from the payload and headers of the given Message.  */ public static SimpMessageHeaderAccessor wrap(Message<?> message) {     return new SimpMessageHeaderAccessor(message). }
false;public,static;1;4;;@Nullable public static SimpMessageType getMessageType(Map<String, Object> headers) {     return (SimpMessageType) headers.get(MESSAGE_TYPE_HEADER). }
false;public,static;1;4;;@Nullable public static String getDestination(Map<String, Object> headers) {     return (String) headers.get(DESTINATION_HEADER). }
false;public,static;1;4;;@Nullable public static String getSubscriptionId(Map<String, Object> headers) {     return (String) headers.get(SUBSCRIPTION_ID_HEADER). }
false;public,static;1;4;;@Nullable public static String getSessionId(Map<String, Object> headers) {     return (String) headers.get(SESSION_ID_HEADER). }
false;public,static;1;5;;@SuppressWarnings("unchecked") @Nullable public static Map<String, Object> getSessionAttributes(Map<String, Object> headers) {     return (Map<String, Object>) headers.get(SESSION_ATTRIBUTES). }
false;public,static;1;4;;@Nullable public static Principal getUser(Map<String, Object> headers) {     return (Principal) headers.get(USER_HEADER). }
false;public,static;1;4;;@Nullable public static long[] getHeartbeat(Map<String, Object> headers) {     return (long[]) headers.get(HEART_BEAT_HEADER). }
