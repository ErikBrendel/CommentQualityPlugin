commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override @Nullable public Message<?> sendAndReceive(Message<?> requestMessage) {     return sendAndReceive(getRequiredDefaultDestination(), requestMessage). }
false;public;2;5;;@Override @Nullable public Message<?> sendAndReceive(D destination, Message<?> requestMessage) {     return doSendAndReceive(destination, requestMessage). }
false;protected,abstract;2;2;;@Nullable protected abstract Message<?> doSendAndReceive(D destination, Message<?> requestMessage).
false;public;2;5;;@Override @Nullable public <T> T convertSendAndReceive(Object request, Class<T> targetClass) {     return convertSendAndReceive(getRequiredDefaultDestination(), request, targetClass). }
false;public;3;5;;@Override @Nullable public <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass) {     return convertSendAndReceive(destination, request, null, targetClass). }
false;public;4;7;;@Override @Nullable public <T> T convertSendAndReceive(D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass) {     return convertSendAndReceive(destination, request, headers, targetClass, null). }
false;public;3;7;;@Override @Nullable public <T> T convertSendAndReceive(Object request, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     return convertSendAndReceive(getRequiredDefaultDestination(), request, targetClass, postProcessor). }
false;public;4;7;;@Override @Nullable public <T> T convertSendAndReceive(D destination, Object request, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     return convertSendAndReceive(destination, request, null, targetClass, postProcessor). }
false;public;5;10;;@SuppressWarnings("unchecked") @Override @Nullable public <T> T convertSendAndReceive(D destination, Object request, @Nullable Map<String, Object> headers, Class<T> targetClass, @Nullable MessagePostProcessor postProcessor) {     Message<?> requestMessage = doConvert(request, headers, postProcessor).     Message<?> replyMessage = sendAndReceive(destination, requestMessage).     return (replyMessage != null ? (T) getMessageConverter().fromMessage(replyMessage, targetClass) : null). }
