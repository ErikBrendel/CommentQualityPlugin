# id;timestamp;commentText;codeText;commentWords;codeWords
UserRegistryMessageHandler -> @SuppressWarnings("unused") 	public void setRegistryExpirationPeriod(long milliseconds);1457638642;Configure the amount of time (in milliseconds) before a remote user_registry snapshot is considered expired._<p>By default this is set to 20 seconds (value of 20000)._@param milliseconds the expiration period in milliseconds;@SuppressWarnings("unused")_	public void setRegistryExpirationPeriod(long milliseconds) {_		this.registryExpirationPeriod = milliseconds__	};configure,the,amount,of,time,in,milliseconds,before,a,remote,user,registry,snapshot,is,considered,expired,p,by,default,this,is,set,to,20,seconds,value,of,20000,param,milliseconds,the,expiration,period,in,milliseconds;suppress,warnings,unused,public,void,set,registry,expiration,period,long,milliseconds,this,registry,expiration,period,milliseconds
UserRegistryMessageHandler -> @SuppressWarnings("unused") 	public void setRegistryExpirationPeriod(long milliseconds);1498780456;Configure the amount of time (in milliseconds) before a remote user_registry snapshot is considered expired._<p>By default this is set to 20 seconds (value of 20000)._@param milliseconds the expiration period in milliseconds;@SuppressWarnings("unused")_	public void setRegistryExpirationPeriod(long milliseconds) {_		this.registryExpirationPeriod = milliseconds__	};configure,the,amount,of,time,in,milliseconds,before,a,remote,user,registry,snapshot,is,considered,expired,p,by,default,this,is,set,to,20,seconds,value,of,20000,param,milliseconds,the,expiration,period,in,milliseconds;suppress,warnings,unused,public,void,set,registry,expiration,period,long,milliseconds,this,registry,expiration,period,milliseconds
UserRegistryMessageHandler -> @SuppressWarnings("unused") 	public void setRegistryExpirationPeriod(long milliseconds);1520537868;Configure the amount of time (in milliseconds) before a remote user_registry snapshot is considered expired._<p>By default this is set to 20 seconds (value of 20000)._@param milliseconds the expiration period in milliseconds;@SuppressWarnings("unused")_	public void setRegistryExpirationPeriod(long milliseconds) {_		this.registryExpirationPeriod = milliseconds__	};configure,the,amount,of,time,in,milliseconds,before,a,remote,user,registry,snapshot,is,considered,expired,p,by,default,this,is,set,to,20,seconds,value,of,20000,param,milliseconds,the,expiration,period,in,milliseconds;suppress,warnings,unused,public,void,set,registry,expiration,period,long,milliseconds,this,registry,expiration,period,milliseconds
UserRegistryMessageHandler -> public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry, 			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler);1457638642;Constructor._@param userRegistry the registry with local and remote user registry information_@param brokerTemplate template for broadcasting local registry information_@param broadcastDestination  the destination to broadcast to_@param scheduler;public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry,_			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler) {__		Assert.notNull(userRegistry, "'userRegistry' is required")__		Assert.notNull(brokerTemplate, "'brokerTemplate' is required")__		Assert.hasText(broadcastDestination, "'broadcastDestination' is required")__		Assert.notNull(scheduler, "'scheduler' is required")___		this.userRegistry = userRegistry__		this.brokerTemplate = brokerTemplate__		this.broadcastDestination = broadcastDestination__		this.scheduler = scheduler__	};constructor,param,user,registry,the,registry,with,local,and,remote,user,registry,information,param,broker,template,template,for,broadcasting,local,registry,information,param,broadcast,destination,the,destination,to,broadcast,to,param,scheduler;public,user,registry,message,handler,multi,server,user,registry,user,registry,simp,messaging,template,broker,template,string,broadcast,destination,task,scheduler,scheduler,assert,not,null,user,registry,user,registry,is,required,assert,not,null,broker,template,broker,template,is,required,assert,has,text,broadcast,destination,broadcast,destination,is,required,assert,not,null,scheduler,scheduler,is,required,this,user,registry,user,registry,this,broker,template,broker,template,this,broadcast,destination,broadcast,destination,this,scheduler,scheduler
UserRegistryMessageHandler -> public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry, 			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler);1498780456;Constructor._@param userRegistry the registry with local and remote user registry information_@param brokerTemplate template for broadcasting local registry information_@param broadcastDestination the destination to broadcast to_@param scheduler the task scheduler to use;public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry,_			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler) {__		Assert.notNull(userRegistry, "'userRegistry' is required")__		Assert.notNull(brokerTemplate, "'brokerTemplate' is required")__		Assert.hasText(broadcastDestination, "'broadcastDestination' is required")__		Assert.notNull(scheduler, "'scheduler' is required")___		this.userRegistry = userRegistry__		this.brokerTemplate = brokerTemplate__		this.broadcastDestination = broadcastDestination__		this.scheduler = scheduler__	};constructor,param,user,registry,the,registry,with,local,and,remote,user,registry,information,param,broker,template,template,for,broadcasting,local,registry,information,param,broadcast,destination,the,destination,to,broadcast,to,param,scheduler,the,task,scheduler,to,use;public,user,registry,message,handler,multi,server,user,registry,user,registry,simp,messaging,template,broker,template,string,broadcast,destination,task,scheduler,scheduler,assert,not,null,user,registry,user,registry,is,required,assert,not,null,broker,template,broker,template,is,required,assert,has,text,broadcast,destination,broadcast,destination,is,required,assert,not,null,scheduler,scheduler,is,required,this,user,registry,user,registry,this,broker,template,broker,template,this,broadcast,destination,broadcast,destination,this,scheduler,scheduler
UserRegistryMessageHandler -> public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry, 			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler);1520537868;Constructor._@param userRegistry the registry with local and remote user registry information_@param brokerTemplate template for broadcasting local registry information_@param broadcastDestination the destination to broadcast to_@param scheduler the task scheduler to use;public UserRegistryMessageHandler(MultiServerUserRegistry userRegistry,_			SimpMessagingTemplate brokerTemplate, String broadcastDestination, TaskScheduler scheduler) {__		Assert.notNull(userRegistry, "'userRegistry' is required")__		Assert.notNull(brokerTemplate, "'brokerTemplate' is required")__		Assert.hasText(broadcastDestination, "'broadcastDestination' is required")__		Assert.notNull(scheduler, "'scheduler' is required")___		this.userRegistry = userRegistry__		this.brokerTemplate = brokerTemplate__		this.broadcastDestination = broadcastDestination__		this.scheduler = scheduler__	};constructor,param,user,registry,the,registry,with,local,and,remote,user,registry,information,param,broker,template,template,for,broadcasting,local,registry,information,param,broadcast,destination,the,destination,to,broadcast,to,param,scheduler,the,task,scheduler,to,use;public,user,registry,message,handler,multi,server,user,registry,user,registry,simp,messaging,template,broker,template,string,broadcast,destination,task,scheduler,scheduler,assert,not,null,user,registry,user,registry,is,required,assert,not,null,broker,template,broker,template,is,required,assert,has,text,broadcast,destination,broadcast,destination,is,required,assert,not,null,scheduler,scheduler,is,required,this,user,registry,user,registry,this,broker,template,broker,template,this,broadcast,destination,broadcast,destination,this,scheduler,scheduler
UserRegistryMessageHandler -> public String getBroadcastDestination();1431458952;Return the destination for broadcasting user registry information to.;public String getBroadcastDestination() {_		return this.broadcastDestination__	};return,the,destination,for,broadcasting,user,registry,information,to;public,string,get,broadcast,destination,return,this,broadcast,destination
UserRegistryMessageHandler -> public String getBroadcastDestination();1437512314;Return the destination for broadcasting user registry information to.;public String getBroadcastDestination() {_		return this.broadcastDestination__	};return,the,destination,for,broadcasting,user,registry,information,to;public,string,get,broadcast,destination,return,this,broadcast,destination
UserRegistryMessageHandler -> public String getBroadcastDestination();1457638642;Return the configured destination for broadcasting UserRegistry information.;public String getBroadcastDestination() {_		return this.broadcastDestination__	};return,the,configured,destination,for,broadcasting,user,registry,information;public,string,get,broadcast,destination,return,this,broadcast,destination
UserRegistryMessageHandler -> public String getBroadcastDestination();1498780456;Return the configured destination for broadcasting UserRegistry information.;public String getBroadcastDestination() {_		return this.broadcastDestination__	};return,the,configured,destination,for,broadcasting,user,registry,information;public,string,get,broadcast,destination,return,this,broadcast,destination
UserRegistryMessageHandler -> public String getBroadcastDestination();1520537868;Return the configured destination for broadcasting UserRegistry information.;public String getBroadcastDestination() {_		return this.broadcastDestination__	};return,the,configured,destination,for,broadcasting,user,registry,information;public,string,get,broadcast,destination,return,this,broadcast,destination
UserRegistryMessageHandler -> @SuppressWarnings("unused") 	public void setRegistryExpirationPeriod(long expirationPeriod);1431458952;Configure how long before a remote registry snapshot expires._<p>By default this is set to 20000 (20 seconds)._@param expirationPeriod the expiration period in milliseconds;@SuppressWarnings("unused")_	public void setRegistryExpirationPeriod(long expirationPeriod) {_		this.registryExpirationPeriod = expirationPeriod__	};configure,how,long,before,a,remote,registry,snapshot,expires,p,by,default,this,is,set,to,20000,20,seconds,param,expiration,period,the,expiration,period,in,milliseconds;suppress,warnings,unused,public,void,set,registry,expiration,period,long,expiration,period,this,registry,expiration,period,expiration,period
UserRegistryMessageHandler -> @SuppressWarnings("unused") 	public void setRegistryExpirationPeriod(long expirationPeriod);1437512314;Configure how long before a remote registry snapshot expires._<p>By default this is set to 20000 (20 seconds)._@param expirationPeriod the expiration period in milliseconds;@SuppressWarnings("unused")_	public void setRegistryExpirationPeriod(long expirationPeriod) {_		this.registryExpirationPeriod = expirationPeriod__	};configure,how,long,before,a,remote,registry,snapshot,expires,p,by,default,this,is,set,to,20000,20,seconds,param,expiration,period,the,expiration,period,in,milliseconds;suppress,warnings,unused,public,void,set,registry,expiration,period,long,expiration,period,this,registry,expiration,period,expiration,period
UserRegistryMessageHandler -> public long getRegistryExpirationPeriod();1431458952;Return the configured registry expiration period.;public long getRegistryExpirationPeriod() {_		return this.registryExpirationPeriod__	};return,the,configured,registry,expiration,period;public,long,get,registry,expiration,period,return,this,registry,expiration,period
UserRegistryMessageHandler -> public long getRegistryExpirationPeriod();1437512314;Return the configured registry expiration period.;public long getRegistryExpirationPeriod() {_		return this.registryExpirationPeriod__	};return,the,configured,registry,expiration,period;public,long,get,registry,expiration,period,return,this,registry,expiration,period
UserRegistryMessageHandler -> public long getRegistryExpirationPeriod();1457638642;Return the configured registry expiration period.;public long getRegistryExpirationPeriod() {_		return this.registryExpirationPeriod__	};return,the,configured,registry,expiration,period;public,long,get,registry,expiration,period,return,this,registry,expiration,period
UserRegistryMessageHandler -> public long getRegistryExpirationPeriod();1498780456;Return the configured registry expiration period.;public long getRegistryExpirationPeriod() {_		return this.registryExpirationPeriod__	};return,the,configured,registry,expiration,period;public,long,get,registry,expiration,period,return,this,registry,expiration,period
UserRegistryMessageHandler -> public long getRegistryExpirationPeriod();1520537868;Return the configured registry expiration period.;public long getRegistryExpirationPeriod() {_		return this.registryExpirationPeriod__	};return,the,configured,registry,expiration,period;public,long,get,registry,expiration,period,return,this,registry,expiration,period
