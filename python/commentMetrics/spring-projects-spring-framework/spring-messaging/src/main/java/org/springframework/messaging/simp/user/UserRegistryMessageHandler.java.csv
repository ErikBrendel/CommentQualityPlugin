commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured destination for broadcasting UserRegistry information.  */ ;/**  * Return the configured destination for broadcasting UserRegistry information.  */ public String getBroadcastDestination() {     return this.broadcastDestination. }
true;public;1;4;/**  * Configure the amount of time (in milliseconds) before a remote user  * registry snapshot is considered expired.  * <p>By default this is set to 20 seconds (value of 20000).  * @param milliseconds the expiration period in milliseconds  */ ;/**  * Configure the amount of time (in milliseconds) before a remote user  * registry snapshot is considered expired.  * <p>By default this is set to 20 seconds (value of 20000).  * @param milliseconds the expiration period in milliseconds  */ @SuppressWarnings("unused") public void setRegistryExpirationPeriod(long milliseconds) {     this.registryExpirationPeriod = milliseconds. }
true;public;0;3;/**  * Return the configured registry expiration period.  */ ;/**  * Return the configured registry expiration period.  */ public long getRegistryExpirationPeriod() {     return this.registryExpirationPeriod. }
false;public;1;14;;@Override public void onApplicationEvent(BrokerAvailabilityEvent event) {     if (event.isBrokerAvailable()) {         long delay = getRegistryExpirationPeriod() / 2.         this.scheduledFuture = this.scheduler.scheduleWithFixedDelay(this.schedulerTask, delay).     } else {         ScheduledFuture<?> future = this.scheduledFuture.         if (future != null) {             future.cancel(true).             this.scheduledFuture = null.         }     } }
false;public;1;5;;@Override public void handleMessage(Message<?> message) throws MessagingException {     MessageConverter converter = this.brokerTemplate.getMessageConverter().     this.userRegistry.addRemoteRegistryDto(message, converter, getRegistryExpirationPeriod()). }
false;public;0;13;;@Override public void run() {     try {         SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE).         accessor.setHeader(SimpMessageHeaderAccessor.IGNORE_ERROR, true).         accessor.setLeaveMutable(true).         Object payload = userRegistry.getLocalRegistryDto().         brokerTemplate.convertAndSend(getBroadcastDestination(), payload, accessor.getMessageHeaders()).     } finally {         userRegistry.purgeExpiredRegistries().     } }
