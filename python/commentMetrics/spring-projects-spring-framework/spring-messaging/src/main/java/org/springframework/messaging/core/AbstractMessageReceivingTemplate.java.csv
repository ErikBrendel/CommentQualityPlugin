commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @Nullable public Message<?> receive() {     return doReceive(getRequiredDefaultDestination()). }
false;public;1;5;;@Override @Nullable public Message<?> receive(D destination) {     return doReceive(destination). }
true;protected,abstract;1;2;/**  * Actually receive a message from the given destination.  * @param destination the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ ;/**  * Actually receive a message from the given destination.  * @param destination the target destination  * @return the received message, possibly {@code null} if the message could not  * be received, for example due to a timeout  */ @Nullable protected abstract Message<?> doReceive(D destination).
false;public;1;5;;@Override @Nullable public <T> T receiveAndConvert(Class<T> targetClass) {     return receiveAndConvert(getRequiredDefaultDestination(), targetClass). }
false;public;2;11;;@Override @Nullable public <T> T receiveAndConvert(D destination, Class<T> targetClass) {     Message<?> message = doReceive(destination).     if (message != null) {         return doConvert(message, targetClass).     } else {         return null.     } }
true;protected;2;11;/**  * Convert from the given message to the given target class.  * @param message the message to convert  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message (never {@code null})  */ ;/**  * Convert from the given message to the given target class.  * @param message the message to convert  * @param targetClass the target class to convert the payload to  * @return the converted payload of the reply message (never {@code null})  */ @SuppressWarnings("unchecked") @Nullable protected <T> T doConvert(Message<?> message, Class<T> targetClass) {     MessageConverter messageConverter = getMessageConverter().     T value = (T) messageConverter.fromMessage(message, targetClass).     if (value == null) {         throw new MessageConversionException(message, "Unable to convert payload [" + message.getPayload() + "] to type [" + targetClass + "] using converter [" + messageConverter + "]").     }     return value. }
