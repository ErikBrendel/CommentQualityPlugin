commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the target DestinationResolver to delegate to.  */ ;/**  * Set the target DestinationResolver to delegate to.  */ public void setTargetDestinationResolver(DestinationResolver<D> targetDestinationResolver) {     this.targetDestinationResolver = targetDestinationResolver. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.targetDestinationResolver == null) {         throw new IllegalArgumentException("Property 'targetDestinationResolver' is required").     } }
true;public;1;10;/**  * Resolves and caches destinations if successfully resolved by the target  * DestinationResolver implementation.  * @param name the destination name to be resolved  * @return the currently resolved destination or an already cached destination  * @throws DestinationResolutionException if the target DestinationResolver  * reports an error during destination resolution  */ ;/**  * Resolves and caches destinations if successfully resolved by the target  * DestinationResolver implementation.  * @param name the destination name to be resolved  * @return the currently resolved destination or an already cached destination  * @throws DestinationResolutionException if the target DestinationResolver  * reports an error during destination resolution  */ @Override public D resolveDestination(String name) throws DestinationResolutionException {     D destination = this.resolvedDestinationCache.get(name).     if (destination == null) {         Assert.state(this.targetDestinationResolver != null, "No target DestinationResolver set").         destination = this.targetDestinationResolver.resolveDestination(name).         this.resolvedDestinationCache.put(name, destination).     }     return destination. }
