commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     return getContent().equals(((AbstractMessageCondition<?>) other).getContent()). }
false;public;0;4;;@Override public int hashCode() {     return getContent().hashCode(). }
false;public;0;13;;@Override public String toString() {     StringBuilder builder = new StringBuilder("[").     for (Iterator<?> iterator = getContent().iterator(). iterator.hasNext(). ) {         Object expression = iterator.next().         builder.append(expression.toString()).         if (iterator.hasNext()) {             builder.append(getToStringInfix()).         }     }     builder.append("]").     return builder.toString(). }
true;protected,abstract;0;1;/**  * Return the collection of objects the message condition is composed of  * (e.g. destination patterns), never {@code null}.  */ ;/**  * Return the collection of objects the message condition is composed of  * (e.g. destination patterns), never {@code null}.  */ protected abstract Collection<?> getContent().
true;protected,abstract;0;1;/**  * The notation to use when printing discrete items of content.  * For example " || " for URL patterns or " && " for param expressions.  */ ;/**  * The notation to use when printing discrete items of content.  * For example " || " for URL patterns or " && " for param expressions.  */ protected abstract String getToStringInfix().
