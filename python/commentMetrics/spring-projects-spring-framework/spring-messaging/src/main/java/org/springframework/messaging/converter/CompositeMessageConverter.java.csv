commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override @Nullable public Object fromMessage(Message<?> message, Class<?> targetClass) {     for (MessageConverter converter : getConverters()) {         Object result = converter.fromMessage(message, targetClass).         if (result != null) {             return result.         }     }     return null. }
false;public;3;13;;@Override @Nullable public Object fromMessage(Message<?> message, Class<?> targetClass, @Nullable Object conversionHint) {     for (MessageConverter converter : getConverters()) {         Object result = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).fromMessage(message, targetClass, conversionHint) : converter.fromMessage(message, targetClass)).         if (result != null) {             return result.         }     }     return null. }
false;public;2;11;;@Override @Nullable public Message<?> toMessage(Object payload, @Nullable MessageHeaders headers) {     for (MessageConverter converter : getConverters()) {         Message<?> result = converter.toMessage(payload, headers).         if (result != null) {             return result.         }     }     return null. }
false;public;3;13;;@Override @Nullable public Message<?> toMessage(Object payload, @Nullable MessageHeaders headers, @Nullable Object conversionHint) {     for (MessageConverter converter : getConverters()) {         Message<?> result = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, headers, conversionHint) : converter.toMessage(payload, headers)).         if (result != null) {             return result.         }     }     return null. }
true;public;0;3;/**  * Return the underlying list of delegate converters.  */ ;/**  * Return the underlying list of delegate converters.  */ public List<MessageConverter> getConverters() {     return this.converters. }
false;public;0;4;;@Override public String toString() {     return "CompositeMessageConverter[converters=" + getConverters() + "]". }
