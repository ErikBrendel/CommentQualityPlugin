commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the STOMP message broker host.  */ ;/**  * Set the STOMP message broker host.  */ public StompBrokerRelayRegistration setRelayHost(String relayHost) {     Assert.hasText(relayHost, "relayHost must not be empty").     this.relayHost = relayHost.     return this. }
true;public;1;4;/**  * Set the STOMP message broker port.  */ ;/**  * Set the STOMP message broker port.  */ public StompBrokerRelayRegistration setRelayPort(int relayPort) {     this.relayPort = relayPort.     return this. }
true;public;1;5;/**  * Set the login to use when creating connections to the STOMP broker on  * behalf of connected clients.  * <p>By default this is set to "guest".  */ ;/**  * Set the login to use when creating connections to the STOMP broker on  * behalf of connected clients.  * <p>By default this is set to "guest".  */ public StompBrokerRelayRegistration setClientLogin(String login) {     Assert.hasText(login, "clientLogin must not be empty").     this.clientLogin = login.     return this. }
true;public;1;5;/**  * Set the passcode to use when creating connections to the STOMP broker on  * behalf of connected clients.  * <p>By default this is set to "guest".  */ ;/**  * Set the passcode to use when creating connections to the STOMP broker on  * behalf of connected clients.  * <p>By default this is set to "guest".  */ public StompBrokerRelayRegistration setClientPasscode(String passcode) {     Assert.hasText(passcode, "clientPasscode must not be empty").     this.clientPasscode = passcode.     return this. }
true;public;1;5;/**  * Set the login for the shared "system" connection used to send messages to  * the STOMP broker from within the application, i.e. messages not associated  * with a specific client session (e.g. REST/HTTP request handling method).  * <p>By default this is set to "guest".  */ ;/**  * Set the login for the shared "system" connection used to send messages to  * the STOMP broker from within the application, i.e. messages not associated  * with a specific client session (e.g. REST/HTTP request handling method).  * <p>By default this is set to "guest".  */ public StompBrokerRelayRegistration setSystemLogin(String login) {     Assert.hasText(login, "systemLogin must not be empty").     this.systemLogin = login.     return this. }
true;public;1;5;/**  * Set the passcode for the shared "system" connection used to send messages to  * the STOMP broker from within the application, i.e. messages not associated  * with a specific client session (e.g. REST/HTTP request handling method).  * <p>By default this is set to "guest".  */ ;/**  * Set the passcode for the shared "system" connection used to send messages to  * the STOMP broker from within the application, i.e. messages not associated  * with a specific client session (e.g. REST/HTTP request handling method).  * <p>By default this is set to "guest".  */ public StompBrokerRelayRegistration setSystemPasscode(String passcode) {     Assert.hasText(passcode, "systemPasscode must not be empty").     this.systemPasscode = passcode.     return this. }
true;public;1;4;/**  * Set the interval, in milliseconds, at which the "system" relay session will,  * in the absence of any other data being sent, send a heartbeat to the STOMP broker.  * A value of zero will prevent heartbeats from being sent to the broker.  * <p>The default value is 10000.  */ ;/**  * Set the interval, in milliseconds, at which the "system" relay session will,  * in the absence of any other data being sent, send a heartbeat to the STOMP broker.  * A value of zero will prevent heartbeats from being sent to the broker.  * <p>The default value is 10000.  */ public StompBrokerRelayRegistration setSystemHeartbeatSendInterval(long systemHeartbeatSendInterval) {     this.systemHeartbeatSendInterval = systemHeartbeatSendInterval.     return this. }
true;public;1;4;/**  * Set the maximum interval, in milliseconds, at which the "system" relay session  * expects, in the absence of any other data, to receive a heartbeat from the STOMP  * broker. A value of zero will configure the relay session to expect not to receive  * heartbeats from the broker.  * <p>The default value is 10000.  */ ;/**  * Set the maximum interval, in milliseconds, at which the "system" relay session  * expects, in the absence of any other data, to receive a heartbeat from the STOMP  * broker. A value of zero will configure the relay session to expect not to receive  * heartbeats from the broker.  * <p>The default value is 10000.  */ public StompBrokerRelayRegistration setSystemHeartbeatReceiveInterval(long heartbeatReceiveInterval) {     this.systemHeartbeatReceiveInterval = heartbeatReceiveInterval.     return this. }
true;public;1;4;/**  * Set the value of the "host" header to use in STOMP CONNECT frames. When this  * property is configured, a "host" header will be added to every STOMP frame sent to  * the STOMP broker. This may be useful for example in a cloud environment where the  * actual host to which the TCP connection is established is different from the host  * providing the cloud-based STOMP service.  * <p>By default this property is not set.  */ ;/**  * Set the value of the "host" header to use in STOMP CONNECT frames. When this  * property is configured, a "host" header will be added to every STOMP frame sent to  * the STOMP broker. This may be useful for example in a cloud environment where the  * actual host to which the TCP connection is established is different from the host  * providing the cloud-based STOMP service.  * <p>By default this property is not set.  */ public StompBrokerRelayRegistration setVirtualHost(String virtualHost) {     this.virtualHost = virtualHost.     return this. }
true;public;1;3;/**  * Configure a TCP client for managing TCP connections to the STOMP broker.  * <p>By default {@code ReactorNettyTcpClient} is used.  * <p><strong>Note:</strong> when this property is used, any  * {@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}  * specified are effectively ignored.  * @since 4.3.15  */ ;/**  * Configure a TCP client for managing TCP connections to the STOMP broker.  * <p>By default {@code ReactorNettyTcpClient} is used.  * <p><strong>Note:</strong> when this property is used, any  * {@link #setRelayHost(String) host} or {@link #setRelayPort(int) port}  * specified are effectively ignored.  * @since 4.3.15  */ public void setTcpClient(TcpOperations<byte[]> tcpClient) {     this.tcpClient = tcpClient. }
true;public;1;4;/**  * Configure whether the {@link StompBrokerRelayMessageHandler} should start  * automatically when the Spring ApplicationContext is refreshed.  * <p>The default setting is {@code true}.  */ ;/**  * Configure whether the {@link StompBrokerRelayMessageHandler} should start  * automatically when the Spring ApplicationContext is refreshed.  * <p>The default setting is {@code true}.  */ public StompBrokerRelayRegistration setAutoStartup(boolean autoStartup) {     this.autoStartup = autoStartup.     return this. }
true;public;1;4;/**  * Set a destination to broadcast messages to user destinations that remain  * unresolved because the user appears not to be connected. In a  * multi-application server scenario this gives other application servers  * a chance to try.  * <p>By default this is not set.  * @param destination the destination to broadcast unresolved messages to,  * e.g. "/topic/unresolved-user-destination"  */ ;/**  * Set a destination to broadcast messages to user destinations that remain  * unresolved because the user appears not to be connected. In a  * multi-application server scenario this gives other application servers  * a chance to try.  * <p>By default this is not set.  * @param destination the destination to broadcast unresolved messages to,  * e.g. "/topic/unresolved-user-destination"  */ public StompBrokerRelayRegistration setUserDestinationBroadcast(String destination) {     this.userDestinationBroadcast = destination.     return this. }
false;protected;0;4;;@Nullable protected String getUserDestinationBroadcast() {     return this.userDestinationBroadcast. }
true;public;1;4;/**  * Set a destination to broadcast the content of the local user registry to  * and to listen for such broadcasts from other servers. In a multi-application  * server scenarios this allows each server's user registry to be aware of  * users connected to other servers.  * <p>By default this is not set.  * @param destination the destination for broadcasting user registry details,  * e.g. "/topic/simp-user-registry".  */ ;/**  * Set a destination to broadcast the content of the local user registry to  * and to listen for such broadcasts from other servers. In a multi-application  * server scenarios this allows each server's user registry to be aware of  * users connected to other servers.  * <p>By default this is not set.  * @param destination the destination for broadcasting user registry details,  * e.g. "/topic/simp-user-registry".  */ public StompBrokerRelayRegistration setUserRegistryBroadcast(String destination) {     this.userRegistryBroadcast = destination.     return this. }
false;protected;0;4;;@Nullable protected String getUserRegistryBroadcast() {     return this.userRegistryBroadcast. }
false;protected;1;32;;protected StompBrokerRelayMessageHandler getMessageHandler(SubscribableChannel brokerChannel) {     StompBrokerRelayMessageHandler handler = new StompBrokerRelayMessageHandler(getClientInboundChannel(), getClientOutboundChannel(), brokerChannel, getDestinationPrefixes()).     handler.setRelayHost(this.relayHost).     handler.setRelayPort(this.relayPort).     handler.setClientLogin(this.clientLogin).     handler.setClientPasscode(this.clientPasscode).     handler.setSystemLogin(this.systemLogin).     handler.setSystemPasscode(this.systemPasscode).     if (this.systemHeartbeatSendInterval != null) {         handler.setSystemHeartbeatSendInterval(this.systemHeartbeatSendInterval).     }     if (this.systemHeartbeatReceiveInterval != null) {         handler.setSystemHeartbeatReceiveInterval(this.systemHeartbeatReceiveInterval).     }     if (this.virtualHost != null) {         handler.setVirtualHost(this.virtualHost).     }     if (this.tcpClient != null) {         handler.setTcpClient(this.tcpClient).     }     handler.setAutoStartup(this.autoStartup).     return handler. }
