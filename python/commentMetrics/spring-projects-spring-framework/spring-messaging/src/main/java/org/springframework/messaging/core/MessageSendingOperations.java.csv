commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Send a message to a default destination.  * @param message the message to send  */ ;/**  * Send a message to a default destination.  * @param message the message to send  */ void send(Message<?> message) throws MessagingException.
true;;2;1;/**  * Send a message to the given destination.  * @param destination the target destination  * @param message the message to send  */ ;/**  * Send a message to the given destination.  * @param destination the target destination  * @param message the message to send  */ void send(D destination, Message<?> message) throws MessagingException.
true;;1;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to a default destination.  * @param payload the Object to use as payload  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to a default destination.  * @param payload the Object to use as payload  */ void convertAndSend(Object payload) throws MessagingException.
true;;2;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message and send it to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  */ void convertAndSend(D destination, Object payload) throws MessagingException.
true;;3;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to  * the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers and send it to  * the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  */ void convertAndSend(D destination, Object payload, Map<String, Object> headers) throws MessagingException.
true;;2;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to a default destination.  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to a default destination.  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ void convertAndSend(Object payload, @Nullable MessagePostProcessor postProcessor) throws MessagingException.
true;;3;1;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message, apply the given post processor, and send  * the resulting message to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param postProcessor the post processor to apply to the message  */ void convertAndSend(D destination, Object payload, MessagePostProcessor postProcessor) throws MessagingException.
true;;4;2;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor,  * and send the resulting message to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  * @param postProcessor the post processor to apply to the message  */ ;/**  * Convert the given Object to serialized form, possibly using a  * {@link org.springframework.messaging.converter.MessageConverter},  * wrap it as a message with the given headers, apply the given post processor,  * and send the resulting message to the given destination.  * @param destination the target destination  * @param payload the Object to use as payload  * @param headers headers for the message to send  * @param postProcessor the post processor to apply to the message  */ void convertAndSend(D destination, Object payload, @Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor) throws MessagingException.
