commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Send a message to the given user.  * @param user the user that should receive the message.  * @param destination the destination to send the message to.  * @param payload the payload to send  */ ;/**  * Send a message to the given user.  * @param user the user that should receive the message.  * @param destination the destination to send the message to.  * @param payload the payload to send  */ void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException.
true;;4;2;/**  * Send a message to the given user.  * <p>By default headers are interpreted as native headers (e.g. STOMP) and  * are saved under a special key in the resulting Spring  * {@link org.springframework.messaging.Message Message}. In effect when the  * message leaves the application, the provided headers are included with it  * and delivered to the destination (e.g. the STOMP client or broker).  * <p>If the map already contains the key  * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}  * or was prepared with  * {@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}  * then the headers are used directly. A common expected case is providing a  * content type (to influence the message conversion) and native headers.  * This may be done as follows:  * <pre class="code">  * SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create().  * accessor.setContentType(MimeTypeUtils.TEXT_PLAIN).  * accessor.setNativeHeader("foo", "bar").  * accessor.setLeaveMutable(true).  * MessageHeaders headers = accessor.getMessageHeaders().  * messagingTemplate.convertAndSendToUser(user, destination, payload, headers).  * </pre>  * <p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in  * the above example, implementations of this interface should take notice and  * update the headers in the same instance (rather than copy or re-create it)  * and then set it immutable before sending the final message.  * @param user the user that should receive the message (must not be {@code null})  * @param destination the destination to send the message to (must not be {@code null})  * @param payload the payload to send (may be {@code null})  * @param headers the message headers (may be {@code null})  */ ;/**  * Send a message to the given user.  * <p>By default headers are interpreted as native headers (e.g. STOMP) and  * are saved under a special key in the resulting Spring  * {@link org.springframework.messaging.Message Message}. In effect when the  * message leaves the application, the provided headers are included with it  * and delivered to the destination (e.g. the STOMP client or broker).  * <p>If the map already contains the key  * {@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}  * or was prepared with  * {@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}  * then the headers are used directly. A common expected case is providing a  * content type (to influence the message conversion) and native headers.  * This may be done as follows:  * <pre class="code">  * SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create().  * accessor.setContentType(MimeTypeUtils.TEXT_PLAIN).  * accessor.setNativeHeader("foo", "bar").  * accessor.setLeaveMutable(true).  * MessageHeaders headers = accessor.getMessageHeaders().  * messagingTemplate.convertAndSendToUser(user, destination, payload, headers).  * </pre>  * <p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in  * the above example, implementations of this interface should take notice and  * update the headers in the same instance (rather than copy or re-create it)  * and then set it immutable before sending the final message.  * @param user the user that should receive the message (must not be {@code null})  * @param destination the destination to send the message to (must not be {@code null})  * @param payload the payload to send (may be {@code null})  * @param headers the message headers (may be {@code null})  */ void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) throws MessagingException.
true;;4;2;/**  * Send a message to the given user.  * @param user the user that should receive the message (must not be {@code null})  * @param destination the destination to send the message to (must not be {@code null})  * @param payload the payload to send (may be {@code null})  * @param postProcessor a postProcessor to post-process or modify the created message  */ ;/**  * Send a message to the given user.  * @param user the user that should receive the message (must not be {@code null})  * @param destination the destination to send the message to (must not be {@code null})  * @param payload the payload to send (may be {@code null})  * @param postProcessor a postProcessor to post-process or modify the created message  */ void convertAndSendToUser(String user, String destination, Object payload, MessagePostProcessor postProcessor) throws MessagingException.
true;;5;2;/**  * Send a message to the given user.  * <p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important  * notes regarding the input headers.  * @param user the user that should receive the message  * @param destination the destination to send the message to  * @param payload the payload to send  * @param headers the message headers  * @param postProcessor a postProcessor to post-process or modify the created message  */ ;/**  * Send a message to the given user.  * <p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important  * notes regarding the input headers.  * @param user the user that should receive the message  * @param destination the destination to send the message to  * @param payload the payload to send  * @param headers the message headers  * @param postProcessor a postProcessor to post-process or modify the created message  */ void convertAndSendToUser(String user, String destination, Object payload, @Nullable Map<String, Object> headers, @Nullable MessagePostProcessor postProcessor) throws MessagingException.
