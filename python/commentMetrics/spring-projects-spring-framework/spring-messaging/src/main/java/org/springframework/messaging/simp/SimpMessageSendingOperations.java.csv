# id;timestamp;commentText;codeText;commentWords;codeWords
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1385507478;Send a message to a specific user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param headers the message headers;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1397429525;Send a message to the given user.__<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker).__<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:__<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()___messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>__<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param headers the message headers, may be {@code null};void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1409686877;Send a message to the given user.__<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker).__<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:__<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()___messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>__<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param headers the message headers, may be {@code null};void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1413848647;Send a message to the given user.__<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker).__<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:__<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()___messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>__<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param headers the message headers, may be {@code null};void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1437567612;Send a message to the given user._<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker)._<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:_<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()__messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>_<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param headers the message headers (may be {@code null});void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers) 			throws MessagingException_;1496837955;Send a message to the given user._<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker)._<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:_<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()__messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>_<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param headers the message headers (may be {@code null});void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1385507478;Send a message to a specific user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1397429525;Send a message to the given user.__<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1409686877;Send a message to the given user.__<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1413848647;Send a message to the given user.__<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1437567612;Send a message to the given user._<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers._@param user the user that should receive the message_@param destination the destination to send the message to_@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers, 			MessagePostProcessor postProcessor) throws MessagingException_;1495868221;Send a message to the given user._<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers._@param user the user that should receive the message_@param destination the destination to send the message to_@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, Map<String, Object> headers,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,map,string,object,headers,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1381440318;Send a message to a specific user.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1385507478;Send a message to a specific user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1397429525;Send a message to the given user.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1409686877;Send a message to the given user.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1413848647;Send a message to the given user.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1437567612;Send a message to the given user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1495868221;Send a message to the given user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1496259743;Send a message to the given user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;1496837955;Send a message to the given user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send;void convertAndSendToUser(String user, String destination, Object payload) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send;void,convert,and,send,to,user,string,user,string,destination,object,payload,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;1496259743;Send a message to the given user._<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers._@param user the user that should receive the message_@param destination the destination to send the message to_@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, @Nullable Map<String, Object> headers, 			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;1496837955;Send a message to the given user._<p>See {@link #convertAndSend(Object, Object, java.util.Map)} for important_notes regarding the input headers._@param user the user that should receive the message_@param destination the destination to send the message to_@param payload the payload to send_@param headers the message headers_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload, @Nullable Map<String, Object> headers,_			@Nullable MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,p,see,link,convert,and,send,object,object,java,util,map,for,important,notes,regarding,the,input,headers,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,headers,the,message,headers,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,nullable,map,string,object,headers,nullable,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1381440318;Send a message to a specific user.__@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1385507478;Send a message to a specific user._@param user the user that should receive the message._@param destination the destination to send the message to._@param payload the payload to send_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,a,specific,user,param,user,the,user,that,should,receive,the,message,param,destination,the,destination,to,send,the,message,to,param,payload,the,payload,to,send,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1397429525;Send a message to the given user.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1409686877;Send a message to the given user.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1413848647;Send a message to the given user.__@param user the user that should receive the message, must not be {@code null}_@param destination the destination to send the message to, must not be {@code null}_@param payload the payload to send, may be {@code null}_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1437567612;Send a message to the given user._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, @Nullable Object payload, @Nullable Map<String, Object> headers) 			throws MessagingException_;1495868221;Send a message to the given user._<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker)._<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:_<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()__messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>_<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param headers the message headers (may be {@code null});void convertAndSendToUser(String user, String destination, @Nullable Object payload, @Nullable Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,nullable,object,payload,nullable,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, @Nullable Object payload, @Nullable Map<String, Object> headers) 			throws MessagingException_;1496259743;Send a message to the given user._<p>By default headers are interpreted as native headers (e.g. STOMP) and_are saved under a special key in the resulting Spring_{@link org.springframework.messaging.Message Message}. In effect when the_message leaves the application, the provided headers are included with it_and delivered to the destination (e.g. the STOMP client or broker)._<p>If the map already contains the key_{@link org.springframework.messaging.support.NativeMessageHeaderAccessor#NATIVE_HEADERS "nativeHeaders"}_or was prepared with_{@link org.springframework.messaging.simp.SimpMessageHeaderAccessor SimpMessageHeaderAccessor}_then the headers are used directly. A common expected case is providing a_content type (to influence the message conversion) and native headers._This may be done as follows:_<pre class="code">_SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()__accessor.setContentType(MimeTypeUtils.TEXT_PLAIN)__accessor.setNativeHeader("foo", "bar")__accessor.setLeaveMutable(true)__MessageHeaders headers = accessor.getMessageHeaders()__messagingTemplate.convertAndSendToUser(user, destination, payload, headers)__</pre>_<p><strong>Note:</strong> if the {@code MessageHeaders} are mutable as in_the above example, implementations of this interface should take notice and_update the headers in the same instance (rather than copy or re-create it)_and then set it immutable before sending the final message._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param headers the message headers (may be {@code null});void convertAndSendToUser(String user, String destination, @Nullable Object payload, @Nullable Map<String, Object> headers)_			throws MessagingException_;send,a,message,to,the,given,user,p,by,default,headers,are,interpreted,as,native,headers,e,g,stomp,and,are,saved,under,a,special,key,in,the,resulting,spring,link,org,springframework,messaging,message,message,in,effect,when,the,message,leaves,the,application,the,provided,headers,are,included,with,it,and,delivered,to,the,destination,e,g,the,stomp,client,or,broker,p,if,the,map,already,contains,the,key,link,org,springframework,messaging,support,native,message,header,accessor,native,headers,or,was,prepared,with,link,org,springframework,messaging,simp,simp,message,header,accessor,simp,message,header,accessor,then,the,headers,are,used,directly,a,common,expected,case,is,providing,a,content,type,to,influence,the,message,conversion,and,native,headers,this,may,be,done,as,follows,pre,class,code,simp,message,header,accessor,accessor,simp,message,header,accessor,create,accessor,set,content,type,mime,type,utils,accessor,set,native,header,foo,bar,accessor,set,leave,mutable,true,message,headers,headers,accessor,get,message,headers,messaging,template,convert,and,send,to,user,user,destination,payload,headers,pre,p,strong,note,strong,if,the,code,message,headers,are,mutable,as,in,the,above,example,implementations,of,this,interface,should,take,notice,and,update,the,headers,in,the,same,instance,rather,than,copy,or,re,create,it,and,then,set,it,immutable,before,sending,the,final,message,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,headers,the,message,headers,may,be,code,null;void,convert,and,send,to,user,string,user,string,destination,nullable,object,payload,nullable,map,string,object,headers,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, @Nullable Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1495868221;Send a message to the given user._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, @Nullable Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,nullable,object,payload,message,post,processor,post,processor,throws,messaging,exception
SimpMessageSendingOperations -> void convertAndSendToUser(String user, String destination, @Nullable Object payload, 			MessagePostProcessor postProcessor) throws MessagingException_;1496259743;Send a message to the given user._@param user the user that should receive the message (must not be {@code null})_@param destination the destination to send the message to (must not be {@code null})_@param payload the payload to send (may be {@code null})_@param postProcessor a postProcessor to post-process or modify the created message;void convertAndSendToUser(String user, String destination, @Nullable Object payload,_			MessagePostProcessor postProcessor) throws MessagingException_;send,a,message,to,the,given,user,param,user,the,user,that,should,receive,the,message,must,not,be,code,null,param,destination,the,destination,to,send,the,message,to,must,not,be,code,null,param,payload,the,payload,to,send,may,be,code,null,param,post,processor,a,post,processor,to,post,process,or,modify,the,created,message;void,convert,and,send,to,user,string,user,string,destination,nullable,object,payload,message,post,processor,post,processor,throws,messaging,exception
